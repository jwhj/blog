<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LevelDB数据丢失问题</title>
      <link href="/2020/02/03/leveldb-and-git-md/"/>
      <url>/2020/02/03/leveldb-and-git-md/</url>
      
        <content type="html"><![CDATA[<p>我存在<code>levelDB</code>里面的数据丢了好几次，最近研究了一下，虽然不确定具体的原理，但大概知道怎么避免类似情况了。</p><a id="more"></a><p>经过观察可以发现，就算不对数据库进行修改，仅仅是查询，文件也会发生变化。而我丢失数据，均发生在使用<code>git</code>切换分支，再切换回来的时候。我推测这之中某个时候，因为读数据发生了文件变动，然后切换分支又撤销了一部分文件变动，导致了数据库的损坏。</p><!-- 虽然暂时还不确定损坏的具体过程，但以后记住，不要把数据库放在git repo里面，大概就没问题了。 --><p>暂时不清楚损坏过程，但是要记住，<strong>不要把数据库放到git repo里面！</strong></p><p><del>有些数据丢了是真的心疼，还好从某个备份里找回来了不少。</del><br><!--  --></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript使用笔记</title>
      <link href="/2020/01/22/ts-notes/"/>
      <url>/2020/01/22/ts-notes/</url>
      
        <content type="html"><![CDATA[<p>使用<del>Any</del>Typescript已经有一段时间了，这期间踩了不少坑，也发现了一些骚操作。这里简单记录一下。</p><a id="more"></a><h3 id="CommonJS与ES-Module兼容的问题"><a href="#CommonJS与ES-Module兼容的问题" class="headerlink" title="CommonJS与ES Module兼容的问题"></a>CommonJS与ES Module兼容的问题</h3><p>由于各种原因，CommonJS的模块化方式与ES Module的模块化方式之间并不能很容易地一一对应起来。ES Module中有default export的概念，如果在<code>0.js</code>中写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A</span><br></pre></td></tr></table></figure></p><p>那么就可以在<code>1.js</code>里面使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> anyNameYouLike <span class="keyword">from</span> <span class="string">'./0'</span></span><br></pre></td></tr></table></figure></p><p>来加载。但同时，一个模块在拥有default export的同时，也允许拥有别的export，这样一来，default export就得被编译成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.default=A</span><br></pre></td></tr></table></figure></p><p>而不是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=A</span><br></pre></td></tr></table></figure></p><p>但是问题在于，CommonJS的模块只导出一个对象时，往往会采用后一种方式，而ES Module又不能实现后一种方式，这就会导致许多混乱。</p><p>Typescript的编译器提供了一个编译选项<code>--esModuleInterop</code>，加上它就能解决这个问题。这样就可以在自己的代码里统一使用default export和default import了。</p><h3 id="前端项目Code-Splitting及磁盘空间节省"><a href="#前端项目Code-Splitting及磁盘空间节省" class="headerlink" title="前端项目Code Splitting及磁盘空间节省"></a>前端项目Code Splitting<del>及磁盘空间节省</del></h3><p>因为种种原因我不想用webpack，而我还不能使rollup正常工作，所以我用的bundler一直还是browserify。于是我必须手动进行Code Splitting。</p><p>为了使用类型推断等功能带来的便利，使用前端库的时候，同样需要将其安装到本地并import。但另一方面，为了减小bundle体积，优化首屏体验，用到的很多库其实应该从cdn加载。为了兼顾这两点，可以使用一个<code>browserify</code>的transform：<code>browserify-shim</code>。以React这个包为例，在package.json里加上如下配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"browserify"</span>:&#123;</span><br><span class="line"><span class="attr">"transform"</span>:[</span><br><span class="line"><span class="string">"browserify-shim"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"browserify-shim"</span>:&#123;</span><br><span class="line"><span class="attr">"react"</span>:<span class="string">"global:React"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意第一个<code>react</code>是包名，第二个<code>React</code>是由cdn导入的库提供的全局变量名。</p><p>那这个跟磁盘空间节省又有什么关系呢？它之所以能节省磁盘空间，是因为这么做了之后，本地不需要安装<code>react</code>，只需要安装<code>@types/react</code>，就可以import然后正常使用了。</p><p>顺便提一下，可以把所有脚本加上<code>defer</code>然后放到<code>&lt;head&gt;</code>里面，这样脚本会异步并行加载，并在dom渲染完成后，按照<code>&lt;script&gt;</code>标签的顺序执行。<br><!--  --></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用增量编译加快typescript项目编译</title>
      <link href="/2020/01/03/watch/"/>
      <url>/2020/01/03/watch/</url>
      
        <content type="html"><![CDATA[<p>前段时间开始试着用typescript，感觉有一个很明显的问题是，习惯了脚本语言之后，我不太有耐性等待一两秒的编译。最近折腾了各种方法，一开始我想禁用掉typescript的类型检查来提升编译速度（反正编辑器里就会进行检查），结果发现<code>tsc</code>并没有这个编译选项，倒是<code>ts-node</code>有一个<code>-T</code>选项可以做到这点。其实一个更好的解决方案可能是使用增量编译。</p><a id="more"></a><p><code>tsc</code>本身就能实现增量编译的效果，运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --watch src/*.ts --outDir dist --sourceMap</span><br></pre></td></tr></table></figure></p><p>就能启动一个服务，在检测到文件修改的时候，进行增量编译。一般来讲，增量编译会比重新编译整个项目快得多。这个方法在用typescript写后端的时候应该够用了。</p><p>但是这个方法不太适合写前端。如果再用<code>browserify</code>这样的bundle工具进行打包的话，得到的source map对应的是<code>tsc</code>编译之后的结果，不便于前端的调试。事实上，<code>browserify</code>提供了一个叫做<code>watchify</code>的插件，<code>watchify</code>的用法跟<code>browserify</code>基本一样，区别在于，<code>watchify</code>必须用<code>-o</code>指定输出文件，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watchify -t tsify --debug -v -o bundle.js src/index.ts</span><br></pre></td></tr></table></figure></p><p>UPD：<br>写之前的内容的时候，电脑是长期接着电的，刚刚发现不接电的话<code>watchify</code>会比<code>tsc --watch</code>慢。折腾了一晚上又发现了一个方法。有一个<code>browserify</code>的transform叫做<code>sourceify</code>，简单地理解的话，它可以递归地读取source map，然后inline到bundle里面，这样就可以先用<code>tsc --watch</code>编译，然后<code>browserify</code>打包了。但是有于<code>sourceify</code>的一些feature，debug的时候要在web服务器上把<code>/source</code>映射到根目录。</p><p>另外还有几个细节：<del>一是tsc编译jsx还是会很慢</del><em>UPD：不会</em>，另外直接<code>tsc -w</code>就可以了。</p><p>UPD：<br>不知道为什么，把一条<code>import</code>语句去掉的时候编译可能会比较久。<br><!--  --></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在git-bash下输入中文</title>
      <link href="/2019/11/30/gitbashutf8/"/>
      <url>/2019/11/30/gitbashutf8/</url>
      
        <content type="html"><![CDATA[<p>Windows Terminal终于支持显示中文/输入中文了，真是大快人心。</p><p>我平时在Windows Terminal里面使用git-bash，输入中文一直会遇到一些问题，今天终于把问题折腾没了。</p><a id="more"></a><p>具体来讲，就是输入中文以后，要多次退格才能删除一个中文字符，而且即使删除了，仍然会有不可见字符。但是这个问题在我使用git-bash自带的mintty的时候又会神秘解决。</p><p>这是因为utf-8是不定长的编码，汉字占三个字节，但git-bash“认为”我使用的是定长的编码，汉字占两个字节。这样一来，按了两次退格之后，汉字就不显示了，但实际上还有一个字节没有被删除。</p><p>既然在mintty中问题被解决，说明mintty中应该做了某种配置，让git-bash默认使用utf-8。我上网查了一下，发现可以在<code>~/.bashrc</code>里面加上两行来解决这个问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p><del>我怀疑只需要其中一行就能起作用，但我懒得实验了。</del><br><!--  --></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在xelatex中使用思源字体</title>
      <link href="/2019/11/28/sourcehan/"/>
      <url>/2019/11/28/sourcehan/</url>
      
        <content type="html"><![CDATA[<p>早就听说微软雅黑存在版权问题，而思源字体非常优越，但是我之前折腾了半天一直装不上就很尴尬了。</p><a id="more"></a><p>首先思源字体可以从github上面下载。按照网上大多数人的说法，安装字体后，在xelatex里面使用如下代码就能使用思源字体了。<del>然而并不能。</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;xeCJK&#125;</span><br><span class="line">\usepackage&#123;fontspec&#125;</span><br><span class="line">\setCJKmainfont&#123;Source Han Serif&#125;</span><br></pre></td></tr></table></figure></p><p>今天我终于弄清楚了为什么：安装字体的时候要选择为所有用户安装。<del>这也太惨了。</del></p><p><del>现在还是有一点小问题，latex里面的思源字体跟别的地方显示的稍有不同，比如“浅”字有三横什么的。</del><br>改成<code>\setCJKmainfont{Source Han Serif SC}</code>就可以了。<br><!--  --></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nodejs的pipe遇到的一点小问题</title>
      <link href="/2019/11/26/pipe/"/>
      <url>/2019/11/26/pipe/</url>
      
        <content type="html"><![CDATA[<p><del>随便发点东西就当除草。</del></p><p>这个东西调了我一整晚……心态爆炸</p><a id="more"></a><p>简单来讲就是，使用nodejs stream的pipe的时候，它可能会在某些地方进行编码转换，有些地方你可以手动指定为只传输二进制，但有的地方似乎不行 <del>(也有可能是我还没找到)</del>。</p><p>总之如果没弄清楚原因，以后用pipe尽量只传输文本数据，要传二进制的话尽量用系统自带的管道。</p><hr><p>UPD:</p><p>今天又研究了一下，如果用spawn而不是exec的话，没有这个问题，可能是因为exec会自动启动一个shell，然后shell里面的编码出了问题。</p><p>另外要注意一下，<code>encoding:&#39;binary&#39;</code>并不是真的binary，而是一种叫<code>latin1</code>的编码，传二进制数据的时候什么都不要设置就好了。不过这么做的话，版本不能太旧，否则<strong>可能</strong>会出问题。<br><!--  --></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决go get下载缓慢的问题</title>
      <link href="/2019/05/25/gogetpkg/"/>
      <url>/2019/05/25/gogetpkg/</url>
      
        <content type="html"><![CDATA[<p>go get下载第三方包的时候大多数情况要从github上面pull，有的时候还要从<code>golang.org</code>之类的地方下载源码. 由于众所周知的原因git clone速度极慢，golang.org根本不能访问，所以golang下载第三方包的时候总是极其麻烦. 最近写了个程序解决这个问题.</p><a id="more"></a><p>讲一下大概的思路. </p><p>我发现git clone和github上面的download zip是从不同的地方下载的，而download zip比git clone快很多，所以可以写个程序自动download zip，解压到安装第三方包的文件夹下，再编译.</p><p>至于<code>golang.org</code>，它在<code>github.com/golang</code>上面有镜像，至于其它一些网站也多半在github上面有镜像，程序里面获取下载链接的时候额外处理一下就可以了.</p><p>大概用法：把go get换成gogetpkg -p就行，如果第三方包的代码已经下载下来并放到正确位置，只需要安装的话，可以加上-nd，这样就会不下载直接安装.</p><p>举几个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gogetpkg -p github.com/jwhj/gogetpkg</span><br><span class="line"><span class="comment"># 我装我自己</span></span><br><span class="line">gogetpkg -p golang.org/x/tools/imports</span><br><span class="line"><span class="comment"># 装package里面的package也是可以的</span></span><br><span class="line">gogetpkg -p golang.org/x/tools/playground -nd</span><br><span class="line"><span class="comment"># 刚刚已经把整个golang.org/x/tools下载下来了</span></span><br><span class="line"><span class="comment"># 就不用再下载一次了</span></span><br></pre></td></tr></table></figure><p><del>你会发现它并不能处理依赖，你需要手动处理……</del></p><p>项目地址：<a href="https://github.com/jwhj/gogetpkg" target="_blank" rel="noopener">https://github.com/jwhj/gogetpkg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[whj什么都不会系列-2]bzoj4734题解</title>
      <link href="/2019/03/22/bzoj4734/"/>
      <url>/2019/03/22/bzoj4734/</url>
      
        <content type="html"><![CDATA[<p>bzoj上的题面真是残缺不全……uoj上有完整的题面.</p><p>退役久了脑子都不好用了，这么简单的东西推了半天……</p><a id="more"></a><p>看到这种求和题很自然地就会想到拆成卷积的形式：</p><script type="math/tex; mode=display">Q(f,n,x)=n!\sum _{k=0}^n\frac{f(k)x^k}{k!}\cdot\frac{(1-x)^{n-k}}{(n-k)!}</script><p>记</p><script type="math/tex; mode=display">\begin{aligned}g(z)&=\sum\frac{f(k)x^k}{k!}z^k\\h(z)&=\sum\frac{(1-x)^k}{k!}z^k\end{aligned}</script><p>那么答案就是$n![z^n]g(z)h(z)$.</p><p>很容易看出$h(z)=e^{(1-x)z}$，关键是怎么表示$g(z)$.</p><p>这里要用到一个结论：设$A(z)=\sum a _kz^k$，记$P _L(z)=\sum\left\{\begin{matrix}L\\k\end{matrix}\right\}z^k$，那么有</p><script type="math/tex; mode=display">A(z)P _L(z)=\sum a _kk^Lz^k</script><p>证明的话，对$L$归纳就可以了. 感觉这个结论在很多时候都挺有用的.</p><p>设$f(x)=\sum c _ix^i$，那么就有</p><script type="math/tex; mode=display">\begin{aligned}g(z)&=\sum _k\left(\frac{(xz)^k}{k!}\sum _ic _ik^i\right)\\&=\sum _ic _i\sum _k\frac{(xz)^kk^i}{k!}\\&=\sum _ic _ie^{xz}P _i(xz)\end{aligned}</script><p>那么答案就是$n![z^n]e^z\sum _{i=0}^mc _iP _i(xz)$</p><p>记$t(z)=\sum _{i=0}^mc _iP _i(xz)$，注意到$\deg t=m$，所以如果我们能把$t(z)$求出来的话，剩下就只需要做一个长度为$m$的卷积了(而不是题目式子里长为$n$的卷积).</p><p>为了求出$t(z)$，考虑到斯特林数没有什么太好的性质，我们需要给它乘回一个$e^{xz}$. 我们知道$[z^k]t(z)e^{xz}=\frac{f(k)x^k}{k!}$，所以要求$t(z)$的话我们可以把$\sum _k\frac{f(k)x^k}{k!}z^k$和$e^{-xz}$的前$m+1$项做一个卷积.</p><p>这道题，总的来说，这么一大通的变换，主要目的就是分离出一个长度为$\mathcal O(m)$的多项式，这样一切就都好处理了.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ele maxn=<span class="number">1</span>&lt;&lt;<span class="number">16</span>|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> ele MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> ele g=<span class="number">3</span>;</span><br><span class="line">ele n,m,x,f[maxn],fac[maxn],ifac[maxn],a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele&amp;a,ele b)</span></span>&#123;</span><br><span class="line">a+=b;</span><br><span class="line"><span class="keyword">return</span> a&gt;=MOD?a-=MOD:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ele K,ele n,ele *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele f[maxn];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">f[i]=f[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) f[i]+=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;f[i]) swap(y[i],y[f[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;n; p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">ele o=pw(g,(MOD<span class="number">-1</span>)/p/<span class="number">2</span>);</span><br><span class="line">o=~K?o:pw(o,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=(p&lt;&lt;<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i,o1=<span class="number">1</span>; j&lt;i+p; ++j,o1=(ll)o1*o%MOD)&#123;</span><br><span class="line">ele u=y[j],v=(ll)y[j+p]*o1%MOD;</span><br><span class="line">y[j]=y[j+p]=u;</span><br><span class="line">add(y[j],v); add(y[j+p],MOD-v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~K)&#123;</span><br><span class="line">ele invn=pw(n,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) y[i]=(ll)y[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,f+i);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) fac[i]=(ll)fac[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">ifac[m]=pw(fac[m],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=m<span class="number">-1</span>; ~i; --i) ifac[i]=(ll)ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">ele tmp=<span class="number">1</span>; <span class="keyword">while</span> (tmp&lt;=m+m) tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,p=<span class="number">1</span>; i&lt;=m; ++i,p=(ll)p*x%MOD)&#123;</span><br><span class="line">a[i]=(ll)f[i]*p%MOD*ifac[i]%MOD;</span><br><span class="line">b[i]=(ll)p*ifac[i]%MOD;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) b[i]=MOD-b[i];</span><br><span class="line">&#125;</span><br><span class="line">ntt(<span class="number">1</span>,tmp,a); ntt(<span class="number">1</span>,tmp,b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i) a[i]=(ll)a[i]*b[i]%MOD;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,a);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,p=<span class="number">1</span>; i&lt;=m; p=(ll)p*(n-i)%MOD,++i) add(ans,(ll)a[i]*p%MOD);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> bzoj </tag>
            
            <tag> uoj </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N Squared Minus One</title>
      <link href="/2019/02/23/nsmo/"/>
      <url>/2019/02/23/nsmo/</url>
      
        <content type="html"><![CDATA[<p>再厚颜无耻地放个小游戏.</p><a id="more"></a><p>地址 <a href="https://jwhj.github.io/nsmo/" target="_blank" rel="noopener">https://jwhj.github.io/nsmo/</a></p><p>源码放在 <a href="https://github.com/jwhj/nsmo" target="_blank" rel="noopener">https://github.com/jwhj/nsmo</a></p><p><del>跟arcsine比起来这个才像一个真的游戏.</del></p><p><del>我感觉还挺好玩的.</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arcsine</title>
      <link href="/2019/01/20/arcsine/"/>
      <url>/2019/01/20/arcsine/</url>
      
        <content type="html"><![CDATA[<p>厚颜无耻地发一个自己写的小游戏.</p><a id="more"></a><p>地址 <a href="http://jwhj.github.io/arcsine/" target="_blank" rel="noopener">http://jwhj.github.io/arcsine/</a> ，打开就能玩.</p><p>源码放在 <a href="https://github.com/jwhj/arcsine" target="_blank" rel="noopener">https://github.com/jwhj/arcsine</a> ，写得很丑希望不要被嘲讽. <del>说得好像有人会看一样.</del></p><p>游戏功能也许会在未来进一步完善. <del>毕竟我比较懒.</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用markdown做slides</title>
      <link href="/2018/12/15/mdslide/"/>
      <url>/2018/12/15/mdslide/</url>
      
        <content type="html"><![CDATA[<p>厚颜无耻地把自己的项目发上来.</p><a id="more"></a><p>其实也没写什么东西，就是把<code>reveal.js</code>封装了一下. 这样就可以比较方便地用markdown直接写，也可以一条命令导出，方便在其他电脑上播放.</p><p>暂时还没有写文档，也许会在有生之年补上.</p><p><a href="https://github.com/jwhj/mdslide" target="_blank" rel="noopener">项目地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whj什么都不会系列-1</title>
      <link href="/2018/12/14/sbwhj-1/"/>
      <url>/2018/12/14/sbwhj-1/</url>
      
        <content type="html"><![CDATA[<p>退役了只有一直没怎么做题，感觉水平退步了不少，以前一些比较显然的思路现在可能都想不到了. 这样下去肯定是不行的，我尽量时不时做点<del>水</del>题写点题解恢复一点智商吧.</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n,m$，求有多少对$(i,j)$满足$1\le i\le n,1\le j\le m$且$\gcd(i,j)$为素数.</p><p>共$T$组数据.</p><p>$n\le 10^7,T\le 10^4$</p><a id="more"></a><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><p>记$f(n,m)=\sum _{i=1}^n\sum _{j=1}^m[i\perp j]$，显然答案就是</p><script type="math/tex; mode=display">\sum _{p\text{ is prime}}f([n/p],[m/p])</script><p>下面看$f$怎么算. 如果$n=m$，显然有$f(n,n)=\sum _{i=1}^n\varphi(n)$，预处理欧拉函数前缀和就可以做了.</p><p>$n\neq m$的时候一个显然的套路就是莫比乌斯反演：</p><script type="math/tex; mode=display">\begin{aligned}f(n,m)=&\sum _{i}\sum _{j}\sum _{d|\gcd(i,j)}\mu(d)\\=&\sum _{d}\mu(d) [n/d] [m/d]\end{aligned}</script><p>用整除分块可以做到$\mathcal O(\sqrt{n})$的复杂度，从而每次询问是$\mathcal O(n^{3/4})$， 但这还是太慢了.</p><p><del>前面都是废话.</del></p><p>$f$本身的计算已经没什么办法优化了，考虑代入$f([n/p],[m/p])$，得到</p><script type="math/tex; mode=display">\begin{aligned}\sum _{p\text{ is prime}}f([n/p],[m/p])=&\sum _{p\text{ is prime}}\sum\mu(d) [n/(pd)] [m/(pd)]\\=&\sum _{T}[n/T] [m/T]\sum _{p|T,p\text{ is prime}}\mu(T/p)\end{aligned}</script><p>记$g(T)=\sum _{p|T,p\text{ is prime}}\mu(T/p)$，观察一下可以发现$g(n)$很有规律.</p><p>记$s _1(n),s _2(n)$分别为$n$的不同素因数个数和歌素因数的指数和，那么当$s _1(n)=s _2(n)$时，$g(T)=-s _1(n)(-1)^{s _1(n)}$，当$s _1(n)+1=s _2(n)$时，$g(T)=(-1)^{s _1(n)}$，当$s _1(n)+2\le s _2(n)$时，$g(T)=0$.</p><p>于是就可以很容易地处理$g(n)$的前缀和，进而$\mathcal O(\sqrt{n})$地处理每次询问.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> sbwhj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>O(1)快速乘</title>
      <link href="/2018/11/30/fastmul/"/>
      <url>/2018/11/30/fastmul/</url>
      
        <content type="html"><![CDATA[<p>AFO有段时间了，感觉自己什么都不会了，随便研究点东西证明我还活着……</p><a id="more"></a><p>众所周知在long long乘long long模long long的时候，直接乘会溢出，所以要用一些技巧来处理. 一般的快速乘是$O(\log x)$的，所以我们也可以叫它慢速乘. 事实上可以用一些技巧做到$O(1)$，实现真正的快速乘.</p><p>首先我们知道$a$模$b$可以表示为$a-b\lfloor a/b\rfloor$，于是如果我们要计算$a\times b$对$m$取模的结果，可以考虑计算$ab-m\lfloor(a/m)*b\rfloor$. 写出下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a%=MOD; b%=MOD;</span><br><span class="line">ele d=(<span class="keyword">long</span> <span class="keyword">double</span>)a/MOD*b+<span class="number">0.5</span>;</span><br><span class="line">ele tmp=a*b-d*MOD;</span><br><span class="line"><span class="keyword">if</span> (tmp&lt;<span class="number">0</span>) tmp+=MOD;</span><br></pre></td></tr></table></figure><p>这里的<code>a*b</code>和<code>d*MOD</code>显然都会溢出，不过可以注意到，溢出只会使结果差$2^{64}$的整数倍，而模出来的结果显然不到$2^{64}$所以一定是对的.</p><p>不过这里有一个小问题，为了防止炸精度，我们加了$0.5$来四舍五入，而不是向下取整，最后的结果可能会少一个$m$，所以最后要判断一下，如果<code>tmp&lt;0</code>就要<code>tmp+=MOD</code>.</p><p>另外的话如果$a\ge m$或者$b\ge m$可能会挂，所以一开始的时候要模一下.</p><p>简化的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">mul</span><span class="params">(ele a,ele b,ele MOD)</span></span>&#123;</span><br><span class="line">a%=MOD; b%=MOD;</span><br><span class="line">ele tmp=a*b-(ele)((<span class="keyword">long</span> <span class="keyword">double</span>)a/MOD*b+<span class="number">0.5</span>)*MOD;</span><br><span class="line"><span class="keyword">return</span> tmp&lt;<span class="number">0</span>?tmp+MOD:tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑科技</title>
      <link href="/2018/09/30/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
      <url>/2018/09/30/%E9%BB%91%E7%A7%91%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<p>好久没写博客了，随便扔点东西上来除个草.</p><p>其实也说不上是黑科技，就是自己平时折腾linux，折腾vim之类的东西的时候发现的一些小技巧罢了.</p><a id="more"></a><h3 id="esc键太远"><a href="#esc键太远" class="headerlink" title="esc键太远"></a>esc键太远</h3><p>平时用vim的时候经常要用到esc键，vim的设计理念本来是让手不用离开主键区，<del>但是esc似乎就在主键区之外</del>. 事实上vim刚被开发出来那会的键盘和现在是不一样的，那个时候esc还在主键区里面. 解决这个东西的方法有几个，我用的方法是把esc和caps lock调换一下，只需要在<code>~/.xprofile</code>里面加上这样一行代码（应该只对linux有效）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setxkbmap -option caps:swapescape</span><br></pre></td></tr></table></figure><h3 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">set autoindent</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set noexpandtab</span><br><span class="line">let g:python_recommended_style=0</span><br><span class="line">set nu</span><br><span class="line">set backspace=2</span><br><span class="line">set mouse=a</span><br><span class="line">syntax on</span><br><span class="line">colorscheme desert</span><br><span class="line"></span><br><span class="line">map &lt;space&gt; :</span><br><span class="line">nnoremap j gj</span><br><span class="line">vnoremap j gj</span><br><span class="line">nnoremap k gk</span><br><span class="line">vnoremap k gk</span><br><span class="line">map JJ &lt;esc&gt;</span><br><span class="line">imap JJ &lt;esc&gt;</span><br><span class="line">map JK g$</span><br><span class="line">map KJ g^</span><br><span class="line">imap JK &lt;esc&gt;lg$a</span><br><span class="line">imap KJ &lt;esc&gt;hg^i</span><br><span class="line"></span><br><span class="line">map &lt;f7&gt; :%s/[\u4E00-\u9FCC]//gn&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">function! P1()</span><br><span class="line">:%s/\\\\\\&#123;/\\&#123;/g</span><br><span class="line">:%s/\\\\\\&#125;/\\&#125;/g</span><br><span class="line">:%s/\\\\\\\\/\\\\/g</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">function! P2()</span><br><span class="line">:%s/\\\\/\\\\\\\\/g</span><br><span class="line">:%s/\\&#123;/\\\\\\&#123;/g</span><br><span class="line">:%s/\\&#125;/\\\\\\&#125;/g</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class="line">Plug &apos;godlygeek/tabular&apos;</span><br><span class="line">Plug &apos;plasticboy/vim-markdown&apos;</span><br><span class="line">Plug &apos;iamcco/markdown-preview.vim&apos;</span><br><span class="line">Plug &apos;iamcco/mathjax-support-for-mkdp&apos;</span><br><span class="line">Plug &apos;vim-scripts/fcitx.vim&apos;</span><br><span class="line">Plug &apos;Shougo/neocomplete.vim&apos;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">autocmd filetype markdown set shell=bash\ -i</span><br><span class="line">let g:instant_markdown_autostart=0</span><br><span class="line">&quot; let g:instant_markdown_slow=1</span><br><span class="line"></span><br><span class="line">let g:vim_markdown_folding_disabled=1</span><br><span class="line"></span><br><span class="line">&quot;Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!</span><br><span class="line">&quot; Disable AutoComplPop.</span><br><span class="line">let g:acp_enableAtStartup = 0</span><br><span class="line">&quot; Use neocomplete.</span><br><span class="line">let g:neocomplete#enable_at_startup = 1</span><br><span class="line">&quot; Use smartcase.</span><br><span class="line">let g:neocomplete#enable_smart_case = 1</span><br><span class="line">&quot; Set minimum syntax keyword length.</span><br><span class="line">let g:neocomplete#sources#syntax#min_keyword_length = 3</span><br><span class="line"></span><br><span class="line">&quot; Define dictionary.</span><br><span class="line">let g:neocomplete#sources#dictionary#dictionaries = &#123;</span><br><span class="line">    \ &apos;default&apos; : &apos;&apos;,</span><br><span class="line">    \ &apos;vimshell&apos; : $HOME.&apos;/.vimshell_hist&apos;,</span><br><span class="line">    \ &apos;scheme&apos; : $HOME.&apos;/.gosh_completions&apos;</span><br><span class="line">        \ &#125;</span><br><span class="line"></span><br><span class="line">&quot; Define keyword.</span><br><span class="line">if !exists(&apos;g:neocomplete#keyword_patterns&apos;)</span><br><span class="line">    let g:neocomplete#keyword_patterns = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">let g:neocomplete#keyword_patterns[&apos;default&apos;] = &apos;\h\w*&apos;</span><br><span class="line"></span><br><span class="line">&quot; Plugin key-mappings.</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-g&gt;     neocomplete#undo_completion()</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-l&gt;     neocomplete#complete_common_string()</span><br><span class="line"></span><br><span class="line">&quot; Recommended key-mappings.</span><br><span class="line">&quot; &lt;CR&gt;: close popup and save indent.</span><br><span class="line">inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;</span><br><span class="line">function! s:my_cr_function()</span><br><span class="line">  return (pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;&quot; ) . &quot;\&lt;CR&gt;&quot;</span><br><span class="line">  &quot; For no inserting &lt;CR&gt; key.</span><br><span class="line">  &quot;return pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;</span><br><span class="line">endfunction</span><br><span class="line">&quot; &lt;TAB&gt;: completion.</span><br><span class="line">inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;TAB&gt;&quot;</span><br><span class="line">&quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-h&gt; neocomplete#smart_close_popup().&quot;\&lt;C-h&gt;&quot;</span><br><span class="line">inoremap &lt;expr&gt;&lt;BS&gt; neocomplete#smart_close_popup().&quot;\&lt;C-h&gt;&quot;</span><br><span class="line">&quot; Close popup by &lt;Space&gt;.</span><br><span class="line">&quot;inoremap &lt;expr&gt;&lt;Space&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;Space&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot; AutoComplPop like behavior.</span><br><span class="line">&quot;let g:neocomplete#enable_auto_select = 1</span><br><span class="line"></span><br><span class="line">&quot; Shell like behavior(not recommended).</span><br><span class="line">&quot;set completeopt+=longest</span><br><span class="line">&quot;let g:neocomplete#enable_auto_select = 1</span><br><span class="line">&quot;let g:neocomplete#disable_auto_complete = 1</span><br><span class="line">&quot;inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\&lt;Down&gt;&quot; : &quot;\&lt;C-x&gt;\&lt;C-u&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot; Enable omni completion.</span><br><span class="line">autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS</span><br><span class="line">autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags</span><br><span class="line">autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS</span><br><span class="line">autocmd FileType python setlocal omnifunc=pythoncomplete#Complete</span><br><span class="line">autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags</span><br><span class="line"></span><br><span class="line">&quot; Enable heavy omni completion.</span><br><span class="line">if !exists(&apos;g:neocomplete#sources#omni#input_patterns&apos;)</span><br><span class="line">  let g:neocomplete#sources#omni#input_patterns = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">&quot;let g:neocomplete#sources#omni#input_patterns.php = &apos;[^. \t]-&gt;\h\w*\|\h\w*::&apos;</span><br><span class="line">&quot;let g:neocomplete#sources#omni#input_patterns.c = &apos;[^.[:digit:] *\t]\%(\.\|-&gt;\)&apos;</span><br><span class="line">&quot;let g:neocomplete#sources#omni#input_patterns.cpp = &apos;[^.[:digit:] *\t]\%(\.\|-&gt;\)\|\h\w*::&apos;</span><br><span class="line"></span><br><span class="line">&quot; For perlomni.vim setting.</span><br><span class="line">&quot; https://github.com/c9s/perlomni.vim</span><br><span class="line">let g:neocomplete#sources#omni#input_patterns.perl = &apos;\h\w*-&gt;\h\w*\|\h\w*::&apos;</span><br></pre></td></tr></table></figure><!--第一部分应该很好懂. 第二部分是为了实现HOME和END，vim里面已经提供了$和^两个命令，但是我感觉还是有一点不顺手，就自己再映射了两个快捷键. 接下来两个function主要是写markdown的数学公式的时候会用到，因为有些地方，数学公式里的反斜杠会先被markdown处理，有的地方则会先被数学公式的引擎处理，这两个function就可以实现在两种写法之间转换. 接下来一部分是vim-plug的配置. 最后一段是neocomplete官方的默认配置.--><p>如果只是要用于OI比赛的话，应该只需要前面的一部分.</p><p>希望很久以后我还能看得懂这份配置文件，懒得没修改一次就重新写一次解释了.</p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2018退役记</title>
      <link href="/2018/09/01/farewelloi/"/>
      <url>/2018/09/01/farewelloi/</url>
      
        <content type="html"><![CDATA[<audio src="https://music.163.com/song/media/outer/url?id=16686624" controls="controls">Your browser does not support the audio element.</audio><p>退役之后一直有点消沉，没有写退役记什么的，最近想了想还是多少放点东西上来.</p><a id="more"></a><p>考挂了的原因有很多，各种意外，和同层次的选手缺少交流等等，或者可以说我觉得自己有进队的实力，但是没有稳进队的实力. </p><p>不过现在再说这些东西意义也没什么意义，丢掉的分不会再回来，我总归还是退役了.</p><p>其实回过头来想想，我也算是比很多人走得远了. 况且，就算我进了队，再多苟半年一年终究是要退役. 所以真的也没什么必要耿耿于怀，只是时不时回想起来，总觉得太过遗憾. 但人生总是要有些不如意的事情，或许十几年过后，再回想起来，这也不过是一件小事.</p><blockquote><p>幻梦终醒，本无不散之筵席，却不悔付此华年.</p><p>这不是开始，也远未结束.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj50题解</title>
      <link href="/2018/08/17/uoj50/"/>
      <url>/2018/08/17/uoj50/</url>
      
        <content type="html"><![CDATA[<p>分治fft是非常明显的做法，不过这样是$\mathcal O(n\log^2n)$的. 把生成函数弄出来之后会发现它是个微分方程，可以有一些神奇的方法来解，具体可以看UR3的题解.</p><a id="more"></a><p>我比较菜所以还是决定写分治+卡常，发现了一个卡常技巧. 对$[l,r)$区间分治的时候，设$m=\left\lfloor\frac{l+r}{2}\right\rfloor$，如果$l\neq0$，就要把$C(z)$，$F(z)$在$[l,m)$的部分，$F(z)$在$[0,r-l)$的部分卷起来，这里fft的长度看似要开到$4(r-l)$，但事实上只需要开到$2(r-l)$，因为超出$2(r-l)$的部分小于$2(r-l)+(m-l)$，这样就算循环到前面去，也会小于$m-l$，而对$[m,r)$的贡献是从$m-l$开始的，所以不影响答案. 而$l=0$的时候fft长度显然也可以只开到$2(r-l)$. 这样一来可以显著减小常数. <del>跑得比网上搜到的倍增还快！</del></p><p>另外以后在我学会倍增解微分方程之前，看到微分方程不会解可以考虑分治.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ele maxn=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> ele MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> ele G=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> ele inv2=(MOD+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele&amp;a,ele b)</span></span>&#123;</span><br><span class="line">a+=b;</span><br><span class="line"><span class="keyword">return</span> a&gt;=MOD?a-=MOD:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ele n,f[maxn],g[maxn],c[maxn],inv[maxn],fac[maxn],ifac[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ele K,ele n,ele *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele f[maxn];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">f[i]=f[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) f[i]+=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;f[i]) swap(y[i],y[f[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;n; p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">ele o=pw(G,(MOD<span class="number">-1</span>)/p/<span class="number">2</span>); o=~K?o:pw(o,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=(p&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ele o1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;i+p; ++j,o1=(ll)o1*o%MOD)&#123;</span><br><span class="line">ele v=(ll)y[j+p]*o1%MOD;</span><br><span class="line">y[j+p]=y[j];</span><br><span class="line">add(y[j],v); add(y[j+p],MOD-v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~K)&#123;</span><br><span class="line">ele invn=pw(n,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) y[i]=(ll)y[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ele l,ele r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">f[l+<span class="number">1</span>]=(ll)g[l]*inv[l+<span class="number">1</span>]%MOD;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> ele t1[maxn],t2[maxn],t3[maxn];</span><br><span class="line">solve(l,mid);</span><br><span class="line"><span class="keyword">if</span> (l)&#123;</span><br><span class="line">ele tmp=(r-l)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t1,c,<span class="keyword">sizeof</span>(ele)*(r-l));</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t2,f+l,<span class="keyword">sizeof</span>(ele)*(mid-l));</span><br><span class="line"><span class="built_in">memset</span>(t3,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t3,f,<span class="keyword">sizeof</span>(ele)*(r-l));</span><br><span class="line">ntt(<span class="number">1</span>,tmp,t1); ntt(<span class="number">1</span>,tmp,t2); ntt(<span class="number">1</span>,tmp,t3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i) t1[i]=(ll)t1[i]*t2[i]%MOD*t3[i]%MOD;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,t1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mid; i&lt;r; ++i) add(g[i],t1[i-l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele tmp=(r-l)&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t1,c,<span class="keyword">sizeof</span>(ele)*(r-l));</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t2,f+l,<span class="keyword">sizeof</span>(ele)*(mid-l));</span><br><span class="line">ntt(<span class="number">1</span>,tmp,t1); ntt(<span class="number">1</span>,tmp,t2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i)&#123;</span><br><span class="line">t1[i]=(ll)t1[i]*t2[i]%MOD*t2[i]%MOD;</span><br><span class="line">t1[i]=(t1[i]&amp;<span class="number">1</span>)?(t1[i]+MOD)&gt;&gt;<span class="number">1</span>:t1[i]&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,t1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mid; i&lt;r; ++i) add(g[i],t1[i-l]);</span><br><span class="line">&#125;</span><br><span class="line">solve(mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;n,s);</span><br><span class="line">ele tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp&lt;n) tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=tmp; ++i) fac[i]=(ll)fac[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">ifac[tmp]=pw(fac[tmp],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=tmp<span class="number">-1</span>; ~i; --i) ifac[i]=(ll)ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=tmp; ++i) inv[i]=(ll)fac[i<span class="number">-1</span>]*ifac[i]%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">c[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">c[i]=c[i]*ifac[i];</span><br><span class="line">&#125;</span><br><span class="line">g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">solve(<span class="number">0</span>,tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)f[i]*fac[i]%MOD);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> uoj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2541题解</title>
      <link href="/2018/07/16/loj2541/"/>
      <url>/2018/07/16/loj2541/</url>
      
        <content type="html"><![CDATA[<p>这种求某个东西在最后一个的概率之类的其实可以考虑容斥，设钦定一个集合$S$在它后面的概率为$f(S)$，那么最后的答案为$\sum (-1)^{|S|}f(S)$.</p><a id="more"></a><p>现在考虑怎么算$f(S)$，一种感性的方法是，你可以认为其他人就没有关系了，那么$f(S)$即为第一个人第一个死的概率，即$\frac{w _1}{w _1+\text{sum}(S)}$.</p><p>要严谨地证明的话，可以改变一下游戏规则：死去的人不把他踢出去，这样不会改变每个人的死亡顺序，记$W=\sum _{i=1}^n w _i$，那么$f(S)=\sum _{i=0}^{+\infty}\left(\frac{W-w _1-\text{sum}(S)}{W}\right)^i\frac{w _1}{W}=\frac{w _1}{w _1+\text{sum}(S)}$.</p><p>于是答案就是$\sum \frac{(-1)^{|S|}}{w _1+\text{sum}(S)}$，注意到$w _i$加起来很小，我们可以统计每个$\text{sum}(S)$的贡献，这个只需要计算$\prod _{i=2}^n(1-z^{w _i})$就可以了.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ele maxn=(<span class="number">1</span>&lt;&lt;<span class="number">18</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele &amp;a,ele b)</span></span>&#123;</span><br><span class="line">a+=b;</span><br><span class="line"><span class="keyword">return</span> a&gt;=MOD?a-=MOD:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ele n,w[maxn],a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ele K,ele n,ele *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele f[maxn];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">f[i]=f[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) f[i]+=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;f[i]) swap(y[i],y[f[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;n; p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">ele o=pw(G,(MOD<span class="number">-1</span>)/p/<span class="number">2</span>); o=~K?o:pw(o,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=(p&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ele o1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;i+p; ++j,o1=(ll)o1*o%MOD)&#123;</span><br><span class="line">ele u=y[j],v=(ll)y[j+p]*o1%MOD;</span><br><span class="line">y[j]=y[j+p]=u;</span><br><span class="line">add(y[j],v); add(y[j+p],MOD-v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~K)&#123;</span><br><span class="line">ele invn=pw(n,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) y[i]=(ll)y[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">solve</span><span class="params">(ele *a,ele l,ele r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[w[l]]=MOD<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;w[l]; ++i) a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> w[l];</span><br><span class="line">&#125;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ele s1=solve(a,l,mid);</span><br><span class="line">ele s2=solve(a+s1+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">ele tmp=<span class="number">1</span>; <span class="keyword">while</span> (tmp&lt;=s1+s2) tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> ele t1[maxn],t2[maxn];</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t1,a,<span class="keyword">sizeof</span>(ele)*(s1+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp); <span class="built_in">memcpy</span>(t2,a+s1+<span class="number">1</span>,<span class="keyword">sizeof</span>(ele)*(s2+<span class="number">1</span>));</span><br><span class="line">ntt(<span class="number">1</span>,tmp,t1); ntt(<span class="number">1</span>,tmp,t2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i) t1[i]=(ll)t1[i]*t2[i]%MOD;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,t1);</span><br><span class="line"><span class="built_in">memcpy</span>(a,t1,<span class="keyword">sizeof</span>(ele)*(s1+s2+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> s1+s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,w+i);</span><br><span class="line"><span class="keyword">if</span> (n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ele s=solve(a,<span class="number">1</span>,n<span class="number">-1</span>);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=s; ++i) add(ans,(ll)w[<span class="number">0</span>]*a[i]%MOD*pw(w[<span class="number">0</span>]+i,MOD<span class="number">-2</span>)%MOD);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj387题解</title>
      <link href="/2018/07/15/uoj387/"/>
      <url>/2018/07/15/uoj387/</url>
      
        <content type="html"><![CDATA[<p>学到了一个新的技巧，树形的依赖关系，把顺序翻转，就可以在依赖父亲和依赖子树之间相互转化.</p><a id="more"></a><p>每次选取最深的能选取的叶子，证明的话，画个图用一下调整法应该能证.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line">ele n,m,ans,f[maxn],dep[maxn],deg[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;ele&gt; res[maxn];</span><br><span class="line">priority_queue&lt;pair&lt;ele,ele&gt; &gt; Q;</span><br><span class="line"><span class="built_in">queue</span>&lt;ele&gt; Q1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">dep[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(deg,<span class="number">0</span>,<span class="keyword">sizeof</span>(deg));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,f+i);</span><br><span class="line">--f[i]; ++deg[f[i]];</span><br><span class="line">dep[i]=dep[f[i]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">if</span> (!deg[i]) Q.push(make_pair(dep[i],i));</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.empty())&#123;</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">while</span> (!Q1.empty())&#123;</span><br><span class="line">ele k=Q1.front(); Q1.pop();</span><br><span class="line">Q.push(make_pair(dep[k],k));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;ele,ele&gt; k1=Q.top(); Q.pop();</span><br><span class="line">ele k=k1.se;</span><br><span class="line"><span class="keyword">if</span> (res[ans].size()==m)&#123;</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">while</span> (!Q1.empty())&#123;</span><br><span class="line">ele k=Q1.front(); Q1.pop();</span><br><span class="line">Q.push(make_pair(dep[k],k));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res[ans].push_back(k);</span><br><span class="line">--deg[f[k]];</span><br><span class="line"><span class="keyword">if</span> (!deg[f[k]]) Q1.push(f[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=ans; ~i; --i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i].size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=res[i].size()<span class="number">-1</span>; ~j; --j) <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> uoj </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2324题解</title>
      <link href="/2018/07/07/bzoj2324/"/>
      <url>/2018/07/07/bzoj2324/</url>
      
        <content type="html"><![CDATA[<p>前置技能：DAG的最小路径覆盖和最小链覆盖.</p><a id="more"></a><p>算了还是写一下吧免得自己忘了.</p><p>最小路径覆盖的做法就是把每个点$i$拆成两个点$i _0,i _1$，边$(i,j)$变成$(i _0,j _1)$，然后做最大匹配，这样每条匹配边相当于原图中一条边，匹配保证了每个点最多有一条入边一条出边，答案就是原图点数-匹配数，因为你可以看成每个点先独立为一条路径，每加入一条边相当于合并两条路径.</p><p>最小链覆盖的话边可以相交，所以需要先用floyd传递闭包，其实就是对于所有点对$(i,j)$求出是否有一条链从$i$到$j$，有的话直接连一条边过去，这样两条链相交的话其中一条就可以直接跳过交点.</p><p>题目可以认为是用$k$条可相交的路径去覆盖这张图，满足一些条件，让边权和最小.</p><p>因为可相交，先考虑来一发传递闭包，因为题目要求，状态要改成$g _{i,j}$表示只经过编号不超过$\max(i,j)$的点，从$i$到$j$的最短路，然后对所有$i\lt j$，以$g _{i,j}$为权值连边.</p><p>这样题目就变成了用$k$条只在$0$号点相交的路径去覆盖这张图，然后就能够按照DAG最小路径覆盖来建图了，需要注意的是，源点连向$0$号点的入点的边容量为$k$，因为这$k$条路径能在$0$处相交即$0$号点出去的边最多可以选$k$条. 边的费用当然就是$g _{i,j}$.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 310</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 20010</span></span><br><span class="line"><span class="keyword">const</span> ele INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">ele v,r,c;</span><br><span class="line">edge *nxt,*rev;</span><br><span class="line">&#125;ep[<span class="number">10000000</span>],*ecnt;</span><br><span class="line">ele n,m,K,g[maxn][maxn],d[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">edge *h[maxn],*cur[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge1</span><span class="params">(ele u,ele v,ele r,ele c)</span></span>&#123;</span><br><span class="line">edge *p=ecnt++;</span><br><span class="line">p-&gt;v=v; p-&gt;r=r; p-&gt;c=c; p-&gt;nxt=h[u]; p-&gt;rev=ep+((ecnt<span class="number">-1</span>-ep)^<span class="number">1</span>);</span><br><span class="line">h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ele u,ele v,ele r,ele c)</span></span>&#123;</span><br><span class="line">addedge1(u,v,r,c); addedge1(v,u,<span class="number">0</span>,-c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(ele s,ele t)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">queue</span>&lt;ele&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*<span class="number">2</span>+<span class="number">4</span>; ++i) d[i]=INF;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">Q.push(s);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty())&#123;</span><br><span class="line">ele k=Q.front(); Q.pop();</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[k]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;r &amp;&amp; d[k]+j-&gt;c&lt;d[j-&gt;v])&#123;</span><br><span class="line">d[j-&gt;v]=d[k]+j-&gt;c;</span><br><span class="line">Q.push(j-&gt;v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[t]&lt;INF;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;ele,ele&gt; dfs(ele i,ele t,ele p)&#123;</span><br><span class="line"><span class="keyword">if</span> (!p || i==t) <span class="keyword">return</span> make_pair(<span class="number">0</span>,p);</span><br><span class="line">ele ans=<span class="number">0</span>,ans1=<span class="number">0</span>;</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (edge*&amp;j=cur[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (!vis[j-&gt;v] &amp;&amp; j-&gt;r &amp;&amp; d[i]+j-&gt;c==d[j-&gt;v])&#123;</span><br><span class="line">pair&lt;ele,ele&gt;tmp =dfs(j-&gt;v,t,min(p,j-&gt;r));</span><br><span class="line"><span class="keyword">if</span> (tmp.se)&#123;</span><br><span class="line">ans+=tmp.fi; ans+=j-&gt;c*tmp.se;</span><br><span class="line">ans1+=tmp.se;</span><br><span class="line">j-&gt;r-=tmp.se; j-&gt;rev-&gt;r+=tmp.se;</span><br><span class="line">p-=tmp.se;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> d[j-&gt;v]=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> make_pair(ans,ans1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">mincost</span><span class="params">(ele s,ele t)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (spfa(s,t))&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memcpy</span>(cur,h,<span class="keyword">sizeof</span>(h));</span><br><span class="line">ans+=dfs(s,t,INF).fi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; ++j) g[i][j]=INF;</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line">ele u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">g[u][v]=g[v][u]=min(g[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=n; ++k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; ++j)</span><br><span class="line"><span class="keyword">if</span> (max(i,j)&gt;=k)</span><br><span class="line">g[i][j]=min(g[i][j],g[i][k]+g[k][j]);</span><br><span class="line">ecnt=ep; <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; ++j) addedge(<span class="number">2</span>+i*<span class="number">2</span>,<span class="number">2</span>+j*<span class="number">2</span>+<span class="number">1</span>,<span class="number">1</span>,g[i][j]);</span><br><span class="line">addedge(<span class="number">0</span>,<span class="number">2</span>,K,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) addedge(<span class="number">0</span>,<span class="number">2</span>+i*<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i) addedge(<span class="number">2</span>+i*<span class="number">2</span>+<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mincost(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> bzoj </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雅礼2018年7月集训总结</title>
      <link href="/2018/07/01/yali201807/"/>
      <url>/2018/07/01/yali201807/</url>
      
        <content type="html"><![CDATA[<p><del>NOI前的垂死挣扎.</del></p><a id="more"></a><h2 id="7-1"><a href="#7-1" class="headerlink" title="7-1"></a>7-1</h2><p>考得还不错的样子，但是还有可以完善的地方.</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>想到了出题人想到的状压dp，然后别人想出来了一个$\mathcal O(n^3)$的dp. 其实我是看到了题目的$n\le 24$就去想状压的，如果数据范围大一点我应该也能想到？</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>被卡常卡成60分了，主要是因为方点的情况我强行把分治FFT的做法搬过来写出了8倍常数. 事实上比赛的时候我已经注意到了方点相当于是没有度数限制的，而用在圆点上的分治FFT本来就是为了处理度数限制的问题，所以完全没有必要照搬，可以直接用一个线性的dp解决方点的情况.</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>写完+检查完前两道题的时候已经过去4h了，写暴力又花了一些时间导致我没什么时间想这道题. 当时我已经想出了$\mathcal O(n^3)$的dp做法，其实再注意到一些细节就可以优化到$\mathcal O(n)$，但是剩下的时间连打完我想到的那个dp都很勉强. 说到底还是我思维比较迟缓，并且码力太过底下，前面debug了太长的时间，还是要多做点题.</p><h2 id="7-2"><a href="#7-2" class="headerlink" title="7-2"></a>7-2</h2><p>区分度极低+极度劝退，rk8后面就是rk29. <del>很荣幸能够挤进前10.</del></p><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>挺不错的一道题，链剖的做法也没有那么容易想到，不过想到了的话打起来非常舒服.</p><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>没怎么卡过空间，各种会分块会主席树但是MLE……</p><p>首先询问区间中有多少种数是经典的难以合并信息的问题，询问一个区间还有分块或者主席树的做法，询问多个区间的话，没什么好的想法，就只能bitset卡一卡了.</p><p>用bitset的话第一个问题是想办法做到$\mathcal O(\frac{nm}{w})$而不是$\mathcal O(\frac{nm\log n}{w})$. 直接ST表的话会MLE. 如果可以离线，就能用莫队把每个询问区间的bitset预处理出来. 其实反正已经用了bitset这么暴力的东西了，不妨维护的时候也暴力一点，把整个区间分成$w$个块，预处理出$w^2$个块对之间的bitset，每个询问区间在整块的基础上加上$\mathcal O(\frac{n}{w})$个数. 这样子空间开不下，可以把预处理$w^2$个块对改为用ST表维护各个块，就能把空间卡进去了.</p><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>差分之后按位置模$k$分类然后计算交错和什么的都很容易想到，关键是判无解非常麻烦，在左右端点需要特殊处理的情况下判无解更加麻烦，反正我在赛场上没想到优美的方法. 标解是利用hash，给每个模$k$的余数分配一个$[0,2^{64})$之间的随机权值，那么计算询问区间中的$1$的位置的异或和再进行判断就可以了. 要注意求多类位置分别的前缀交错和的和写法比较特殊，要让$f _i$表示让最后一个位置的权值为$+1$时的前缀交错和，这样区间中每类位置均出现偶数次的时候，就能拿两个前缀和做个差得到区间交错和了.</p><h2 id="7-3"><a href="#7-3" class="headerlink" title="7-3"></a>7-3</h2><p>似乎基本都听过一遍？</p><h2 id="7-4"><a href="#7-4" class="headerlink" title="7-4"></a>7-4</h2><p>除去std还有11个人ak<del>，我是第12名</del>. 后来可能还重测了几个丢了程序的人.</p><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>我的做法是想象高维空间，一个$n+1$维的基础图形实际上就是由$n$维的在第$n+1$维上平移得到的. 那么平移前后，每一维成分的数量首先是翻了一倍，另外平移前和平移后对应的$j-1$维的成分构成了一个$j$维的成分. 以二维到三维为例，一个正方形向上平移，得到了$8$个点和$8$条边，设平移前正方形为$A$，平移后正方形为$B$，那么$A$和$B$的每对对应点形成一条新的边，每对对应边形成一个新的面. 设$f _{i,j}$为$i$维基础图形中$j$维的个数，即有$f _{i,j}=2f _{i-1,j}+f _{i-1,j-1}$，记$F _i(z)=\sum f _{i,j}z^j$，即有$F _{i+1}(z)=(2+z)F _i(z)$即$F _n(z)=(2+z)^n$，那么$f _{n,m}=2^{n-m}\binom{n}{m}$.</p><h3 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h3><p>跟以前见过的一道dp题比较像. 考虑从小到大决策每个元素，它的贡献依赖于前面的元素的决策，但是这个不方便表示为状态. 假设当前要加入的元素为$i$,可以把前面的元素分成跟$i$加在一起无贡献和有贡献的两部分，有贡献的部分只需要保存两边的数量就可以了，而无贡献的部分随着$i$的增大只会不断减少，所以我们可以先不决策无贡献的部分，当其中的元素变成有贡献的时候再进行决策，到最后都还是无贡献的那一部分放在哪边都不影响答案，所以最后乘一个$2^\textrm{cnt}$即可.</p><h3 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h3><p>居然没想出来真是丢人. 我想到了容斥而且会做$k=0$居然还做不出来，可能是因为我总是想着一步把式子推到位，而没有把一些关键的量记为一个符号来简化思考.</p><p>显然这道题就是要求极长同色子段恰有$n-k$个的方案数，用指数生成函数很容易算出段数不超过$i$的元次$f _i$. 其实这个时候就可以凑容斥系数了. 考虑一个实际有$i$段的方案，它只对$j\ge i$的$f _j$有贡献，且贡献的系数为$\binom{n-i}{j-i}$. 这是因为有$i$段相当于切了$i-1$刀，还有$n-i$个位置可以切，为了被算进$f _j$里面，还需要切$j-i$刀，所以共$\binom{n-i}{j-i}$种切法. 于是我们可以列出式子</p><script type="math/tex; mode=display">\sum _{j=i}^nc _j\binom{n-i}{j-i}=[i=n-k]</script><p>化得好看一些</p><script type="math/tex; mode=display">\sum _{p=0}^{n-i}c _{i+p}\binom{n-i}{p}=[k=n-i]</script><p>右边这个东西如果利用$[n=0]=\sum (-1)^i\binom{n}{i}$来做，反正我不会. 注意到$i\le n-k$（否则不可能有贡献，一般不会去考虑），可以启发我们展开$(z+1-1)^{n-i}$，得到</p><script type="math/tex; mode=display">[z^k] (z+1-1)^{n-i}=\sum 1^p(-1)^{n-i-k-p}\frac{(n-i)!}{k!p!(n-i-k-p)!}</script><p>于是有</p><script type="math/tex; mode=display">c _{i+p}=\frac{(-1)^{n-i-k-p}(n-i-p)!}{k!(n-i-k-p)!}</script><p>也就是$c _j=(-1)^{n-k-j}\binom{n-j}{k}$.</p><p>如果不想凑系数的话，也可以考虑求一个$g _i$表示恰好有$i$段的方案数. 注意到$f _i=\sum _{j\le i}g _j\binom{n-j}{i-j}$，强行反演其实就相当于上面的凑系数，或者你也可以写成$(n-i)!g _i=(n-i)!f _i-\sum _{j\lt i}(n-j)!g _j\cdot\frac{1}{(i-j)!}$，用多项式求逆的套路让$F(z)=\sum(n-i)!f _iz^i,G(z)=\sum(n-i)!g _iz^i$，就有$G(z)=F(z)-(e^z-1)G(z)$，即$G(z)=F(z)e^{-z}$.</p><p>感觉这是一道挺不错的计数题，这里面包含的几个新套路，一个是展开$(z+1-1)^{n-i}$，一个是$\binom{n-i}{j-i}$这个系数，都要记下来.</p><h2 id="7-5"><a href="#7-5" class="headerlink" title="7-5"></a>7-5</h2><h3 id="T1-3"><a href="#T1-3" class="headerlink" title="T1"></a>T1</h3><p>题目保证给定的点都在凸包上，所以询问区间中的点一定都在这些点的凸包上，也就是说只需要计算$\sum _{i=0}^{L-1}P _i\times P _{i+1}(P _L=P _0)$，其中$L$为询问区间的长度$P _0,P _1,\ldots,P _{L-1}$为询问区间中的点按照极角排序之后的结果.</p><p>那么$\mathcal O(n\sqrt{n}\log n)$的莫队就是显然的了. 想办法继续优化，注意到插入是$\mathcal O(\log n)$的，但删除可以做到$\mathcal O(1)$，可以用删除的撤销来代替插入. 具体来讲，把询问排序的时候，右端点从小到大改为从大到小，设当前询问区间的左端点所在块的左端点为$l _0$，维护$[l _0,n)$的凸包，每次询问的时候移动端点就只需要删除了，询问结束后恢复左端点. 如果左端点所在的块变化了，就恢复右端点，然后把左边的块删掉（此次不用恢复）. 只有插入的莫队思路略有不同，挺好想的就不讲了.</p><p>只有插入或者只有删除的莫队算是个以前没见过的技巧吧，要记下来.</p><h3 id="T2-3"><a href="#T2-3" class="headerlink" title="T2"></a>T2</h3><p>可以用各种方法花式AC，稍微记录一下感觉比较有意思的.</p><p>这一个是我用的方法，答案保证严格大于$\frac{n}{2}$，所以中位数一定在答案里面，第一次输入把所有的数按照高$16$位分类，那么答案只可能在最中间的三类里面，第二次输入的时候把中间三类的数的低$16$位存在$3$个桶里，然后暴力就可以了. </p><p>另外有一个挺有意思的随机化的做法，因为答案超过一般，随机选择$20$个位置，那么有很大概率至少选到了一个在答案里面的数，第二次读入的时候分别钦定这$20$个数在答案里，分别算出答案取最优.</p><h3 id="T3-3"><a href="#T3-3" class="headerlink" title="T3"></a>T3</h3><p>这个题的构造也不知道是怎么想出来的，非构造解法晚点再研究吧.</p><p>从$m=2$入手，定义$g _0=g _1=g _2=1,g _n=g _{n-1}+g _{n-2}(n\ge 3)$，那么<del>神仙</del>具有敏锐洞察力的选手就可以观察到如果$g _n=\sum _{i=1}^kg _{a _i}$，这里$a _1\gt a _2\gt\cdots\gt a _k\ge 2$（容易证明一定有这样的一个划分），那么$f(n)=\sum _{i=1}^kg _{a _i-1}$.</p><p>为什么是这样呢？首先把题目里面的式子移项，得到$f(n)+f _m(n-1)=n$，又有</p><script type="math/tex; mode=display">\begin{aligned}n&=\sum _{i=1}^kg _{a _i}\\\\f(n)&=\sum _{i=1}^kg _{a _i-1}\\\\f _2(n)&=\sum _{i=1}^kg _{a _i-2}\end{aligned}</script><p>后面两个式子加起来跟前一个比较，发现如果是$f(n)+f _m(n)=n$，似乎就有$g _n=g _{n-1}+g _{n-2}$了. 但是这里是$n-1$.</p><p>注意到$n-1$的分拆里面，前$k-1$个数跟$n$的分拆肯定是一样的，因而前$k-1$项仍满足上式，我们讨论$g _{a _k}$.</p><ul><li><p>$g _{a _k}=1$，此时$n-1$的分拆没有最后一项，因为$1=1+0$，最后一项仍满足上式.</p></li><li><p>$g _{a _k}&gt;1$，此时相当于$f _2(n-1)$的分拆最后一项变成了$f _2(g _{a _k}-1)$的分拆形式，由题目我们知道它等于$g _{a _k}-f(g _{a _k})=g _{a _k}-g _{a _k-1}=g _{a _k-2}$，即最后一项仍满足上式.</p></li></ul><p>规定$g _0=1$而不是$g _0=0$是因为要考虑$f(1)$.</p><p>对于一般的情况，定义$g _0=g _1=\cdots=g _m=1,g _n=g _{n-1}+g _{n-m}(n\gt m)$即可.</p><p>其实这个时候你会发现如果那一项是$f _m(n)$的话反而可能会出一些问题.</p><h2 id="7-7"><a href="#7-7" class="headerlink" title="7-7"></a>7-7</h2><p>网络流题好像有一个比较常见的思路是，当每个东西有多个决策的时候，先全部假定一下，然后再用网络流去调整.</p><h2 id="7-8"><a href="#7-8" class="headerlink" title="7-8"></a>7-8</h2><p>挂了挂了……</p><h3 id="T1-4"><a href="#T1-4" class="headerlink" title="T1"></a>T1</h3><p>最小树形图的朱刘算法.</p><p>也不知道出题人是怎么想的……</p><h3 id="T2-4"><a href="#T2-4" class="headerlink" title="T2"></a>T2</h3><p>我的做法似乎比std更nb一些？反正std4k跑5s，我的代码2.4k跑0.5s.</p><p>定义每个软件包开始安装的时间为$S _i$，实际安装花费的时间为$a _i$，最后答案为$T$. 那么首先有$\forall(i,j)\in E,S _j-S _i\ge a _i$. 总花费不超过$w$，可以表示成$\sum c _i(t _i-a _i)\le w$. 由题显然有$0\le a _i\le t _i$. 最后答案其实相当于是对$S _i+a _i$取$\max$，可以加入$n$个约束$T\ge S _i+a _i$，然后就是要在满足上面所有这些约束的前提下最小化$T$，直接上单纯形就可以了.</p><p>考试的时候我想到了基本相同的思路，但是没有往线性规划的方向去想，强行建了一个点数极多的图，还不知道哪里写错了一点东西，最后没拿到分. 其实网络流和线性规划很多地方是有联系的，以后想网络流建图类的问题时，不妨结合线性规划一起想，毕竟有的时候网络流更简单一些，有的时候线性规划更简单一些.</p><p>出题人列出的线性规划式子要考虑每一条路径，所以约束个数可能达到指数级，要先对偶再转化成网络流来做. 我列出的式子和出题人不太一样，只有$\mathcal O(n)$个变量，$O(n+m)$个约束，直接跑单纯形就非常快了.</p><p>不过现在还遗留了一个小问题，无论是我的做法还是出题人的做法，似乎都不能保证减少之后的安装时间是整数. 我想了一想，觉得好像可以证明至多只有一个$a _i$不是整数，所以最后只需要把答案向上取整就可以了，当然有单纯形的话需要考虑一下精度问题，先减去一个eps再向上取整. 出题人的做法要二分答案，所以只需要把二分的精度限制在整数就可以了.</p><h3 id="T3-4"><a href="#T3-4" class="headerlink" title="T3"></a>T3</h3><p>毒瘤！</p><h2 id="7-9"><a href="#7-9" class="headerlink" title="7-9"></a>7-9</h2><p>今天的题目是上交的，长得根本不像NOI模拟赛……</p><p>题目比较水，而我第二题被卡常卡掉了52分，最后只能排rk29.</p><h3 id="T1-5"><a href="#T1-5" class="headerlink" title="T1"></a>T1</h3><p>水题.</p><p>不过倒是学到了一个东西：线性预处理$1,2,\ldots,n$逆元的<code>(MOD-MOD/i)*inv[MOD%i]</code>的做法虽然看上去很炫酷，但是里面用了除法，实际上常数很大，需要卡常的时候得注意一下.</p><h3 id="T2-5"><a href="#T2-5" class="headerlink" title="T2"></a>T2</h3><p>第一反应是世界树那道题，我以前因为太难码放弃了，这回在考场上硬生生码了200+行代码写了出来，可是A掉了bzoj的世界树那题，模拟赛里面的这道题却被卡常卡成48分了.</p><p>事实上这道题是世界树那道题的简化版，有一个常数<del>应该</del>更小的做法. 这道题目只需要询问$a _1$占领了哪些点，所以可以对每个$j\in[2,k]$，求出$a _1$与$a _j$的中点$m _j$，那么$m _j$靠$a _j$的那一边肯定不会被$a _1$占领，这对应着树上的一棵子树或除了一棵子树以外的其它部分，而对每个$a _j$去掉那些部分之后，剩下的就是$a _1$可以占领的点了. 这样只需要用一棵线段树在dfs序上做区间修改，应该比虚树的做法好写很多.</p><h3 id="T3-5"><a href="#T3-5" class="headerlink" title="T3"></a>T3</h3><blockquote><p>题目：为了锻炼你的水平，建议使用在线算法.</p><p>我：我没有水平，我离线！</p></blockquote><p>于是我就写了一个按时间分治水了过去. <del>其实码力低下的我还是因为一个弱智的bug耽搁了很久.</del></p><p>考虑在线算法，如果只在一段加和删，那显然可以直接做背包，删除可以看做是插入的撤销，直接再插入的时候做一个之前时刻的备份就可以了. 如果在两端加和删，可以在两端分别用一个背包来维护，每次查询相当于是要把两个背包合并起来，直接合并是$\mathcal O(\text{MOD}^2)$的，但是因为只需要合并两个背包而不是多个，也只需要求合并后一段区间里面的最值，而不是背包的完整信息，可以枚举其中一个背包中的值，然后在另一个背包里做区间查询，复杂度降到$\mathcal O(\text{MOD}\log\text{MOD})$.</p><p>加入删除之后会出现一个问题，就是一边背包被删空了会开始删另一个背包的另一端. 一个显然的思路是暴力把另一个背包栈的开口反向，但这样的话如果左边删一个右边删一个循环的话复杂度就不对了. 解决方法也很简单，这种时候把另一个背包的一半元素分离出来，反向，另一半保持不变，均摊分析一下会发现复杂度是$\mathcal O(\text{MOD}\log m)$的.</p><p>最后，这个在线算法的复杂度为$\mathcal O(m\text{MOD}(\log\text{MOD}+\log m))$.</p><h2 id="7-10"><a href="#7-10" class="headerlink" title="7-10"></a>7-10</h2><p>本来应该200分rk3的……一定要吸取教训. 我T2打了一个$\mathcal O(m\sqrt{L}\log L)$的做法，本来可以拿90分，但是数组开得比较大MLE了，但事实上是跑不满的，这也就导致用任务管理器之类的东西看内存消耗看的也远小于开的数组的大小. 可是很多评测软件看的是你开了多少而不是用了多少，所以以后还是尽量要手算空间，如果觉得跑不满又开不下，还是用vector或者别的一些方法动态开空间吧. 这个一定要记住，今天这种情况真的非常可惜.</p><h3 id="T2-6"><a href="#T2-6" class="headerlink" title="T2"></a>T2</h3><p>这种题对于$\gt\sqrt{L}$的情况要善于勇敢地暴力，做这道题的时候我考虑$\gt\sqrt{L}$的情况考虑了很久，最后发现单独处理这些串的时候，每个串就算是暴力枚举前缀，暴力与前面的比对，复杂度都是对的.</p><p>还是写一下做法吧怕自己忘了. 记$L=\sum|s _i|$，对于每个询问考虑$|S|\le\sqrt{L}$和$|S|\gt\sqrt{L}$两种情况. </p><p>对于第一种情况，各种套路想一遍发现按右端点排序来做的套路比较靠谱，设$f _{i,j}$代表以$i$为右端点，要使得存在长度为$j$的前缀有贡献，左端点最右的位置，这个可以根据$f _{i-1,j}$和$i$这个串长度为$j$的前缀的贡献来计算. 要计算后者，可以把所有串长度不超过$\sqrt{L}$的前缀取出来，记录一个$\text{pos} _s$表示以$s$为前缀的串的位置列表，然后在上面查就可以了. 事实上因为$f$可以存下来，这一步不需要离线.</p><p>对于第二种情况，有贡献的串至多$\sqrt{L}$个，把询问按照包含这些串的区间分类，离线下来，记第$i$个询问包含这些串的区间是$[u _i,v _i]$. 以$u$为第一关键字，$v$为第二关键字排序，这样固定$u$之后$v$增大就相当于在后面暴力加串. 加串的话，可以暴力枚举前缀，然后暴力扫一遍前面的串来统计这个前缀的出现次数，判断它有没有贡献（要事先预处理长度$\gt\sqrt{L}$的串两两之间的lcp，这个也可以暴力预处理）. 这样加串的总复杂度不超过$\sum\sqrt{L}|S|=L\sqrt{L}$，同样暴力预处理lcp的复杂度也不超过这个.</p><p>按照以上的方法就可以求出有贡献的长度的集合，要统计答案，支持加一个长度和删一个长度，随便用个数据结构就可以维护了.</p><p>但这样是$\mathcal O(m\sqrt{L}\log L)$的，跑最后一个点很悬. 如果要继续优化的话，注意到只有插入会带$\log$，删除不会，使用熟悉的套路，把插入看成删除的撤销即可. 具体来讲，$\le\sqrt{L}$的部分全程删除和全程插入是一样的，因为原来算法是把有贡献的插入，改成一开始全部插入好，利用$f$数组找出没贡献的删掉就行了，最后再恢复成删掉之前的样子来处理下一个询问. 至于$\gt\sqrt{L}$的部分，改成$u$从小到大，$v$从大到小，就变成全程都是删除了.</p><p>再讲讲我不优化算法是怎么卡常卡进去的. 首先维护的数据结构不要用set或者线段树这么大常数的东西，用zkw，顺手把删除写成$\mathcal O(1)$的，再加个读入优化，这个时候已经从12s优化到4.9s了，放到lemon上面跑的时候因为玄学原因变快了一些就过了.</p><h3 id="T3-6"><a href="#T3-6" class="headerlink" title="T3"></a>T3</h3><p>先坑着.</p><h2 id="7-12"><a href="#7-12" class="headerlink" title="7-12"></a>7-12</h2><p>居然rk1了？</p><h3 id="T1-6"><a href="#T1-6" class="headerlink" title="T1"></a>T1</h3><p>先坑着.</p><h3 id="T2-7"><a href="#T2-7" class="headerlink" title="T2"></a>T2</h3><p>首先一个很显然的思路是链上修改单点查询转化为单点修改子树查询，然后就可以做树上的启发式合并，来得到每个点对应的trie了. 事实上trie的合并可以像线段树合并那样做，就可以少一个$\log$. 求期望的路径长度的话，每个点记一个$f _i$表示从$i$出发的期望步数，它的转移跟父亲有关，有一个经典的技巧是把$f _i$表示成$a _i+b _if _{\text{fa} _i}$的形式，这样就可以不用高斯消元，第一遍dfs先把$a,b$求出来，第二遍dfs把$f$求出来. 不过此题要算的是所有$f$的和，而且还要动态维护，所以再记一个$s _i$表示以$i$为根的子树的$f$的和，发现$s _i$也可以表示为$c _i+d _if _{\text{fa} _i}$的形式. $a,b,c,d$都可以很方便地在trie上动态维护，这样就能快速地求出答案了.</p><p>评测的时候最后两个点好像爆栈了？但是noi应该会开无限栈的吧.</p><h3 id="T3-7"><a href="#T3-7" class="headerlink" title="T3"></a>T3</h3><p>一开始的时候觉得多项式开根常数太大了，就写了个分治来求$f$，结果$b _i\le 10^5$的点跑了6.7s. 麦老大说开根常数再大也不会比$\mathcal O(n\log^2n)$的分治慢. 膜拜10min打完多项式板子的dalao……</p><p>假设我们已经把$f _i$求出来了，考虑一个简单一点的问题，已经知道$x,x^2,x^3,\ldots,x^n$，怎么求出$x^{n+1}$. 这个显然用脚都能求出来. 但是现在它是一堆东西加起来，所以应该使用线性的方法，换句话说可以考虑把$x^{n+1}$表示成$x,x^2,x^3,\ldots,x^n$的线性组合. 回忆一下在哪里干过类似的事，可以联想到求常系数线性递推的时候，把$M^n$表示成$I,M,M^2,\ldots,M^{n-1}$的线性组合. 当时是利用了$M$的化零多项式，容易想到现在也要构造一个多项式$p(t)$使得$f _{b _1},f _{b _2},\ldots,f _{b _n}$是它的根，显然$p(t)=\prod(t-f _{b _i})$，这个用分治fft来求就可以了.</p><p>下面考虑一下如何更高效地求出$f _i$. 我们知道$f _i$的生成函数$F(z)=\frac{1-\sqrt{1-4z^2-16z^3-16z^4}}{2z(1+2z)}$，这是一个多项式开根的经典题目，但是这里它有一个特殊性质，就是这些式子的次数都很低，不妨把它写成$\frac{A(z)-\sqrt{C(z)}}{B(z)}$的形式，先考虑怎么算$D(z)/B(z)=X(z)$，移项得到$B(z)X(z)=D(z)$，代入$B(z)=2z(1+2z)$，比较$z^n$的系数，得到$d _n=2x _{n-1}+4x _{n-2}$，即$x _n=\frac{d _{n+1}-4x _{n-1}}{2}$，这样就可以线性递推了. 接下来考虑怎么计算$\sqrt{C(z)}=Y(z)$，求导得到$Y^\prime(z)=\frac{C^\prime(z)Y(z)}{2C(z)}$，即$2C(z)Y^\prime(z)=C^\prime(z)Y(z)$. 代入再比较$z^n$的系数，得到$2((n+1)h _{n+1}-4(n-1)h _{n-1}-16(n-2)h _{n-2}-16(n-3)h _{n-3})=-8h _{n-1}-48h _{n-2}-64h _{n-3}$，把下标平移一下再化简，得到$nh _n=(4n-12)h _{n-2}+(16n-72)h _{n-3}+(16n-96)h _{n-4}$. 这样就可以线性递推了.</p><p>感觉有的时候求个导可以得到一些奇奇怪怪的但是有用的东西.</p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2305题解</title>
      <link href="/2018/06/27/loj2305/"/>
      <url>/2018/06/27/loj2305/</url>
      
        <content type="html"><![CDATA[<p>又写了一遍，tarjan真的容易写错……</p><a id="more"></a><p>如果没有x类型显然就是2SAT，如果有的话一个很自然的想法就是枚举它是A，B还是C. 但是注意到我们在做2SAT，只要把可能的情况限制在2种以内就可以了. 所以对于x类型的地图，可以枚举它不是A和它不是B两种情况（不需要枚举不是C，因为这肯定包含在前两种情况里面）.</p><p>错误的tarjan：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">dfn[i]=low[i]=tcnt++;</span><br><span class="line">instack[i]=<span class="literal">true</span>;</span><br><span class="line">stk[top++]=i;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (!~dfn[j-&gt;v])&#123;</span><br><span class="line">tarjan(j-&gt;v);</span><br><span class="line">low[i]=min(low[i],low[j-&gt;v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instack[j-&gt;v]) low[i]=min(low[i],dfn[j-&gt;v]);</span><br><span class="line"><span class="keyword">if</span> (low[i]==dfn[i])&#123;</span><br><span class="line"><span class="keyword">bool</span> r=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=top<span class="number">-1</span>; ; --j)&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[stk[j]] || ans[stk[j]^<span class="number">1</span>]) r=r &amp;&amp; ans[stk[j]];</span><br><span class="line"><span class="keyword">if</span> (stk[j]==i) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]]=r;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]^<span class="number">1</span>]=r^<span class="number">1</span>;</span><br><span class="line">blg[stk[top<span class="number">-1</span>]]=bcnt;</span><br><span class="line">--top;</span><br><span class="line">&#125;<span class="keyword">while</span> (stk[top]!=i);</span><br><span class="line">++bcnt;</span><br><span class="line">&#125;</span><br><span class="line">instack[stk[top<span class="number">-1</span>]]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正确的tarjan：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">dfn[i]=low[i]=tcnt++;</span><br><span class="line">instack[i]=<span class="literal">true</span>;</span><br><span class="line">stk[top++]=i;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (!~dfn[j-&gt;v])&#123;</span><br><span class="line">tarjan(j-&gt;v);</span><br><span class="line">low[i]=min(low[i],low[j-&gt;v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instack[j-&gt;v]) low[i]=min(low[i],dfn[j-&gt;v]);</span><br><span class="line"><span class="keyword">if</span> (low[i]==dfn[i])&#123;</span><br><span class="line"><span class="keyword">bool</span> r=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=top<span class="number">-1</span>; ; --j)&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[stk[j]] || ans[stk[j]^<span class="number">1</span>]) r=r &amp;&amp; ans[stk[j]];</span><br><span class="line"><span class="keyword">if</span> (stk[j]==i) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]]=r;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]^<span class="number">1</span>]=r^<span class="number">1</span>;</span><br><span class="line">blg[stk[top<span class="number">-1</span>]]=bcnt;</span><br><span class="line">instack[stk[top<span class="number">-1</span>]]=<span class="literal">false</span>;</span><br><span class="line">--top;</span><br><span class="line">&#125;<span class="keyword">while</span> (stk[top]!=i);</span><br><span class="line">++bcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tarjan一定要注意栈的问题，目前发现的易错点一个是忘了弹栈（写圆方树的时候，如果是一条树边，需要弹栈），一个是在错误的地方弹栈（在有向图的dfs树里会有横叉边，instack里面 <strong>不能</strong> 只保存当前点到根路径上的点，参考上面的代码）.</p><p>完整的AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rl</span>&#123;</span></span><br><span class="line">ele i,hi,j,hj;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">ele v;</span><br><span class="line">edge *nxt;</span><br><span class="line">&#125;ep[maxm],*ecnt;</span><br><span class="line">ele n,d,m,tcnt,bcnt,top,stk[maxn],b[maxn],dfn[maxn],low[maxn],blg[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag,ans[maxn],instack[maxn];</span><br><span class="line">edge *h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ele u,ele v)</span></span>&#123;</span><br><span class="line">edge *p=ecnt++;</span><br><span class="line">p-&gt;v=v; p-&gt;nxt=h[u];</span><br><span class="line">h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">idx</span><span class="params">(ele i,ele j)</span></span>&#123;</span><br><span class="line">j=(j-b[i]+<span class="number">2</span>)%<span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> i&lt;&lt;<span class="number">1</span>|j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">dfn[i]=low[i]=tcnt++;</span><br><span class="line">instack[i]=<span class="literal">true</span>;</span><br><span class="line">stk[top++]=i;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (!~dfn[j-&gt;v])&#123;</span><br><span class="line">tarjan(j-&gt;v);</span><br><span class="line">low[i]=min(low[i],low[j-&gt;v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instack[j-&gt;v]) low[i]=min(low[i],dfn[j-&gt;v]);</span><br><span class="line"><span class="keyword">if</span> (low[i]==dfn[i])&#123;</span><br><span class="line"><span class="keyword">bool</span> r=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=top<span class="number">-1</span>; ; --j)&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[stk[j]] || ans[stk[j]^<span class="number">1</span>]) r=r &amp;&amp; ans[stk[j]];</span><br><span class="line"><span class="keyword">if</span> (stk[j]==i) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]]=r;</span><br><span class="line">ans[stk[top<span class="number">-1</span>]^<span class="number">1</span>]=r^<span class="number">1</span>;</span><br><span class="line">blg[stk[top<span class="number">-1</span>]]=bcnt;</span><br><span class="line">instack[stk[top<span class="number">-1</span>]]=<span class="literal">false</span>;</span><br><span class="line">--top;</span><br><span class="line">&#125;<span class="keyword">while</span> (stk[top]!=i);</span><br><span class="line">++bcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (i==n)&#123;</span><br><span class="line">ecnt=ep; <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j].hi==b[a[j].i]) <span class="keyword">continue</span>;</span><br><span class="line">ele u=idx(a[j].i,a[j].hi);</span><br><span class="line"><span class="keyword">if</span> (a[j].hj==b[a[j].j]) addedge(u,u^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele v=idx(a[j].j,a[j].hj);</span><br><span class="line">addedge(u,v);</span><br><span class="line">addedge(v^<span class="number">1</span>,u^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dfn)); tcnt=bcnt=top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(n&lt;&lt;<span class="number">1</span>); ++j)</span><br><span class="line"><span class="keyword">if</span> (!~dfn[j]) tarjan(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line"><span class="keyword">if</span> (blg[j&lt;&lt;<span class="number">1</span>]==blg[j&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)&#123;</span><br><span class="line">ele u=(b[j]+<span class="number">1</span>+ans[j&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%<span class="number">3</span>;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'A'</span>+u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[i]!=<span class="string">'x'</span>)&#123;</span><br><span class="line">b[i]=s[i]-<span class="string">'a'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">b[i]=<span class="number">1</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%s%d"</span>,&amp;n,&amp;d,s,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)&#123;</span><br><span class="line">ele _a,c; <span class="keyword">char</span> b[<span class="number">5</span>],d[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s%d%s"</span>,&amp;_a,b,&amp;c,d);</span><br><span class="line">a[i]=(rl)&#123;_a<span class="number">-1</span>,b[<span class="number">0</span>]-<span class="string">'A'</span>,c<span class="number">-1</span>,d[<span class="number">0</span>]-<span class="string">'A'</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="literal">false</span>; <span class="built_in">memset</span>(instack,<span class="number">0</span>,<span class="keyword">sizeof</span>(instack));</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!flag) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 2SAT </tag>
            
            <tag> tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6189题解</title>
      <link href="/2018/06/27/loj6189/"/>
      <url>/2018/06/27/loj6189/</url>
      
        <content type="html"><![CDATA[<p>要知道某个数的最高位，其实就是要知道它对数的小数部分，于是可以想到维护对数的和.</p><a id="more"></a><p>因为要给区间排序，容易想到线段树合并的做法，不过这里还要进行区间查询而非单点查询，理论上外面还需要套一个平衡树之类的东西，但这样就非常难写了.</p><p>注意到线段树合并的做法本来外面套着一个类似ODT的东西，而这道题的排序操作正好就相当于是区间覆盖，所以外面可以套ODT而不是平衡树，就非常好写了.</p><p>如果直接就这么交上去，你会发现前面有几个点T掉了，再仔细读一遍题，发现</p><blockquote><p>对于$20\%$的数据：没有操作1</p></blockquote><p>还需要对这20分专门写个暴力.</p><p>这种题精度很成问题，本来应该有spj，然后规定跟std输出不同的数不超过若干个就算A，可是这题没spj，那就得要跟出题人心灵相通了.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 500000</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">struct</span> <span class="title">mempool</span>&#123;</span></span><br><span class="line">T *s,*t;</span><br><span class="line">mempool()&#123; s=t=<span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T* <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; (t=(s=<span class="keyword">new</span> T[K])+K),s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ele s;</span><br><span class="line">db s1;</span><br><span class="line">node *l,*r;</span><br><span class="line">node()&#123; s=<span class="number">0</span>; s1=<span class="number">0</span>; l=r=<span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ele n,m,a[maxn],tg[maxn];</span><br><span class="line">db s1,s[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;ele&gt; S;</span><br><span class="line">node *T[maxn];</span><br><span class="line">mempool&lt;node&gt; np;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(node *x)</span></span>&#123;</span><br><span class="line">x-&gt;s=<span class="number">0</span>; x-&gt;s1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x-&gt;l) x-&gt;s+=x-&gt;l-&gt;s,x-&gt;s1+=x-&gt;l-&gt;s1;</span><br><span class="line"><span class="keyword">if</span> (x-&gt;r) x-&gt;s+=x-&gt;r-&gt;s,x-&gt;s1+=x-&gt;r-&gt;s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">upd</span><span class="params">(node *x,ele u,ele v,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) x=np.alloc();</span><br><span class="line">x-&gt;s=<span class="number">1</span>; x-&gt;s1=<span class="built_in">log10</span>(i);</span><br><span class="line"><span class="keyword">if</span> (u!=v)&#123;</span><br><span class="line">ele mid=(u+v)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;=mid) x-&gt;l=upd(x-&gt;l,u,mid,i);</span><br><span class="line"><span class="keyword">else</span> x-&gt;r=upd(x-&gt;r,mid+<span class="number">1</span>,v,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">merge</span><span class="params">(node *a,node *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">a-&gt;s+=b-&gt;s; a-&gt;s1+=b-&gt;s1;</span><br><span class="line">a-&gt;l=merge(a-&gt;l,b-&gt;l);</span><br><span class="line">a-&gt;r=merge(a-&gt;r,b-&gt;r);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *x,ele k,ele u,ele v,node*&amp;a,node*&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)&#123; a=b=<span class="literal">NULL</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">node *p=np.alloc();</span><br><span class="line"><span class="keyword">if</span> (!x-&gt;l &amp;&amp; !x-&gt;r)&#123;</span><br><span class="line">p-&gt;s=x-&gt;s-k; x-&gt;s=k;</span><br><span class="line">p-&gt;s1=<span class="built_in">log10</span>(u)*p-&gt;s; x-&gt;s1=<span class="built_in">log10</span>(u)*x-&gt;s;</span><br><span class="line">a=x; b=p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ele s=x-&gt;l?x-&gt;l-&gt;s:<span class="number">0</span>,mid=(u+v)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k&lt;s)&#123;</span><br><span class="line">split(x-&gt;l,k,u,mid,a,b);</span><br><span class="line">p-&gt;l=a; maintain(p);</span><br><span class="line">x-&gt;l=b; maintain(x);</span><br><span class="line">a=p; b=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">split(x-&gt;r,k-s,mid+<span class="number">1</span>,v,a,b);</span><br><span class="line">x-&gt;r=a; maintain(x);</span><br><span class="line">p-&gt;r=b; maintain(p);</span><br><span class="line">a=x; b=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.find(i)!=S.end()) <span class="keyword">return</span>;</span><br><span class="line">S.insert(i);</span><br><span class="line"><span class="keyword">auto</span> it=S.find(i),it1=it,it2=it; --it1; ++it2;</span><br><span class="line">tg[*it]=tg[*it1];</span><br><span class="line"><span class="keyword">if</span> (tg[*it1]) split(T[*it1],*it-*it1,<span class="number">1</span>,n,T[*it1],T[*it]);</span><br><span class="line"><span class="keyword">else</span> split(T[*it1],*it2-*it,<span class="number">1</span>,n,T[*it],T[*it1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">S.insert(i);</span><br><span class="line">T[i]=upd(<span class="literal">NULL</span>,<span class="number">1</span>,n,a[i]);</span><br><span class="line">tg[i]=<span class="number">1</span>;</span><br><span class="line">s[i]=<span class="built_in">log10</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i) s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">s1=<span class="number">0</span>;</span><br><span class="line">S.insert(n);</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line">ele op,l,r,f;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;l,&amp;r); --l,--r;</span><br><span class="line">split(l); split(r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f);</span><br><span class="line">node *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it=S.find(l); *it&lt;=r;)&#123;</span><br><span class="line">p=merge(p,T[*it]);</span><br><span class="line">S.erase(it++);</span><br><span class="line">&#125;</span><br><span class="line">S.insert(l);</span><br><span class="line">T[l]=p; tg[l]=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">db tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) tmp=s[r]-s[l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it=S.find(l); *it&lt;=r; ++it)</span><br><span class="line">tmp+=T[*it]-&gt;s1;</span><br><span class="line">tmp=tmp-trunc(tmp);</span><br><span class="line">ele ans=<span class="built_in">exp</span>(<span class="built_in">log</span>(<span class="number">10</span>)*tmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 线段树合并 </tag>
            
            <tag> ODT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2664题解</title>
      <link href="/2018/06/26/loj2664/"/>
      <url>/2018/06/26/loj2664/</url>
      
        <content type="html"><![CDATA[<p>把所有向量组合成一个$n\times d$的矩阵$A$，那么问题其实就是判断$AA^T=B$除了对角线上是否存在$0$（模$k$意义下）.</p><a id="more"></a><p>先忽略对角线这个问题，判断$B$中是否存在$0$，如果$k=2$，其实就是要判断$B$是否为全$1$矩阵. 判断是否相等有一个套路，就是随机一个$1\times n$的向量$X$，判断$XAA^T$是否等于$XB$，这样时间复杂度降至$\mathcal O(nd)$. 如果判断发现相等，错误率为$\frac{1}{2}$，重复若干次即可让错误率足够小.</p><p>下面考虑$k=3$的情况. 如果$B$中不存在$0$，$B$中的元素仍可能为$1$或$2$. 定义$C _{i,j}=B _{i,j}^2$，那么如果$B$中不存在$0$，则$C$为全$1$矩阵，关键是表示出这个$C$. 注意到</p><script type="math/tex; mode=display">\left(\sum _{i=1}^da _ib _i\right)^2=\sum _{i=1}^d\sum _{j=1}^da _ia _jb _ib _j</script><p>于是把输入的$d$维向量都变成$d^2$维的向量，就可以处理$k=3$的情况了.</p><p>接下来处理对角线. 注意到我们可以直接在$\mathcal O(nd)$的时间内把对角线计算出来，那么$XB$考虑对角线之后的值也可以高效算得.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxd 110</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ele size=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> buf[size],*s=buf,*t=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; (t=(s=buf)+fread(buf,<span class="number">1</span>,size,<span class="built_in">stdin</span>)),s==t?EOF:*s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">gi</span>(<span class="title">I</span>&amp;<span class="title">a</span>)&#123;</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>);</span><br><span class="line">a=c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>) a=(a&lt;&lt;<span class="number">3</span>)+(a&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> io::gi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ele mul[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">ele n,d,d1,k,a[maxn][maxd],b[maxn],c[<span class="number">10000</span>],dg[maxn],dst[maxn],p[<span class="number">10000</span>],q[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">A</span><span class="params">(ele i,ele j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k==<span class="number">2</span>?a[i][j]:mul[a[i][p[j]]][a[i][q[j]]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele&amp;a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b&gt;=k?((a+=b)-=k):(a+=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">gi(n); gi(d); gi(k); d1=k==<span class="number">2</span>?d:d*d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d; ++j) gi(a[i][j]),a[i][j]%=k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d; ++j) p[i*d+j]=i,q[i*d+j]=j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">dg[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d1; ++j) add(dg[i],A(i,j));</span><br><span class="line">&#125;</span><br><span class="line">ele K=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (K--)&#123;</span><br><span class="line">ele s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">b[i]=rand()%k;</span><br><span class="line">add(s,b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">dst[i]=s,add(dst[i],mul[b[i]][dg[i]]-b[i]+k);</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d1; ++i)</span><br><span class="line">add(c[i],mul[b[j]][A(j,i)]);</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d1; ++j)</span><br><span class="line">add(b[i],mul[c[j]][A(i,j)]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">if</span> (b[i]!=dst[i])&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)&#123;</span><br><span class="line"><span class="keyword">if</span> (i==j) <span class="keyword">continue</span>;</span><br><span class="line">ele s1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;d; ++r)</span><br><span class="line">add(s1,mul[a[i][r]][a[j][r]]);</span><br><span class="line"><span class="keyword">if</span> (!s1)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,min(i,j)+<span class="number">1</span>,max(i,j)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1 -1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 随机化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2249题解</title>
      <link href="/2018/06/26/loj2249/"/>
      <url>/2018/06/26/loj2249/</url>
      
        <content type="html"><![CDATA[<p>一开始居然脑子短路没有想到斜率优化……以后看到这种感觉跟凸包有关系，要求最值/要最优化的问题，可以考虑写个dp方程出来看看能不能斜率优化.</p><a id="more"></a><p>首先考虑链上，没有$l _v$的限制的情况，可以写出dp方程</p><script type="math/tex; mode=display">\textrm{res} _i=q _i+d _ip _i+\min\\\{\textrm{res} _j-d _jp _i\\\}</script><p>这显然可以斜率优化，把$j$看成点$(d _j,\textrm{res} _j)$，那么使得答案最优的转移点一定在凸包上.</p><p>接下来考虑$l _v$的限制. 这个限制导致了一个问题，就是我们寻找转移点的时候，要在某个区间$[k,i)$上找，而不是在$[0,i)$上. 用二进制分组可以解决这个问题.</p><p>接下来考虑放到树上. 树造成了一个新的问题，如果我们直接做斜率优化的树形dp，就要支持在末端加入或者删除一个点，并维护凸包. 二进制分组理论上是只能加点的，否则摊还分析就会失效. 这里有一个简单的方法：只有在分裂了一个很大的块的时候，才会有很大的时间开销，因此我们可以随机地加入一些无用的点，就比较难卡掉了. <del>出题人好像没有考虑过这个算法，所以直接暴力删除也能过，还更快. </del></p><p>其实还有一些更靠谱的做法，比方说二进制分组靠谱的删除方法，类似替罪羊树的懒惰删除<del>，但是我不想写</del>. 或者树上问题转为链上问题的经典思路树剖，即在重链上二进制分组，重链之间直接暴力. 或者带根的点分治<del>，晚点再研究</del>.</p><p>有一个坑点是构建凸包的时候直接做叉积会爆long long</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400010</span></span><br><span class="line"><span class="keyword">const</span> ele M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> ele size=M&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> ele INF=<span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">ele v;</span><br><span class="line">edge *nxt;</span><br><span class="line">&#125;ep[maxn],*ecnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt</span>&#123;</span></span><br><span class="line">ele x,y;</span><br><span class="line">&#125;seq[maxn];</span><br><span class="line"><span class="keyword">inline</span> pt <span class="keyword">operator</span>+(pt a,pt b)&#123;</span><br><span class="line"><span class="keyword">return</span> (pt)&#123;a.x+b.x,a.y+b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pt <span class="keyword">operator</span>-(pt a,pt b)&#123;</span><br><span class="line"><span class="keyword">return</span> (pt)&#123;a.x-b.x,a.y-b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">cross</span><span class="params">(pt a,pt b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">test</span><span class="params">(pt a,pt b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a.x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (db)b.y/b.x-(db)a.y/a.x;</span><br><span class="line">&#125;</span><br><span class="line">ele n,ty,tot,top,a[size],b[maxn],stk[maxn],f[maxn],s[maxn],p[maxn],q[maxn],l[maxn],res[maxn],d[maxn];</span><br><span class="line">edge *h[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pt&gt; v[size];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ele u,ele v)</span></span>&#123;</span><br><span class="line">edge *p=ecnt++;</span><br><span class="line">p-&gt;v=v; p-&gt;nxt=h[u];</span><br><span class="line">h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;pt&gt;&amp;v,ele l,ele r)</span></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l; i&lt;=r; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (!seq[i].x &amp;&amp; seq[i].y==INF) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span> (v.size()&gt;<span class="number">1</span> &amp;&amp; test(v[v.size()<span class="number">-1</span>]-v[v.size()<span class="number">-2</span>],seq[i]-v[v.size()<span class="number">-1</span>])&lt;<span class="number">1e-6</span>)</span><br><span class="line">v.pop_back();</span><br><span class="line">v.push_back(seq[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele i,ele k)</span></span>&#123;</span><br><span class="line">ele L=<span class="number">1</span>;</span><br><span class="line">i+=M;</span><br><span class="line"><span class="keyword">for</span> (; i; i&gt;&gt;=<span class="number">1</span>,L&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">a[i]+=k;</span><br><span class="line"><span class="keyword">if</span> (a[i]==L)&#123;</span><br><span class="line">ele j=i,k=i;</span><br><span class="line"><span class="keyword">while</span> (j&lt;M) j&lt;&lt;=<span class="number">1</span>,k=k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">build(v[i],j-M,k-M);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(pt p)</span></span>&#123;</span><br><span class="line">seq[tot]=p;</span><br><span class="line">upd(tot++,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">push((pt)&#123;d[i],res[i]&#125;);</span><br><span class="line"><span class="keyword">if</span> (rand()&amp;<span class="number">1</span>) push((pt)&#123;<span class="number">0</span>,INF&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">upd(--tot,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">calc</span><span class="params">(pt v,ele d,ele p,ele q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (d-v.x)*p+q+v.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">qry</span><span class="params">(<span class="built_in">vector</span>&lt;pt&gt;&amp;v,ele d,ele p,ele q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!v.size()) <span class="keyword">return</span> INF;</span><br><span class="line">ele L=<span class="number">-1</span>,R=v.size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (R-L&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ele mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (calc(v[mid],d,p,q)&gt;=calc(v[mid+<span class="number">1</span>],d,p,q)) L=mid; <span class="keyword">else</span> R=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> calc(v[R],d,p,q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">qry</span><span class="params">(ele l,ele r,ele d,ele p,ele q)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span> (l=l+M<span class="number">-1</span>,r=r+M+<span class="number">1</span>; l^r^<span class="number">1</span>; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (~l&amp;<span class="number">1</span>) ans=min(ans,qry(v[l^<span class="number">1</span>],d,p,q));</span><br><span class="line"><span class="keyword">if</span> (r&amp;<span class="number">1</span>) ans=min(ans,qry(v[r^<span class="number">1</span>],d,p,q));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i)&#123;</span><br><span class="line">ele L=<span class="number">-1</span>,R=top<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (R-L&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ele mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d[i]-d[stk[mid]]&lt;=l[i]) R=mid; <span class="keyword">else</span> L=mid;</span><br><span class="line">&#125;</span><br><span class="line">res[i]=qry(b[stk[R]],tot<span class="number">-1</span>,d[i],p[i],q[i]);</span><br><span class="line">&#125;</span><br><span class="line">stk[top++]=i;</span><br><span class="line">b[i]=tot;</span><br><span class="line">push(i);</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt) d[j-&gt;v]=d[i]+s[j-&gt;v],dfs(j-&gt;v);</span><br><span class="line">--top;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (seq[tot].x!=d[i] || seq[tot].y!=res[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;ty);</span><br><span class="line">ecnt=ep; <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>,f+i,s+i,p+i,q+i,l+i),--f[i],addedge(f[i],i);</span><br><span class="line">d[<span class="number">0</span>]=<span class="number">0</span>; top=<span class="number">0</span>; tot=<span class="number">1</span>;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二进制分组 </tag>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3533题解</title>
      <link href="/2018/06/25/bzoj3533/"/>
      <url>/2018/06/25/bzoj3533/</url>
      
        <content type="html"><![CDATA[<p>容易发现答案一定在凸包上，询问的$y\lt 0$则在上凸壳，否则在下凸壳.</p><a id="more"></a><p>容易发现$A\cup B$凸包上的点一定在$A$或$B$的凸包上，所以可以考虑用线段树来维护，每个节点保存对应区间的凸包，每个询问查询$\mathcal O(\log n)$个线段树上的节点.</p><p>但是这里有一个问题，凸包无法高效合并，插入也很麻烦，但是如果知道最后的点集的话离线构建是非常容易的. 这种情况一般可以考虑二进制分组. 对于本题，把二进制分组放到线段树上，也就是说当一个节点对应的区间被填满的时候，再构建这个节点的凸包.</p><p>有一个细节一定要记住：求凸壳的时候两维坐标都要排序：从大到小和从小到大都没问题，两个维度顺序相反也没问题，但是一定要排序. <del>我也不是很清楚为什么. </del>以后遇到给struct排序的情况，最好是给每一个属性都定一个顺序.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400010</span></span><br><span class="line"><span class="keyword">const</span> ele M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> ele size=M&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt</span>&#123;</span></span><br><span class="line">ele x,y;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(pt b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x!=b.x?x&lt;b.x:y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="keyword">inline</span> pt <span class="keyword">operator</span>+(pt a,pt b)&#123;</span><br><span class="line"><span class="keyword">return</span> (pt)&#123;a.x+b.x,a.y+b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pt <span class="keyword">operator</span>-(pt a,pt b)&#123;</span><br><span class="line"><span class="keyword">return</span> (pt)&#123;a.x-b.x,a.y-b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">dot</span><span class="params">(pt a,pt b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x*b.x+a.y*b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">cross</span><span class="params">(pt a,pt b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line">ele n,lastans,a[size];</span><br><span class="line"><span class="keyword">char</span> ty[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pt&gt; v1[size],v2[size];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">decode</span><span class="params">(ele x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x^(lastans&amp;<span class="number">0x7fffffff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">a[i]=a[i&lt;&lt;<span class="number">1</span>]+a[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;pt&gt;&amp;v1,<span class="built_in">vector</span>&lt;pt&gt;&amp;v2,ele l,ele r)</span></span>&#123;</span><br><span class="line">ele top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> pt q[maxn];</span><br><span class="line"><span class="built_in">memcpy</span>(q,p+l,<span class="keyword">sizeof</span>(pt)*(r-l+<span class="number">1</span>));</span><br><span class="line">sort(q,q+r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l; i&lt;=r; ++i)&#123;</span><br><span class="line"><span class="keyword">while</span> (top&gt;<span class="number">1</span> &amp;&amp; cross(v1[top<span class="number">-1</span>]-v1[top<span class="number">-2</span>],q[i-l]-v1[top<span class="number">-1</span>])&gt;=<span class="number">0</span>) --top,v1.pop_back();</span><br><span class="line">v1.push_back(q[i-l]);</span><br><span class="line">++top;</span><br><span class="line">&#125;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l; i&lt;=r; ++i)&#123;</span><br><span class="line"><span class="keyword">while</span> (top&gt;<span class="number">1</span> &amp;&amp; cross(v2[top<span class="number">-1</span>]-v2[top<span class="number">-2</span>],q[i-l]-v2[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) --top,v2.pop_back();</span><br><span class="line">v2.push_back(q[i-l]);</span><br><span class="line">++top;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">ele L=<span class="number">1</span>,j=i; i+=M;</span><br><span class="line"><span class="keyword">for</span> (; i; i&gt;&gt;=<span class="number">1</span>,L&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">++a[i];</span><br><span class="line"><span class="keyword">if</span> (a[i]==L) build(v1[i],v2[i],j-L+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">qry</span><span class="params">(<span class="built_in">vector</span>&lt;pt&gt;&amp;v,pt p)</span></span>&#123;</span><br><span class="line">ele L=<span class="number">-1</span>,R=v.size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (R-L&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ele mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (dot(v[mid],p)&lt;=dot(v[mid+<span class="number">1</span>],p)) L=mid; <span class="keyword">else</span> R=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dot(v[R],p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">qry</span><span class="params">(ele l,ele r,pt p)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">for</span> (l=l+M<span class="number">-1</span>,r=r+M+<span class="number">1</span>; l^r^<span class="number">1</span>; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (~l&amp;<span class="number">1</span>) ans=max(ans,p.y&gt;<span class="number">0</span>?qry(v1[l^<span class="number">1</span>],p):qry(v2[l^<span class="number">1</span>],p));</span><br><span class="line"><span class="keyword">if</span> (r&amp;<span class="number">1</span>) ans=max(ans,p.y&gt;<span class="number">0</span>?qry(v1[r^<span class="number">1</span>],p):qry(v2[r^<span class="number">1</span>],p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%s"</span>,&amp;n,ty);</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">lastans=<span class="number">0</span>;</span><br><span class="line">ele i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--)&#123;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">ele x,y,l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%lld%lld"</span>,op,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span> (ty[<span class="number">0</span>]!=<span class="string">'E'</span>) x=decode(x),y=decode(y);</span><br><span class="line"><span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">'A'</span>)&#123;</span><br><span class="line">p[i]=(pt)&#123;x,y&#125;;</span><br><span class="line">upd(i);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">if</span> (ty[<span class="number">0</span>]!=<span class="string">'E'</span>) l=decode(l),r=decode(r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,lastans=qry(l,r,(pt)&#123;x,y&#125;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二进制分组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2248题解</title>
      <link href="/2018/06/25/loj2248/"/>
      <url>/2018/06/25/loj2248/</url>
      
        <content type="html"><![CDATA[<p>vfk说分不清noi2014和noip2014果然是有道理的……</p><a id="more"></a><p>因为要求字典序最小，可以直接从小到大枚举每个数，如果能加进字典序中，就贪心地加进去，正确性显然.</p><p>现在问题是怎么判断一个数能否加在当前的字典序里面. 注意到一条路径合法等价于它的横坐标和纵坐标均单调不减，维护$c _i$和$d _i$表示当前已经加进去的点中，横坐标为$i$的点的最小值和最大值. 每次加入一个点，先用zkw线段树找出小于它的最大的横坐标和大于它的最小的横坐标，假设为$j$和$k$，判断它的纵坐标是否在$d _j$和$c _k$之间即可.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5010</span></span><br><span class="line"><span class="keyword">const</span> ele M=<span class="number">1</span>&lt;&lt;<span class="number">13</span>;</span><br><span class="line"><span class="keyword">const</span> ele size=M&lt;&lt;<span class="number">1</span>;</span><br><span class="line">ele n,m,Q,x0,A,B,C,D,a[maxn*maxn],p[maxn*maxn],c[maxn],d[maxn],ans[maxn+maxn];</span><br><span class="line"><span class="keyword">bool</span> b[size];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">b[i]=b[i&lt;&lt;<span class="number">1</span>]|b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">i+=M; b[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (i&gt;<span class="number">1</span>) maintain(i&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ele _getl(ele i)&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;=M?i-M:(b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]?_getl(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>):_getl(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">getl</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (i&amp;<span class="number">1</span>) &amp;&amp; b[i^<span class="number">1</span>]?_getl(i^<span class="number">1</span>):getl(i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ele _getr(ele i)&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;=M?i-M:(b[i&lt;&lt;<span class="number">1</span>]?_getr(i&lt;&lt;<span class="number">1</span>):_getr(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">getr</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~i&amp;<span class="number">1</span>) &amp;&amp; b[i^<span class="number">1</span>]?_getr(i^<span class="number">1</span>):getr(i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">test</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">ele x=p[i]/m+<span class="number">1</span>,y=p[i]%m+<span class="number">1</span>;</span><br><span class="line">ele j=getl(x+M),k=getr(x+M);</span><br><span class="line"><span class="keyword">return</span> d[j]&lt;=y &amp;&amp; y&lt;=c[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d%d%d"</span>,&amp;x0,&amp;A,&amp;B,&amp;C,&amp;D,&amp;n,&amp;m,&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*m; ++i) a[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n*m; ++i)&#123;</span><br><span class="line">x0=((ll)A*x0%D*x0%D+(ll)B*x0%D+C)%D;</span><br><span class="line">swap(a[i<span class="number">-1</span>],a[x0%i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">ele u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">swap(a[u<span class="number">-1</span>],a[v<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*m; ++i) p[a[i]]=i;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">b[<span class="number">0</span>+M]=b[n+<span class="number">1</span>+M]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=M<span class="number">-1</span>; i; --i) maintain(i);</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">-1</span>,<span class="keyword">sizeof</span>(c)); <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">c[<span class="number">0</span>]=d[<span class="number">0</span>]=<span class="number">0</span>; c[n+<span class="number">1</span>]=d[n+<span class="number">1</span>]=m+<span class="number">1</span>;</span><br><span class="line">ele cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*m &amp;&amp; cnt&lt;n+m<span class="number">-1</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (test(i))&#123;</span><br><span class="line">ans[cnt++]=i;</span><br><span class="line">ele x=p[i]/m+<span class="number">1</span>,y=p[i]%m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (~c[x]) c[x]=min(c[x],y),d[x]=max(d[x],y);</span><br><span class="line"><span class="keyword">else</span> c[x]=d[x]=y;</span><br><span class="line">upd(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n+m<span class="number">-1</span>; ++i) <span class="built_in">printf</span>(i?<span class="string">" %d"</span>:<span class="string">"%d"</span>,ans[i]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 智力康复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2131题解</title>
      <link href="/2018/06/25/loj2131/"/>
      <url>/2018/06/25/loj2131/</url>
      
        <content type="html"><![CDATA[<p>首先注意到选择了一个数就是选择了它的所有素因子，而不超过$\sqrt{n}$的素数至多只有8个，可以考虑状压. <del>超过的那些我们先不管.</del></p><a id="more"></a><p>我一开始想的是枚举每个素数被分在哪边，这样是$3^8$的，但是我没想出来. 事实上完全可以暴力一点到$4^8$，这样可以把状态表示为$(s _1,s _2)$，即第一个人选了集合$s _1$，第二个人选了集合$s _2$（可以有交），最后把所有$s _1\cap s _2=\emptyset$的状态的答案加起来即可.</p><p>现在考虑大于$\sqrt{n}$的素因子，每个数最多只有一个，因此我们可以把数按照这个素因子来分类. 我一开始的想法是对每一类分别dp再合并起来，但是发现不方便合并. 很多这种不方便合并的情况，可以考虑在前一个的基础上去dp下一个.</p><p>具体来讲，让$f _{j,k}$表示之前dp出来的结果，dp出$g _{j,k}$和$h _{j,k}$分别表示只有第一/二个人能选当前这一类，最后两人选的集合为$j,k$的方案数，最后再让$f _{j,k}=g _{j,k}+h _{j,k}-f _{j,k}$，最后一项是因为两个人都不选这一类的情况被算了两次.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 510</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxs (1&lt;&lt;8)</span></span><br><span class="line"><span class="keyword">const</span> ele p[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line">ele n,P,f[maxs][maxs],g[maxs][maxs],h[maxs][maxs],t1[maxs][maxs],t2[maxs][maxs];</span><br><span class="line"><span class="built_in">vector</span>&lt;ele&gt; v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">getv</span><span class="params">(ele x,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">setv</span><span class="params">(ele&amp;x,ele i,ele k)</span></span>&#123;</span><br><span class="line">x=x&amp;~(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">x=x|(k&lt;&lt;i);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele&amp;a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b&gt;=P?((a+=b)-=P):(a+=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">ele tmp=i,s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;K; ++j)</span><br><span class="line"><span class="keyword">if</span> (tmp%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">setv(s,j,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (tmp%p[j]==<span class="number">0</span>) tmp/=p[j];</span><br><span class="line">&#125;</span><br><span class="line">v[tmp].push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v[<span class="number">1</span>].size(); ++i)&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(t1,f,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxs; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;maxs; ++k)</span><br><span class="line"><span class="keyword">if</span> (f[j][k])&#123;</span><br><span class="line">add(t1[j|v[<span class="number">1</span>][i]][k],f[j][k]);</span><br><span class="line">add(t1[j][k|v[<span class="number">1</span>][i]],f[j][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(f,t1,<span class="keyword">sizeof</span>(f));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">if</span> (v[i].size())&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(g,f,<span class="keyword">sizeof</span>(g)); <span class="built_in">memcpy</span>(h,f,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;v[i].size(); ++r)&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(t1,g,<span class="keyword">sizeof</span>(g)); <span class="built_in">memcpy</span>(t2,h,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxs; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;maxs; ++k)&#123;</span><br><span class="line">add(t1[j|v[i][r]][k],g[j][k]);</span><br><span class="line">add(t2[j][k|v[i][r]],h[j][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(g,t1,<span class="keyword">sizeof</span>(g)); <span class="built_in">memcpy</span>(h,t2,<span class="keyword">sizeof</span>(h));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxs; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;maxs; ++k)&#123;</span><br><span class="line">f[j][k]=P-f[j][k];</span><br><span class="line">add(add(f[j][k],g[j][k]),h[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxs; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;maxs; ++k)</span><br><span class="line"><span class="keyword">if</span> (!(j&amp;k)) add(ans,f[j][k]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 数论 </tag>
            
            <tag> DP </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2085题解</title>
      <link href="/2018/06/25/loj2085/"/>
      <url>/2018/06/25/loj2085/</url>
      
        <content type="html"><![CDATA[<p>挺优美的一道数论题. 当然也有可能是我太菜了.</p><a id="more"></a><p>首先显然是考虑只计算既约分数来避免算重，即只计算$x\perp y$. 考虑$k=10$的时候，$\frac{x}{y}$符合题目条件当且仅当$y$没有因数$2,5$. 容易证明对于所有情况，$\frac{x}{y}$符合题目条件等价于$y\perp k$. 所以我们要计算的其实就是</p><script type="math/tex; mode=display">\sum _{x=1}^n\sum _{y=1}^m[x\perp y][y\perp k]</script><p>一开始我很傻地把两个中括号都拆开了，其实应该先只拆一个观望一下. 因为$[x\perp y]$这一项复杂一些，所以考虑先拆这个<del>（其实还是在瞎猜）</del>，得到</p><script type="math/tex; mode=display">\begin{aligned}&\sum _{y=1}^m[y\perp k]\sum _{x=1}^n\sum _{d|x,~d|y}\mu(d)\\=&\sum _{y=1}^m[y\perp k]\sum _{d|y}^n\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\\=&\sum _{d=1}^n\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\sum _{y=1}^{\lfloor m/d\rfloor}[dy\perp k]\\=&\sum _{d=1}^n[d\perp k]\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\sum _{y=1}^{\lfloor m/d\rfloor}[y\perp k]\end{aligned}</script><p>定义$f(n)=\sum _{y=1}^m[y\perp k]$，那么有$f(km+r)=mf(k)+f(r)~(0\le r\lt k)$，所以预处理$f(1),f(2),\ldots,f(k)$就可以$\mathcal O(1)$计算了. 之前的式子化为</p><script type="math/tex; mode=display">\sum _{d=1}^n[d\perp k]\mu(d)\left\lfloor\frac{n}{d}\right\rfloor f(\left\lfloor\frac{m}{d}\right\rfloor)</script><p>对这个式子整除分块，于是我们需要快速计算</p><script type="math/tex; mode=display">f(n,k)=\sum _{d=1}^n[d\perp k]\mu(d)</script><p>如果没有$[d\perp k]$，那就是一个简单的杜教筛，现在加上这一项，<del>它还是积性函数没关系</del>就可以考虑从总和里面去掉不互质的，设$k=p^rq$，其中$p$为素数，$p\perp q$，那么有</p><script type="math/tex; mode=display">\begin{aligned}f(n,k)=&f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[py\perp q]\mu(py)\\=&f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp q]\mu(py)\\=&f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp q][y\perp p]\mu(p)\mu(y)\\=&f(n,q)+\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp k]\mu(y)\\=&f(n,q)+f(\left\lfloor\frac{n}{p}\right\rfloor,k)\end{aligned}</script><p>然后注意到$f(n,1)$可以直接杜教筛，这道题就可以做了.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 2010</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>&gt;<span class="title">struct</span> <span class="title">hashmap</span>&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ele R=<span class="number">8000009</span>;</span><br><span class="line">T1 a[R];</span><br><span class="line">T2 b[R];</span><br><span class="line"><span class="keyword">bool</span> c[R];</span><br><span class="line">hashmap()&#123; <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">find</span><span class="params">(T1 x)</span></span>&#123;</span><br><span class="line">ele i=x%R;</span><br><span class="line"><span class="keyword">for</span> (; c[i] &amp;&amp; a[i]!=x; (i+=<span class="number">1</span>)%=R);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">test</span><span class="params">(T1 x)</span></span>&#123; <span class="keyword">return</span> c[find(x)]; &#125;</span><br><span class="line"><span class="keyword">inline</span> T2&amp; <span class="keyword">operator</span>[](T1 x)&#123;</span><br><span class="line">ele i=find(x);</span><br><span class="line">!c[i] &amp;&amp; (c[i]=<span class="literal">true</span>,a[i]=x,b[i]=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ele n,m,k,S,f[maxk],pcnt,plst[maxn],mu[maxn],qcnt,q[maxk];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line">hashmap&lt;ele,ele&gt; g;</span><br><span class="line"><span class="function">ele <span class="title">gcd</span><span class="params">(ele a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b?gcd(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">calc</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;=S) <span class="keyword">return</span> mu[n];</span><br><span class="line"><span class="keyword">if</span> (g.test(n)) <span class="keyword">return</span> g[n];</span><br><span class="line">g[n]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ele d=n; d&gt;<span class="number">1</span>; )&#123;</span><br><span class="line">ele d1=max(<span class="number">1l</span>l,n/(n/d+<span class="number">1</span>));</span><br><span class="line">g[n]-=calc(n/d)*(d-d1);</span><br><span class="line">d=d1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">calcf</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[k]*(n/k)+f[n%k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">calcg</span><span class="params">(ele n,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!i) <span class="keyword">return</span> calc(n);</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> calcg(n,i<span class="number">-1</span>)+calcg(n/q[i<span class="number">-1</span>],i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">S=<span class="built_in">exp</span>(<span class="built_in">log</span>(n)/<span class="number">3</span>*<span class="number">2</span>);</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) f[i]=f[i<span class="number">-1</span>]+(gcd(i,k)==<span class="number">1</span>);</span><br><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>; pcnt=<span class="number">0</span>; <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=S; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (!flag[i]) plst[pcnt++]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;pcnt &amp;&amp; i*plst[j]&lt;=S; ++j)&#123;</span><br><span class="line">flag[i*plst[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i%plst[j]) mu[i*plst[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">mu[i*plst[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mu[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=S; ++i) mu[i]+=mu[i<span class="number">-1</span>];</span><br><span class="line">ele tmp=k; qcnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=k; ++i)</span><br><span class="line"><span class="keyword">if</span> (tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">q[qcnt++]=i;</span><br><span class="line"><span class="keyword">while</span> (tmp%i==<span class="number">0</span>) tmp/=i;</span><br><span class="line">&#125;</span><br><span class="line">tmp&gt;<span class="number">1</span> &amp;&amp; (q[qcnt++]=tmp);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ele d=min(n,m); d; )&#123;</span><br><span class="line">ele d1=n/(n/d+<span class="number">1</span>),d2=m/(m/d+<span class="number">1</span>);</span><br><span class="line">d1=max(d1,d2);</span><br><span class="line">ans+=calcf(m/d)*(n/d)*(calcg(d,qcnt)-calcg(d1,qcnt));</span><br><span class="line">d=d1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2306题解</title>
      <link href="/2018/06/25/loj2306/"/>
      <url>/2018/06/25/loj2306/</url>
      
        <content type="html"><![CDATA[<p>这题面写得有毒……应该理解为对于第$i$种蔬菜，有$x _i$个单位只能在第一天卖，有$x _i$个单位只能在第二天结束前卖，以此类推. 也就是说，说你把当天结束本来要变质的蔬菜卖了，那天就不会有蔬菜变质了.</p><a id="more"></a><p>那么我们就有一个朴素的贪心策略：每种蔬菜尽量等到它快要变质了才卖，也就是时间上从后往前贪心. 如果有两种蔬菜要抢夺某一天出售的机会，那肯定是从贵的开始贪心.</p><p>这个算法看上去很正确，但是它没有办法处理$s _i$. 方法是把每种蔬菜拆成两部分：$(a _i,c _i-1)$和$(a _i+s _i,1)$，后者的过期时间即为该种蔬菜最晚的销售时间，然后把所有这些东西按价格排序，每种价格从后往前贪心就可以了. 每种蔬菜在某一天可以销售的量等于贪心到那个时候还剩下的量减去那天之前变质的量. 要用并查集或者set来查询上一个还可以销售的时间.</p><p>但是这样只能处理一个询问. 用反证法容易证明$k$天的答案一定是$k+1$天的答案的子集，而在较后时间出售的蔬菜在较前的时间显然也可以出售，那么只需要对$\max p _i$算出答案，然后每天去掉最廉价的若干单位蔬菜就可以了. 每天需要去掉的量其实就是，把蔬菜的销售尽量往前放之后，当天销售的量.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"><span class="keyword">const</span> ele INF=<span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span>&#123;</span></span><br><span class="line">ele a,c,d,x;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(st b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a!=b.a?a&lt;b.a:d&lt;b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;b[maxn];</span><br><span class="line">ele n,m,K,mx,p[maxn],a[maxn],s[maxn],c[maxn],x[maxn],u[maxn],prv[maxn],r[maxn],res[maxn],f[<span class="number">10000010</span>];</span><br><span class="line">priority_queue&lt;st&gt; Q;</span><br><span class="line"><span class="function">ele <span class="title">getf</span><span class="params">(ele *u,ele x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> u[x]&lt;<span class="number">0</span>?x:(u[x]=getf(u,u[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">uni</span><span class="params">(ele x,ele y)</span></span>&#123;</span><br><span class="line">ele a=getf(u,x),b=getf(u,y);</span><br><span class="line"><span class="keyword">if</span> (a!=b) u[a]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,a+i,s+i,c+i,x+i);</span><br><span class="line">mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,p+i),mx=max(mx,p[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">if</span> (x[i])&#123;</span><br><span class="line">ele d=(c[i]<span class="number">-1</span>)/x[i]+<span class="number">1</span>;</span><br><span class="line">b[i&lt;&lt;<span class="number">1</span>]=(st)&#123;a[i]+s[i],<span class="number">1</span>,d<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(st)&#123;a[i],c[i]<span class="number">-1</span>,d<span class="number">-1</span>,x[i]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[i&lt;&lt;<span class="number">1</span>]=(st)&#123;a[i]+s[i],<span class="number">1</span>,mx<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(st)&#123;a[i],c[i]<span class="number">-1</span>,mx<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*<span class="number">2</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (b[i].d&gt;=<span class="number">0</span> &amp;&amp; b[i].c) Q.push(b[i]);</span><br><span class="line"><span class="built_in">memset</span>(u,<span class="number">-1</span>,<span class="keyword">sizeof</span>(u));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mx; ++i) prv[i]=i<span class="number">-1</span>,r[i]=m;</span><br><span class="line">prv[<span class="number">0</span>]=mx; u[mx]=<span class="number">-1</span>;</span><br><span class="line">ele ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Q.size() &amp;&amp; getf(u,mx<span class="number">-1</span>)!=mx)&#123;</span><br><span class="line">st k=Q.top(); Q.pop();</span><br><span class="line">ele d=getf(u,min(k.d,mx<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">while</span> (d&lt;mx &amp;&amp; k.c)&#123;</span><br><span class="line">ele tmp=min(k.c-k.x*d,r[d]);</span><br><span class="line">k.c-=tmp; r[d]-=tmp;</span><br><span class="line">ans+=k.a*tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tmp; ++j) f[cnt++]=-k.a;</span><br><span class="line"><span class="keyword">if</span> (!r[d]) uni(d,prv[d]);</span><br><span class="line">d=getf(u,prv[d]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(f,f+cnt);</span><br><span class="line">res[mx]=ans;</span><br><span class="line">ele tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mx; ++i) tot+=m-r[i];</span><br><span class="line"><span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mx; ++i) r[i]=min(m,tot),tot-=r[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mx<span class="number">-1</span>; ~i; --i)&#123;</span><br><span class="line">res[i]=res[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;r[i]; ++j) res[i]-=-f[--cnt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res[p[i]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2304题解</title>
      <link href="/2018/06/23/loj2304/"/>
      <url>/2018/06/23/loj2304/</url>
      
        <content type="html"><![CDATA[<p>首先恰好为$k$不好处理，显然要转化为$\le k$的概率减去$\le k-1$的概率.</p><a id="more"></a><p>看上去就是个dp，让$f _i$表示共$i$列，安全泳池面积$\le k$的概率，考虑怎么递推. 假设最底下一行有一个格子是危险的，那么显然这一列两边互不干扰可以分开计算. 但是这里有一个问题，底下一行可能没有危险的格子. 于是我们把状态改为$f _{i,j}$表示共$i$列，下面$j$行均安全，第$j+1$行至少有一个危险的格子，且安全泳池面积$\le k$的概率. 记$g _{i,j}=\sum _{w\ge j}f _{i,w}$，即共$i$列，下面$j$行均安全，且安全泳池面积$\le k$的概率.</p><p>那么我们就可以枚举第$j+1$行最后一个危险格子的位置，得到递推式</p><script type="math/tex; mode=display">f _{i,j}=\sum _{r\lt i,~r(j+1)\le k}g _{r,j+1}g _{i-r-1,j}q^j(1-q)</script><p>注意到$\forall ij&gt;k,~f _{i,j}=0$，直接dp就可以得到70分.</p><p>考虑怎么拿剩下的30分. 显然当$i\gt k$时只需要考虑$f _{i,0}$，而且此时$f _{i,0}=g _{i,0}$. 而$r\le\frac{k}{j+1}\le k$，所以当$i\ge 2k+2$时，递推式可以写成</p><script type="math/tex; mode=display">g _{i,0}=\sum _{r=0}^k(1-q)g _{r,1}g _{i-r-1,0}</script><p>这是一个常系数线性齐次递推式，前面暴力递推到$i=2k+1$，后面的用特征多项式可以做到$\mathcal O(k^2\log n)$.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 4010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line">ele n,K,x,y,q,f[maxk][maxk];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(ele K,ele *a,ele *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele c[maxk];</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=K; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=K; ++j)</span><br><span class="line">(c[i+j]+=(ll)a[i]*b[j]%MOD)%=MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=K*<span class="number">2</span>; i&gt;K; --i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=K; ++j)</span><br><span class="line">(c[i-j<span class="number">-1</span>]+=(ll)c[i]*f[j][<span class="number">1</span>]%MOD*(MOD+<span class="number">1</span>-q)%MOD)%=MOD;</span><br><span class="line"><span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span>(ele)*(K+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">calc</span><span class="params">(ele K)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=K+<span class="number">1</span>; ++i) f[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n &amp;&amp; i&lt;=K*<span class="number">2</span>+<span class="number">1</span>; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; i*j&lt;=K; ++j)&#123;</span><br><span class="line">f[i][j]=<span class="number">0</span>;</span><br><span class="line">ele tmp=(ll)pw(q,j)*(MOD+<span class="number">1</span>-q)%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;i &amp;&amp; r*(j+<span class="number">1</span>)&lt;=K; ++r)&#123;</span><br><span class="line">ele t1=(ll)f[r][j+<span class="number">1</span>]*tmp%MOD*f[i-r<span class="number">-1</span>][j]%MOD;</span><br><span class="line">(f[i][j]+=t1)%=MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=K/i<span class="number">-1</span>; ~j; --j) (f[i][j]+=f[i][j+<span class="number">1</span>])%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n&lt;=K*<span class="number">2</span>+<span class="number">1</span>) <span class="keyword">return</span> f[n][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">static</span> ele a[maxk],b[maxk];</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>; b[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ele n1=n-K<span class="number">-1</span>; n1; n1&gt;&gt;=<span class="number">1</span>,mul(K,b,b))</span><br><span class="line"><span class="keyword">if</span> (n1&amp;<span class="number">1</span>) mul(K,a,b);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=K; ++i)</span><br><span class="line">(ans+=(ll)a[i]*f[K+<span class="number">1</span>+i][<span class="number">0</span>]%MOD)%=MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;K,&amp;x,&amp;y);</span><br><span class="line">q=(ll)x*pw(y,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">ele t1=calc(K);</span><br><span class="line">ele t2=calc(K<span class="number">-1</span>);</span><br><span class="line">(t1+=MOD-t2)%=MOD;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2303题解</title>
      <link href="/2018/06/23/loj2303/"/>
      <url>/2018/06/23/loj2303/</url>
      
        <content type="html"><![CDATA[<p>我怕不是在做noip题……</p><a id="more"></a><p>注意到$k\le 50$，询问会涉及到的向后$k$数字串个数为$\mathcal O(nk)$，可以考虑直接把所有这些串的hash值存到hash表里面，进行修改操作的时候受影响的串只有$\mathcal O(k^2)$个，暴力维护即可.</p><p>卡常死活卡不过去，profile了一发，发现性能瓶颈是unordered_map，改成手写hash表直接3.4s-&gt;0.7s. 以后能手写的时候还是手写吧.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io&#123;</span><br><span class="line"><span class="keyword">const</span> ele size=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> buf[size],*s=buf,*t=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; ((t=(s=buf)+fread(buf,<span class="number">1</span>,size,<span class="built_in">stdin</span>)),s==t)?EOF:*s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">gi</span>(<span class="title">I</span>&amp;<span class="title">a</span>)&#123;</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>);</span><br><span class="line">a=c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>) a=(a&lt;&lt;<span class="number">3</span>)+(a&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gs</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>);</span><br><span class="line">*s++=c;</span><br><span class="line"><span class="keyword">while</span> ((c=gc())&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>) *s++=c;</span><br><span class="line">*s=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> obuf[size],*os=obuf,*ot=obuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">fwrite(obuf,<span class="number">1</span>,ot-os,<span class="built_in">stdout</span>);</span><br><span class="line">os=ot=obuf;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">ot==obuf+size &amp;&amp; flush(),*ot++=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">pi</span>(<span class="title">I</span> <span class="title">x</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (!x) pc(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x) s[cnt++]=x%<span class="number">10</span>+<span class="string">'0'</span>,x/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (cnt) pc(s[--cnt]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> io::gc;</span><br><span class="line"><span class="keyword">using</span> io::gi;</span><br><span class="line"><span class="keyword">using</span> io::gs;</span><br><span class="line"><span class="keyword">using</span> io::pc;</span><br><span class="line"><span class="keyword">using</span> io::pi;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashmap</span>&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> ele R=<span class="number">8000009</span>;</span><br><span class="line">ll a[R];</span><br><span class="line">ele b[R];</span><br><span class="line"><span class="keyword">bool</span> c[R];</span><br><span class="line">hashmap()&#123; <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">find</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">ele i=x%R;</span><br><span class="line"><span class="keyword">for</span> (; c[i] &amp;&amp; a[i]!=x; (i+=<span class="number">1</span>)%=R);</span><br><span class="line">!c[i] &amp;&amp; (c[i]=<span class="literal">true</span>,a[i]=x,b[i]=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> ele&amp; <span class="keyword">operator</span>[](ll i)&#123;</span><br><span class="line"><span class="keyword">return</span> b[find(i)];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxL 10000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="keyword">const</span> ll seed=<span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> ll p[]=&#123;<span class="number">29</span>,<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ll P[]=&#123;(<span class="number">1</span>&lt;&lt;p[<span class="number">0</span>])<span class="number">-1</span>,(<span class="number">1</span>&lt;&lt;p[<span class="number">1</span>])<span class="number">-1</span>&#125;;</span><br><span class="line">ele n,m,K,a[maxn],prv[maxn],nxt[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxL];</span><br><span class="line">ll h[<span class="number">2</span>][maxL],xl[<span class="number">2</span>][<span class="number">55</span>];</span><br><span class="line">hashmap mp;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;<span class="title">inline</span> <span class="title">I</span> _<span class="title">mod</span>(<span class="title">I</span> <span class="title">x</span>,<span class="title">ele</span> <span class="title">i</span>)&#123;</span></span><br><span class="line"><span class="keyword">return</span> (x=(x&gt;&gt;p[i])+(x&amp;P[i]))&gt;=P[i]?x-P[i]:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele u,ele v,ele delta)</span></span>&#123;</span><br><span class="line">ll t1=<span class="number">0</span>,t2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=K &amp;&amp; ~u; ++i,u=prv[u])&#123;</span><br><span class="line">t1*=seed; t1+=a[u]; t1=_mod(t1,<span class="number">0</span>);</span><br><span class="line">t2*=seed; t2+=a[u]; t2=_mod(t2,<span class="number">1</span>);</span><br><span class="line">ll t3=t1,t4=t2;</span><br><span class="line">ele w=v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; i+j&lt;=K &amp;&amp; ~w; ++j,w=nxt[w])&#123;</span><br><span class="line">t3+=xl[<span class="number">0</span>][i+j<span class="number">-1</span>]*a[w]; t3=_mod(t3,<span class="number">0</span>);</span><br><span class="line">t4+=xl[<span class="number">1</span>][i+j<span class="number">-1</span>]*a[w]; t4=_mod(t4,<span class="number">1</span>);</span><br><span class="line">mp[t3+(t4&lt;&lt;<span class="number">30</span>)]+=delta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">gi(n); gi(m);</span><br><span class="line">K=m&gt;<span class="number">300000</span>?<span class="number">1</span>:<span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) gi(a[i]),++mp[(ll)a[i]+((ll)a[i]&lt;&lt;<span class="number">30</span>)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>; ++j)&#123;</span><br><span class="line">xl[j][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=K; ++i) xl[j][i]=_mod(xl[j][i<span class="number">-1</span>]*seed,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(prv,<span class="number">-1</span>,<span class="keyword">sizeof</span>(prv));</span><br><span class="line"><span class="built_in">memset</span>(nxt,<span class="number">-1</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line">ele op,u,v;</span><br><span class="line">gi(op);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">gi(u); gi(v); --u,--v;</span><br><span class="line">nxt[u]=v; prv[v]=u;</span><br><span class="line">upd(u,v,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op==<span class="number">2</span>)&#123;</span><br><span class="line">gi(u); --u; v=nxt[u];</span><br><span class="line">nxt[u]=prv[v]=<span class="number">-1</span>;</span><br><span class="line">upd(u,v,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">gs(s); gi(u);</span><br><span class="line">ele L=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>; ++j)&#123;</span><br><span class="line">h[j][L]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=L<span class="number">-1</span>; ~i; --i) h[j][i]=_mod(h[j][i+<span class="number">1</span>]*seed+s[i]-<span class="string">'0'</span>,j);</span><br><span class="line">&#125;</span><br><span class="line">ele ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i+u&lt;=L; ++i)&#123;</span><br><span class="line">ll t1=_mod(h[<span class="number">0</span>][i]+P[<span class="number">0</span>]*P[<span class="number">0</span>]-h[<span class="number">0</span>][i+u]*xl[<span class="number">0</span>][u],<span class="number">0</span>);</span><br><span class="line">ll t2=_mod(h[<span class="number">1</span>][i]+P[<span class="number">1</span>]*P[<span class="number">1</span>]-h[<span class="number">1</span>][i+u]*xl[<span class="number">1</span>][u],<span class="number">1</span>);</span><br><span class="line">ll tmp=t1+(t2&lt;&lt;<span class="number">30</span>);</span><br><span class="line">ans=(ll)ans*mp[tmp]%MOD;</span><br><span class="line">&#125;</span><br><span class="line">pi(ans);</span><br><span class="line">pc(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">io::flush();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 字符串hash </tag>
            
            <tag> hash表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2302题解</title>
      <link href="/2018/06/22/loj2302/"/>
      <url>/2018/06/22/loj2302/</url>
      
        <content type="html"><![CDATA[<p>看到题目很容易想到压位+线段树，但是因为<del>我太懒了</del>这不太好写，我上网查了查发现了另一个很有意思的做法.</p><a id="more"></a><p>这道题的难点在于处理进位和退位，更准确地说应该是处理退位，因为如果只有进位的话，可以暴力处理，进位的次数是摊还$\mathcal O(1)$的. 那么我们可以把正的数和负的数分开加起来，假设和分别为$s _1$和$s _2$，每次询问就是要求$s _1-s _2$第$k$位上的数.</p><p>为了求这个，我们需要知道做减法的时候在第$k$位上是否出现了退位，判断方法很简单，只需要比较两个数最低的$k-1$位的大小即可. 用zkw维护$s _1$异或$s _2$，找出第$k$位以下第一个为$1$的位，然后检查一下$s _1$和$s _2$具体哪一个这位为$1$就可以了. 当然要特判一下异或的结果全都是$0$的情况.</p><p>具体实现加法的时候，我是先把从第$b$位开始的$30$位拿出来跟$a$相加，维护$s _1$异或$s _2$，再处理一次进位，不知道这么做有没有减小常数.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30000100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 30</span></span><br><span class="line"><span class="keyword">const</span> ele M0=<span class="number">1</span>&lt;&lt;<span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> ele size=M0&lt;&lt;<span class="number">1</span>;</span><br><span class="line">ele n,M,t1,t2,t3;</span><br><span class="line"><span class="keyword">bool</span> a[<span class="number">2</span>][maxm];</span><br><span class="line"><span class="keyword">bool</span> b[size];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">b[i]=b[i&lt;&lt;<span class="number">1</span>]|b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">i+=M;</span><br><span class="line">b[i]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i&gt;<span class="number">1</span>) maintain(i&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ele _getl(ele i)&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;=M?i-M:(b[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]?_getl(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>):_getl(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">getl</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i==<span class="number">1</span>?<span class="number">-1</span>:((i&amp;<span class="number">1</span>) &amp;&amp; b[i^<span class="number">1</span>]?_getl(i^<span class="number">1</span>):getl(i&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;t1,&amp;t2,&amp;t3);</span><br><span class="line">M=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (M&lt;=n*K) M&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--)&#123;</span><br><span class="line">ele op,u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;op,&amp;u);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">ele r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (u&lt;<span class="number">0</span>) u=-u,r=<span class="number">1</span>;</span><br><span class="line">ele tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=v+K<span class="number">-1</span>; i&gt;=v; --i) tmp&lt;&lt;=<span class="number">1</span>,tmp|=a[r][i];</span><br><span class="line">ele t1=tmp;</span><br><span class="line">tmp+=u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=v; i&lt;v+K; ++i)&#123;</span><br><span class="line">a[r][i]=(tmp&gt;&gt;(i-v))&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((tmp&gt;&gt;(i-v)&amp;<span class="number">1</span>)!=(t1&gt;&gt;(i-v)&amp;<span class="number">1</span>)) upd(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp&gt;=(<span class="number">1</span>&lt;&lt;K))&#123;</span><br><span class="line">ele j;</span><br><span class="line"><span class="keyword">for</span> (j=v+K; a[r][j]; ++j) a[r][j]=<span class="number">0</span>,upd(j);</span><br><span class="line">a[r][j]=<span class="number">1</span>; upd(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele ans=a[<span class="number">0</span>][u]^a[<span class="number">1</span>][u];</span><br><span class="line">ele i=getl(u+M);</span><br><span class="line"><span class="keyword">if</span> (~i &amp;&amp; a[<span class="number">0</span>][i]&lt;a[<span class="number">1</span>][i]) ans^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 二进制减法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2554题解</title>
      <link href="/2018/06/21/loj2554/"/>
      <url>/2018/06/21/loj2554/</url>
      
        <content type="html"><![CDATA[<p>首先注意到给定的区间之间要么不相交，要么嵌套，否则肯定不合法，而且一定有一个覆盖整个序列的区间. 据此我们可以发现区间之间嵌套的关系形成了一个树结构，树中每个点是一个极大的连续的区间. 因此我们只需求出$f _i$表示长为$i+1$的，不存在任何不包含最后一位的连续区间的，排列的个数.</p><a id="more"></a><p>假设$a$是$1,2,\ldots,n$的一个排列，令$p _i$表示$i$在$a$中的位置，易知$a$中一个连续的区间对应着$p$中一个连续的区间，因此$a$满足上一段所述条件等价于$p$中不存在一个不包含最大值的连续区间.</p><p>考虑跟排列有关的递推<del>我只知道</del>有两种思路，把$n+1$插入或者在序列某位放一个$i$，并把前面所有$\ge i$的数$+1$. 我一开始想的是后一种思路，结果没想出来. 考虑前一种思路，因为$p$中不存在一个不包含最大值的连续区间，为方便起见插入$1$而不是插入$n+1$，接下来要讨论两种情况. 为方便起见，下面先假设$n\ge 2$.</p><p>如果插入前的序列是合法的，那么插入前的序列有$f _{n-1}$种可能，而插入的位置可以是除了插入前最小值旁边的任何位置，共$n-1$种，因此这种情况的贡献为$(n-1)f _{n-1}$.</p><p>如果插入前序列不合法，那么$1$一定是放在了一个连续区间中间，设它所在的极长连续区间长度为$i$，那么这段区间插入$1$后不连续等价于它插入$1$，离散化后不存在不包含最小值的连续区间，等价于不存在不包含最d大值的连续区间，所以这个连续区间插入$1$之后共有$f _i$种可能. 把这段区间缩成一个数，然后把得到的序列离散化，剩下的序列长度为$n-i+1$，它也不能有不包含最小值的连续区间，共$f _{n-i}$种可能. 注意到插入$1$的那个连续区间在离散化之后的权值不能为最小值也不能为最大值，因而有$n-i-1$种可能. 综上，这一部分的贡献为</p><script type="math/tex; mode=display">\sum _{i=2}^{n-1}f _if _{n-i}(n-i-1)=\sum _{i=2}^{n-2}(i-1)f _if _{n-i}</script><p>于是我们可以列出递推式</p><script type="math/tex; mode=display">\begin{aligned}f _n=&\sum _{i=2}^{n-2}(i-1)f _if _{n-i}+(n-1)f _{n-1}\\\\=&\sum _{i=2}^{n-1}(i-1)f _if _{n-i}-(n-3)f _{n-1}\end{aligned}</script><p>把下标范围弄得对称一些，并加入一些修改使其对$\forall n\in \mathbb N$都成立</p><script type="math/tex; mode=display">f _n=\sum _{i=1}^{n-1}(i-1)f _if _{n-i}-(n-3)f _{n-1}+[n=0]</script><p>这个东西就可以用分治来计算了.</p><p>这个卷积是自己卷自己，但也是可以分治的. 对于每个$(j-1)f _jf _k$，我们在$j,k$中较大一项被计算出来的时候，统计它的贡献. 把分治的长度补全为$2$的幂，假设当前的分治区间是$[l,r)$，$m=\left\lfloor\frac{l+r}{2}\right\rfloor$，统计$[l,m)$中的$f$的贡献，分两种情况讨论：</p><ul><li>$l\neq 0$. 对于$[l,m)$中的每个$i$，要取一个$j$使得它们对$[m,r)$有贡献，显然$j\in[0,r-l)$，而此时必有$r-l\le l$，直接把$[l,m)$中的元素和$[0,r-l)$中的元素卷起来统计贡献就可以了.</li><li>$l=0$. 直接$[l,m)$中的元素卷上$[l,m)$中的元素.</li></ul><p>第一种情况实现精细的话可以用5次而不是6次ntt<del>，说不定还可以更少</del>.</p><p>这种题卷积的下标范围一定要想办法弄对称，这样细节处理上会方便很多.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn (1&lt;&lt;17)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line">ele n,a[maxn],f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele&amp; <span class="title">add</span><span class="params">(ele&amp;a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a=(a+b&gt;=MOD?a+b-MOD:a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ele K,ele n,ele *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele f[maxn];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">f[i]=f[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) f[i]+=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;f[i]) swap(y[i],y[f[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;n; p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">ele o=pw(g,(MOD<span class="number">-1</span>)/p/<span class="number">2</span>);</span><br><span class="line">o=~K?o:pw(o,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=(p&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ele o1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;i+p; ++j,o1=(ll)o1*o%MOD)&#123;</span><br><span class="line">ele u=y[j],v=(ll)y[j+p]*o1%MOD;</span><br><span class="line">y[j]=(u+v)%MOD;</span><br><span class="line">y[j+p]=(u-v+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~K)&#123;</span><br><span class="line">ele invn=pw(n,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) y[i]=(ll)y[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ele *f,ele l,ele r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp=(r-l)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">solve(f,l,mid);</span><br><span class="line"><span class="keyword">static</span> ele t1[maxn],t2[maxn],t3[maxn],t4[maxn];</span><br><span class="line"><span class="keyword">if</span> (l)&#123;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l; i&lt;mid; ++i) t1[i-l]=(ll)f[i]*(i<span class="number">-1</span>)%MOD;</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;r-l; ++i) t2[i]=f[i];</span><br><span class="line"><span class="built_in">memset</span>(t3,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;r-l; ++i) t3[i]=(ll)f[i]*(i<span class="number">-1</span>)%MOD;</span><br><span class="line"><span class="built_in">memset</span>(t4,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l; i&lt;mid; ++i) t4[i-l]=f[i];</span><br><span class="line">ntt(<span class="number">1</span>,tmp,t1); ntt(<span class="number">1</span>,tmp,t2); ntt(<span class="number">1</span>,tmp,t3); ntt(<span class="number">1</span>,tmp,t4);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i)</span><br><span class="line">t1[i]=((ll)t1[i]*t2[i]%MOD+(ll)t3[i]*t4[i]%MOD)%MOD;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,t1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mid; i&lt;r; ++i) add(f[i],t1[i-l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;mid; ++i) t1[i]=(ll)f[i]*(i<span class="number">-1</span>)%MOD;</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span>(ele)*tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;mid; ++i) t2[i]=f[i];</span><br><span class="line">ntt(<span class="number">1</span>,tmp,t1); ntt(<span class="number">1</span>,tmp,t2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp; ++i) t1[i]=(ll)t1[i]*t2[i]%MOD;</span><br><span class="line">ntt(<span class="number">-1</span>,tmp,t1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mid; i&lt;r; ++i) add(f[i],t1[i]);</span><br><span class="line">&#125;</span><br><span class="line">add(f[mid],MOD-(ll)f[mid<span class="number">-1</span>]*(mid+MOD<span class="number">-3</span>)%MOD);</span><br><span class="line">solve(f,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">calc</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">ele j=i<span class="number">-1</span>,ans=<span class="number">1</span>,tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j&gt;i-a[i])&#123;</span><br><span class="line">ans=(ll)ans*calc(j)%MOD;</span><br><span class="line">j-=a[j];</span><br><span class="line">++tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j&lt;i-a[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ans=(ll)ans*f[tmp]%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ele T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;T,&amp;n);</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">ele tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp&lt;=n) tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">solve(f,<span class="number">0</span>,tmp);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line"><span class="keyword">if</span> (a[n<span class="number">-1</span>]!=n) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,calc(n<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2553题解</title>
      <link href="/2018/06/20/loj2553/"/>
      <url>/2018/06/20/loj2553/</url>
      
        <content type="html"><![CDATA[<p><del>点一下，写一年！A到就是赚到！</del></p><a id="more"></a><p>一个自然的思路是枚举$\textrm{LCA}^\prime(x,y)$，这样$x$和$y$在$T^\prime$上分属$\textrm{LCA}^\prime(x,y)$的不同子树，剩下在$T$上的部分可以写成$f(x,y)=\frac{1}{2}(\textrm{depth}(x)+\textrm{depth}(y)+\textrm{dis}(x,y))$，可以做类似dsu on a tree的过程来统计答案. 那么我们需要一个数据结构维护一个点集$S$，支持对一个点$u$查询$\min _{v \in S}f(u,v)$以及向$S$中插入一个点.</p><p>像这样维护树上点集，查询权值在边上的信息的时候，可以考虑使用边分治，先对树$T$建立起一棵边分树，把点集$S$按照该分治结构划分，形成一棵有$O(|S|)$个点的树结构，每个点保存$\max\textrm{depth}(u)+\textrm{dis}(u,v)$，其中$u$为该点代表的分治结构里面的关键点，$v$为上一层分治结构的分治边靠近当前分治结构的端点. 那么查询直接在这棵树上面往下走就可以了，插入也可以很容易地处理. 这样我们就可以$\mathcal O(n\log^2 n)$地解决这道题.</p><p>事实上还可以进一步优化，注意到边分树是二叉树结构，可以直接使用类似线段树合并的算法，并顺便计算贡献，而不需要进行启发式合并，这样的复杂度是$\mathcal O(n\log n)$.</p><p>边分树是二叉树结构，所以很多东西想起来会更加方便. 但是边分树常数相对会更大，而且如果询问的信息在点上，就不能加入辅助点，复杂度会退化到$\mathcal O(n^2)$. 刚刚那些东西用点分树理论上可能也是可以做到的，但是会麻烦很多.</p><p>不知道为什么还需要辛辛苦苦卡内存……</p><p>截止到写这篇题解的时候，loj上有若干份AC代码可以对拍出一堆错. <del>等待数据加强.</del></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 733342</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 100000</span></span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">struct</span> <span class="title">mempool</span>&#123;</span></span><br><span class="line">T *s,*t;</span><br><span class="line">mempool():s(<span class="literal">NULL</span>),t(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T* <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; (t=(s=<span class="keyword">new</span> T[K])+K),s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">ele v,w;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">edge *nxt,*rev;</span><br><span class="line">&#125;ep[maxn&lt;&lt;<span class="number">2</span>],*ecnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">edge *e;</span><br><span class="line">ll mx;</span><br><span class="line">node *l,*r;</span><br><span class="line">&#125;;</span><br><span class="line">ele n,acnt,size[maxn],w[maxn];</span><br><span class="line">ll ans,dep[maxn];</span><br><span class="line">edge *h[maxn],*g[maxn],*h1[maxn];</span><br><span class="line">mempool&lt;node&gt; np;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; vd[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vc[maxn];</span><br><span class="line">node *T[maxn],*er;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">boom</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *c=<span class="literal">NULL</span>; <span class="built_in">putchar</span>(*c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge1</span><span class="params">(edge *h[],ele u,ele v,ele w)</span></span>&#123;</span><br><span class="line">edge *p=ecnt++;</span><br><span class="line">p-&gt;v=v; p-&gt;w=w; p-&gt;flag=<span class="literal">false</span>; p-&gt;nxt=h[u];</span><br><span class="line">p-&gt;rev=ep+((ecnt-ep<span class="number">-1</span>)^<span class="number">1</span>);</span><br><span class="line">h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(edge *h[],ele u,ele v,ele w)</span></span>&#123;</span><br><span class="line">addedge1(h,u,v,w); addedge1(h,v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(ele p,ele i)</span></span>&#123;</span><br><span class="line">ele tmp=i;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p)&#123;</span><br><span class="line">addedge(h1,tmp,acnt,<span class="number">0</span>);</span><br><span class="line">addedge(h1,acnt,j-&gt;v,j-&gt;w);</span><br><span class="line">tmp=acnt++;</span><br><span class="line">dfs1(i,j-&gt;v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(ele p,ele i)</span></span>&#123;</span><br><span class="line">size[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h1[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p &amp;&amp; !j-&gt;flag)&#123;</span><br><span class="line">dfs2(i,j-&gt;v);</span><br><span class="line">size[i]+=size[j-&gt;v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">edge* <span class="title">dfs3</span><span class="params">(ele p,ele i,ele s)</span></span>&#123;</span><br><span class="line">edge *ans=<span class="literal">NULL</span>; w[i]=max(size[i],s-size[i]);</span><br><span class="line"><span class="keyword">for</span> (edge *j=h1[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p &amp;&amp; !j-&gt;flag)&#123;</span><br><span class="line">edge *tmp=dfs3(i,j-&gt;v,s);</span><br><span class="line"><span class="keyword">if</span> (!ans || (tmp &amp;&amp; w[tmp-&gt;v]&lt;w[ans-&gt;v])) ans=tmp;</span><br><span class="line"><span class="keyword">if</span> (!ans || w[j-&gt;v]&lt;w[ans-&gt;v]) ans=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs5</span><span class="params">(ele p,ele i,ll d,ele c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;n) vd[i].push_back(d),vc[i].push_back(c);</span><br><span class="line"><span class="keyword">for</span> (edge *j=h1[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p &amp;&amp; !j-&gt;flag) dfs5(i,j-&gt;v,d+j-&gt;w,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">build</span><span class="params">(ele i)</span></span>&#123;</span><br><span class="line">dfs2(<span class="number">-1</span>,i);</span><br><span class="line">edge *k=dfs3(<span class="number">-1</span>,i,size[i]);</span><br><span class="line"><span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">k-&gt;flag=k-&gt;rev-&gt;flag=<span class="literal">true</span>;</span><br><span class="line">dfs5(<span class="number">-1</span>,k-&gt;rev-&gt;v,<span class="number">0</span>,<span class="number">0</span>); dfs5(<span class="number">-1</span>,k-&gt;v,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">node *p=np.alloc(); p-&gt;e=k;</span><br><span class="line">p-&gt;l=build(k-&gt;rev-&gt;v);</span><br><span class="line">p-&gt;r=build(k-&gt;v);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs4</span><span class="params">(ele p,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h1[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p) dep[j-&gt;v]=dep[i]+j-&gt;w,dfs4(i,j-&gt;v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(node *x)</span></span>&#123;</span><br><span class="line">x-&gt;mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x-&gt;l) x-&gt;mx=max(x-&gt;mx,x-&gt;l-&gt;mx);</span><br><span class="line"><span class="keyword">if</span> (x-&gt;r) x-&gt;mx=max(x-&gt;mx,x-&gt;r-&gt;mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">build</span><span class="params">(node *x,ele i,ele j)</span></span>&#123;</span><br><span class="line">node *p=np.alloc();</span><br><span class="line">p-&gt;l=p-&gt;r=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span> p;</span><br><span class="line">p-&gt;e=x-&gt;e;</span><br><span class="line"><span class="keyword">if</span> (!vc[i][j])&#123;</span><br><span class="line">p-&gt;l=build(x-&gt;l,i,j+<span class="number">1</span>);</span><br><span class="line">p-&gt;l-&gt;mx=vd[i][j]+dep[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;r=build(x-&gt;r,i,j+<span class="number">1</span>);</span><br><span class="line">p-&gt;r-&gt;mx=vd[i][j]+dep[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">merge</span><span class="params">(node *a,node *b,ll&amp;ans)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">if</span> (a-&gt;l &amp;&amp; b-&gt;r) ans=max(ans,a-&gt;l-&gt;mx+b-&gt;r-&gt;mx+a-&gt;e-&gt;w);</span><br><span class="line"><span class="keyword">if</span> (a-&gt;r &amp;&amp; b-&gt;l) ans=max(ans,a-&gt;r-&gt;mx+b-&gt;l-&gt;mx+a-&gt;e-&gt;w);</span><br><span class="line">a-&gt;l=merge(a-&gt;l,b-&gt;l,ans);</span><br><span class="line">a-&gt;r=merge(a-&gt;r,b-&gt;r,ans);</span><br><span class="line">a-&gt;mx=max(a-&gt;mx,b-&gt;mx);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs6</span><span class="params">(ele p,ele i,ll d)</span></span>&#123;</span><br><span class="line">ans=max(ans,dep[i]-d);</span><br><span class="line">T[i]=build(er,i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (edge *j=g[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p)&#123;</span><br><span class="line">dfs6(i,j-&gt;v,d+j-&gt;w);</span><br><span class="line">ll tmp=-INF;</span><br><span class="line">T[i]=merge(T[i],T[j-&gt;v],tmp);</span><br><span class="line"><span class="keyword">if</span> (tmp&gt;-INF) ans=max(ans,tmp/<span class="number">2</span>-d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">ecnt=ep; <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">ele u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w); --u,--v;</span><br><span class="line">addedge(h,u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">ele u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w); --u,--v;</span><br><span class="line">addedge(g,u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">acnt=n;</span><br><span class="line"><span class="built_in">memset</span>(h1,<span class="number">0</span>,<span class="keyword">sizeof</span>(h1));</span><br><span class="line">dfs1(<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//memcpy(h1,h,sizeof(h));</span></span><br><span class="line">er=build(<span class="number">0</span>);</span><br><span class="line">dep[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">dfs4(<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">ans=-INF;</span><br><span class="line">dfs6(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="comment">//while(1);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 边分治 </tag>
            
            <tag> 线段树合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2555题解</title>
      <link href="/2018/06/20/loj2555/"/>
      <url>/2018/06/20/loj2555/</url>
      
        <content type="html"><![CDATA[<p>首先考虑$m=1$的情况，这个时候显然直接二分+按价格贪心就可以了. 如果直接把这个算法应用到原题，复杂度是$\mathcal O(nm\log^2 n)$. 结果我就开始想整体二分，想复杂了.</p><a id="more"></a><p>事实上这种情况下还有一种优化复杂度的思路，就是使用某个数据结构加速单次的查询，即要支持：</p><ul><li>在果汁集合确定的情况下，快速查询某个$(g,L)$是否可行</li><li>可持久化地加入一种果汁</li></ul><p>不考虑可持久化的情况下，我的第一反应是按价格顺序维护平衡树然后在上面二分. 这么做的话要可持久化会比较复杂，一个很自然的思路是想办法用线段树去维护它.</p><p>线段树相比平衡树一个很大的缺陷就是不能从中间插入，同样有一个很自然的思路就是预先留好空间，但是一开始存的是0，要插入的时候再将其激活.</p><p>最后复杂度是$\mathcal O(n\log n+m\log^2 n)$.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 500000</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jc</span>&#123;</span></span><br><span class="line">ele d,p,l;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(jc b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> p&lt;b.p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">mempool</span>&#123;</span></span><br><span class="line">T *s,*t;</span><br><span class="line">mempool():s(<span class="literal">NULL</span>),t(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T* <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; (t=(s=<span class="keyword">new</span> T[K])+K),s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ele sl,sp;</span><br><span class="line">node *l,*r;</span><br><span class="line">&#125;;</span><br><span class="line">ele n,m,b[maxn];</span><br><span class="line">node *T[maxn];</span><br><span class="line">mempool&lt;node&gt; np;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ele i,ele j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[i].d&gt;a[j].d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">build</span><span class="params">(ele l,ele r)</span></span>&#123;</span><br><span class="line">node *p=np.alloc();</span><br><span class="line">p-&gt;sl=p-&gt;sp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l==r) p-&gt;l=p-&gt;r=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p-&gt;l=build(l,mid);</span><br><span class="line">p-&gt;r=build(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(node *x)</span></span>&#123;</span><br><span class="line">x-&gt;sl=x-&gt;l-&gt;sl+x-&gt;r-&gt;sl;</span><br><span class="line">x-&gt;sp=x-&gt;l-&gt;sp+x-&gt;r-&gt;sp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">upd</span><span class="params">(node *x,ele u,ele v,ele i)</span></span>&#123;</span><br><span class="line">node *p=np.alloc(); *p=*x;</span><br><span class="line"><span class="keyword">if</span> (u==v)&#123;</span><br><span class="line">p-&gt;sl=a[u].l;</span><br><span class="line">p-&gt;sp=a[u].l*a[u].p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele mid=(u+v)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;=mid) p-&gt;l=upd(p-&gt;l,u,mid,i);</span><br><span class="line"><span class="keyword">else</span> p-&gt;r=upd(p-&gt;r,mid+<span class="number">1</span>,v,i);</span><br><span class="line">maintain(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">qry</span><span class="params">(node *x,ele u,ele v,ele k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u==v) <span class="keyword">return</span> k*a[u].p;</span><br><span class="line">ele mid=(u+v)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k&lt;=x-&gt;l-&gt;sl) <span class="keyword">return</span> qry(x-&gt;l,u,mid,k);</span><br><span class="line"><span class="keyword">return</span> qry(x-&gt;r,mid+<span class="number">1</span>,v,k-x-&gt;l-&gt;sl)+x-&gt;l-&gt;sp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">test</span><span class="params">(ele r,ele g,ele L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> T[r]-&gt;sl&gt;=L &amp;&amp; qry(T[r],<span class="number">0</span>,n<span class="number">-1</span>,L)&lt;=g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">ele d,p,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;d,&amp;p,&amp;l);</span><br><span class="line">a[i]=(jc)&#123;d,p,l&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) b[i]=i;</span><br><span class="line">sort(b,b+n,cmp);</span><br><span class="line">T[<span class="number">0</span>]=build(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) T[i+<span class="number">1</span>]=upd(T[i],<span class="number">0</span>,n<span class="number">-1</span>,b[i]);</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line">ele g,L;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;g,&amp;L);</span><br><span class="line"><span class="keyword">if</span> (T[n]-&gt;sl&lt;L) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele l=<span class="number">0</span>,r=n;</span><br><span class="line"><span class="keyword">while</span> (r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (test(mid,g,L)) r=mid; <span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (test(r,g,L)) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[b[r<span class="number">-1</span>]].d);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2552题解</title>
      <link href="/2018/06/19/loj2552/"/>
      <url>/2018/06/19/loj2552/</url>
      
        <content type="html"><![CDATA[<p><strong>由于代码习惯，下文中用$h _i$表示题目中的$m _i$.</strong></p><p>看到998244353不知道为什么就去想NTT……其实完全没有必要，因为$n$和$C$和$h _i$都非常小.</p><a id="more"></a><p>记$f _{i,j}$表示$i$这个人生命值恰为$j$的概率，直接暴力dp，每次更新复杂度为$\mathcal O(m)$. 这样就可以求出最后每个人生命值的期望.</p><p>考虑怎么求另一问，显然$f _{i,0}$就是$i$这个人死去的概率. 记$\textrm{al} _{i,j}$表示除了$i$以外还活下来$j$个人的概率，显然可以$\mathcal O(n^3)$dp出来. 其实这样做了很多重复的工作，可以直接求出$\textrm{al} _j$表示有$j$个人活下来的概率，那么要除去某个人，相当于是从背包里面删去一个元素，考虑之前的递推式$\textrm{al}^\prime _i=\textrm{al} _i f _{x,0}+\textrm{al} _{i-1}(1-f _{x,0})$，可以得到$\textrm{al} _i=\frac{\textrm{al}^\prime _i-\textrm{al} _{i-1}(1-f _{x,0})}{f _{x,0}}$，这样就能从背包中删去一个元素了. 这部分计算的复杂度就降到了$\mathcal O(n^2)$.</p><p>最后的复杂度是$\mathcal O(Qm+Cn^2)$.</p><p>线性预处理$1,2,\ldots,n$的逆元可以显著减小常数.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 210</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxh 110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line">ele n,Q,k,h[maxn],f[maxn][maxh],g[maxh],a[maxn],al[maxn],tal[maxn],inv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) inv[i]=(ll)(MOD-MOD/i)*inv[MOD%i]%MOD;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,h+i),f[i][h[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line"><span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">ele op;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line"><span class="keyword">if</span> (!op)&#123;</span><br><span class="line">ele i,u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;i,&amp;u,&amp;v); --i;</span><br><span class="line">u=(ll)u*pw(v,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">g[<span class="number">0</span>]=((ll)f[i][<span class="number">1</span>]*u+f[i][<span class="number">0</span>])%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=h[i]; ++j)</span><br><span class="line">g[j]=((ll)f[i][j]*(<span class="number">1</span>+MOD-u)+(ll)f[i][j+<span class="number">1</span>]*u)%MOD;</span><br><span class="line"><span class="built_in">memcpy</span>(f[i],g,<span class="keyword">sizeof</span>(ele)*(h[i]+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i),--a[i];</span><br><span class="line"><span class="built_in">memset</span>(al,<span class="number">0</span>,<span class="keyword">sizeof</span>(al)); al[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i)&#123;</span><br><span class="line">tal[<span class="number">0</span>]=(ll)al[<span class="number">0</span>]*f[a[i]][<span class="number">0</span>]%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=k; ++j)</span><br><span class="line">tal[j]=((ll)al[j]*f[a[i]][<span class="number">0</span>]+(ll)al[j<span class="number">-1</span>]*(<span class="number">1</span>+MOD-f[a[i]][<span class="number">0</span>]))%MOD;</span><br><span class="line"><span class="built_in">memcpy</span>(al,tal,<span class="keyword">sizeof</span>(ele)*(k+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (f[a[i]][<span class="number">0</span>])&#123;</span><br><span class="line">ele tmp=pw(f[a[i]][<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">tal[<span class="number">0</span>]=(ll)al[<span class="number">0</span>]*tmp%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=k; ++j)</span><br><span class="line">tal[j]=(ll)tmp*</span><br><span class="line">(al[j]+MOD-(ll)tal[j<span class="number">-1</span>]*(<span class="number">1</span>+MOD-f[a[i]][<span class="number">0</span>])%MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">memcpy</span>(tal,al+<span class="number">1</span>,<span class="keyword">sizeof</span>(ele)*k);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; ++j)</span><br><span class="line">(ans+=(ll)inv[j+<span class="number">1</span>]*(<span class="number">1</span>+MOD-f[a[i]][<span class="number">0</span>])%MOD*tal[j]%MOD)%=MOD;</span><br><span class="line"><span class="built_in">printf</span>(i?<span class="string">" %d"</span>:<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=h[i]; ++j)</span><br><span class="line">(ans+=(ll)j*f[i][j]%MOD)%=MOD;</span><br><span class="line"><span class="built_in">printf</span>(i?<span class="string">" %d"</span>:<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> DP </tag>
            
            <tag> 背包删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2264题解</title>
      <link href="/2018/06/19/loj2264/"/>
      <url>/2018/06/19/loj2264/</url>
      
        <content type="html"><![CDATA[<p>看了题解才发现loj上面的题面漏了一小部分……uoj上的题面是完整的.</p><a id="more"></a><p>由Lucas定理易知$\binom{n}{m}\equiv 1\pmod{2}\leftrightarrow m\subset n$.</p><p>让$f _{i,j}$表示从$i$位置或$i$位置之后开始的，所有数都包含于$j$的子序列的方案数，转移显然.$i$那一维可以直接滚动，因为题目保证输入的数互不相同，所以复杂度不会超过枚举子集的复杂度，即$\mathcal O(3^{\log _2a})$，也就是$\mathcal O(a^{\log _23})$.</p><p>辣鸡bzoj就非得要我把取模改成减法卡卡常数才让我过……</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 220010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxa (1&lt;&lt;18)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line">ele n,mx,a[maxn],f[maxa],g[maxa];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">add</span><span class="params">(ele x,ele y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x+y&gt;=MOD)?x+y-MOD:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i),mx=max(mx,a[i]);</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>; ~i; --i)&#123;</span><br><span class="line">ele tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=a[i]; s; s=(s<span class="number">-1</span>)&amp;a[i])</span><br><span class="line">tmp=add(tmp,add(f[s],g[s]));</span><br><span class="line">f[a[i]]=add(f[a[i]],tmp);</span><br><span class="line">++g[a[i]];</span><br><span class="line">&#125;</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=mx; ++i) ans=add(ans,f[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 数论 </tag>
            
            <tag> Lucas定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2586题解</title>
      <link href="/2018/06/19/loj2586/"/>
      <url>/2018/06/19/loj2586/</url>
      
        <content type="html"><![CDATA[<p>因为圆是从大往小选的，所以每次选出一个圆，它能删掉的圆一定在两倍半径范围之内，假设我们有一个数据结构可以快速把两倍半径范围内的圆找出来，那么直接对这些圆暴力判交就可以了. </p><a id="more"></a><p>我们考虑这个算法中，每个圆会跟多少个比它大的圆暴力判交. 假设这些圆构成集合$S$，那么$S$中的圆两两不交（否则一定有一个会被另一个先删去）. 于是$S$中的圆最多只有常数个，因此这么做的时间复杂度是得到保障的.</p><p>现在问题变成如何快速找出两倍半径范围内的圆. 理论上kdtree是可以做的，但我也不知道为什么就T飞了……</p><p>事实上，我们不需要真的只找出两倍半径以内的圆，可以划分得更粗略一些. 假设当前选出的圆半径为$r$，我们可以把平面划分成若干个$r\times r$的格子，找出以当前圆为中心的$5\times 5$的网格中的所有圆，时间复杂度的证明同上. 此时，如果$r$是确定的，那么用hashmap套vector就可以维护了. 不过现在$r$是不确定的，如果每次$r$变化都重新划分的话，时间复杂度就会达到$\mathcal O(n^2)$，还不如暴力. 这个时候我们可以划分得再粗略一些，对于半径为$r$的选出的圆，取$k=\max _{2^{k _0}\ge r}k _0$，把平面划分成若干个$2^k\times 2^k$的格子. 这样重新划分的次数为$\mathcal O(\log x)$，时间复杂度的证明仍然类似上面.</p><p>最后的时间复杂度为$\mathcal O(n\log x)$.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300010</span></span><br><span class="line">ele n,w,mx,x[maxn],y[maxn],r[maxn],a[maxn],res[maxn];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ele,<span class="built_in">vector</span>&lt;pair&lt;ele,ele&gt; &gt; &gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(ele i,ele j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (r[i]==r[j])?i&lt;j:r[i]&gt;r[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it=mp.begin(); it!=mp.end(); ++it)</span><br><span class="line">it-&gt;se.clear();</span><br><span class="line">mp.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">mp[x[i]&gt;&gt;w].push_back(make_pair(y[i],i));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it=mp.begin(); it!=mp.end(); ++it)</span><br><span class="line">sort(it-&gt;se.begin(),it-&gt;se.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> ele _sqr(ele x)&#123;</span><br><span class="line"><span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ele i,ele j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~res[j]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (_sqr(x[i]-x[j])+_sqr(y[i]-y[j])&lt;=_sqr(r[i]+r[j])) res[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,x+i,y+i,r+i),mx=max(mx,r[i]);</span><br><span class="line">w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;w)&lt;mx) ++w;</span><br><span class="line">build();</span><br><span class="line"><span class="built_in">memset</span>(res,<span class="number">-1</span>,<span class="keyword">sizeof</span>(res));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) a[i]=i;</span><br><span class="line">sort(a,a+n,cmp1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)&#123;</span><br><span class="line"><span class="keyword">if</span> (~res[a[j]]) <span class="keyword">continue</span>;</span><br><span class="line">ele i=a[j];</span><br><span class="line"><span class="keyword">if</span> (w &amp;&amp; ((<span class="number">1</span>&lt;&lt;w<span class="number">-1</span>)&gt;=r[i]))&#123;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;w<span class="number">-1</span>)&gt;=r[i]) --w;</span><br><span class="line">clear();</span><br><span class="line">build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=(x[i]&gt;&gt;w)<span class="number">-2</span>; k&lt;=(x[i]&gt;&gt;w)+<span class="number">2</span>; ++k)&#123;</span><br><span class="line"><span class="keyword">if</span> (mp.find(k)==mp.end()) <span class="keyword">continue</span>;</span><br><span class="line">ele u=lower_bound(mp[k].begin(),mp[k].end(),make_pair(y[i]-r[i]*<span class="number">2</span>,<span class="number">0l</span>l))</span><br><span class="line">-mp[k].begin();</span><br><span class="line">ele v=upper_bound(mp[k].begin(),mp[k].end(),make_pair(y[i]+r[i]*<span class="number">2</span>,n))</span><br><span class="line">-mp[k].begin();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=u; p&lt;v; ++p) test(i,mp[k][p].se);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">printf</span>(i?<span class="string">" %lld"</span>:<span class="string">"%lld"</span>,res[i]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 粗略划分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2585题解</title>
      <link href="/2018/06/19/loj2585/"/>
      <url>/2018/06/19/loj2585/</url>
      
        <content type="html"><![CDATA[<p>算是一个我不太熟悉的技巧吧……感觉大家都会，就我一个考场上没想出来.</p><a id="more"></a><p>单独考虑某一种商店类型到居住点的距离，它关于坐标的函数一定是一条折线，而且每一段的斜率都只可能是1或-1. 因为最后相当于要把一堆折线取max，所以每一条折线可以看作是一堆射线，即斜率为1的段只考虑右端点，斜率为-1的段只考虑左端点. 这样一来，查询就是给定某个横坐标求这个横坐标上各条射线的最高点，修改就是加入若干条射线，删除若干条射线.</p><p>考虑用一个数据结构维护这些射线，我的第一反应是lych线段树，但是它不支持删除. 注意到斜率只有两种，而相同斜率的射线方向都是一样的，我们可以把射线按斜率分开，分别按端点横坐标排序，同时维护截距. 那么每次查询其实就是查前缀/后缀的最大截距，插入和删除就是简单的单点修改，用一个平衡树来维护就可以了.</p><p>复杂度是一个$\log$的，但是常数应该比较大，截止到写这篇题解的时候，我的代码是loj上AC代码里面最慢的.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 500000</span></span><br><span class="line"><span class="keyword">const</span> ele INF=<span class="number">2e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evt</span>&#123;</span></span><br><span class="line">ele ty,x,t,a;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(evt b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ask</span>&#123;</span></span><br><span class="line">ele l,y,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(ask b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ele i,b,mx,p;</span><br><span class="line">node *l,*r;</span><br><span class="line">node()&#123;</span><br><span class="line">p=rand(); l=r=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">cmp</span><span class="params">(ele i,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i!=<span class="keyword">this</span>-&gt;i) <span class="keyword">return</span> i&lt;<span class="keyword">this</span>-&gt;i?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (b!=<span class="keyword">this</span>-&gt;b) <span class="keyword">return</span> b&lt;<span class="keyword">this</span>-&gt;b?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">struct</span> <span class="title">mempool</span>&#123;</span></span><br><span class="line">T *s,*t;</span><br><span class="line">mempool():s(<span class="literal">NULL</span>),t(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T* <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s==t &amp;&amp; (t=(s=<span class="keyword">new</span> T[K])+K),s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ele n,k,Q,tot,cnt[maxn],res[maxn];</span><br><span class="line">evt e[maxn];</span><br><span class="line">ask q[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;ele&gt; S[maxn];</span><br><span class="line">mempool&lt;node&gt; np;</span><br><span class="line">node *r1,*r2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(node *x)</span></span>&#123;</span><br><span class="line">x-&gt;mx=x-&gt;b;</span><br><span class="line"><span class="keyword">if</span> (x-&gt;l) x-&gt;mx=max(x-&gt;mx,x-&gt;l-&gt;mx);</span><br><span class="line"><span class="keyword">if</span> (x-&gt;r) x-&gt;mx=max(x-&gt;mx,x-&gt;r-&gt;mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">merge</span><span class="params">(node *a,node *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">if</span> (a-&gt;p&gt;b-&gt;p)&#123;</span><br><span class="line">a-&gt;r=merge(a-&gt;r,b);</span><br><span class="line">maintain(a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b-&gt;l=merge(a,b-&gt;l);</span><br><span class="line">maintain(b);</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *x,ele k,ele b1,node*&amp;a,node*&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)&#123; a=b=<span class="literal">NULL</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (!x-&gt;cmp(k,b1))&#123;</span><br><span class="line">split(x-&gt;l,k,b1,a,b);</span><br><span class="line">x-&gt;l=b; maintain(x);</span><br><span class="line">b=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">split(x-&gt;r,k,b1,a,b);</span><br><span class="line">x-&gt;r=a; maintain(x);</span><br><span class="line">a=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node* <span class="title">ins</span><span class="params">(node *x,ele i,ele b)</span></span>&#123;</span><br><span class="line">node *p=np.alloc();</span><br><span class="line">p-&gt;i=i; p-&gt;b=b; maintain(p);</span><br><span class="line">node *u,*v;</span><br><span class="line">split(x,i,b,u,v);</span><br><span class="line">x=merge(u,p); x=merge(x,v);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node* <span class="title">del</span><span class="params">(node *x,ele i,ele b)</span></span>&#123;</span><br><span class="line">node *u,*v,*w;</span><br><span class="line">split(x,i,b,v,w);</span><br><span class="line">split(v,i,b<span class="number">-1</span>,u,v);</span><br><span class="line"><span class="keyword">if</span> (v) v=merge(v-&gt;l,v-&gt;r);</span><br><span class="line"><span class="keyword">else</span> v=<span class="literal">NULL</span>;</span><br><span class="line">x=merge(u,v); x=merge(x,w);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(ele x,ele y)</span></span>&#123;</span><br><span class="line">ele L=(y-x)/<span class="number">2</span>;</span><br><span class="line">r1=ins(r1,x+L,-x); r2=ins(r2,y-L,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(ele x,ele y)</span></span>&#123;</span><br><span class="line">ele L=(y-x)/<span class="number">2</span>;</span><br><span class="line">r1=del(r1,x+L,-x); r2=del(r2,y-L,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;k,&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">ele x,t,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x,&amp;t,&amp;a,&amp;b); --t;</span><br><span class="line">e[i&lt;&lt;<span class="number">1</span>]=(evt)&#123;<span class="number">1</span>,x,t,a&#125;;</span><br><span class="line">e[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(evt)&#123;<span class="number">-1</span>,x,t,b+<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+n*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Q; ++i)&#123;</span><br><span class="line">ele l,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;y);</span><br><span class="line">q[i]=(ask)&#123;l,y,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(q,q+Q);</span><br><span class="line">tot=<span class="number">0</span>; <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">r1=r2=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i) S[i].insert(-INF),S[i].insert(INF),ins(-INF,INF);</span><br><span class="line">ele j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Q; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (; j&lt;n*<span class="number">2</span> &amp;&amp; e[j].a&lt;=q[i].y; ++j)</span><br><span class="line"><span class="keyword">if</span> (~e[j].ty)&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt[e[j].t]) ++tot; ++cnt[e[j].t];</span><br><span class="line">S[e[j].t].insert(e[j].x);</span><br><span class="line"><span class="keyword">auto</span> it=S[e[j].t].find(e[j].x),it1=it,it2=it;</span><br><span class="line">--it1; ++it2;</span><br><span class="line">del(*it1,*it2); ins(*it1,*it); ins(*it,*it2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">--cnt[e[j].t]; <span class="keyword">if</span> (!cnt[e[j].t]) --tot;</span><br><span class="line"><span class="keyword">auto</span> it=S[e[j].t].find(e[j].x),it1=it,it2=it;</span><br><span class="line">--it1; ++it2;</span><br><span class="line">del(*it1,*it); del(*it,*it2); ins(*it1,*it2);</span><br><span class="line">S[e[j].t].erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tot!=k) res[q[i].id]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line">node *u,*v;</span><br><span class="line">split(r1,q[i].l<span class="number">-1</span>,INF,u,v);</span><br><span class="line">ans=max(ans,v-&gt;mx+q[i].l);</span><br><span class="line">r1=merge(u,v);</span><br><span class="line">split(r2,q[i].l,INF,u,v);</span><br><span class="line">ans=max(ans,u-&gt;mx-q[i].l);</span><br><span class="line">r2=merge(u,v);</span><br><span class="line">res[q[i].id]=ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Q; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 维护折线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6059题解</title>
      <link href="/2018/06/16/loj6059/"/>
      <url>/2018/06/16/loj6059/</url>
      
        <content type="html"><![CDATA[<p>令$f _{i,j,k}$表示$i$位，模$p$余$j$，数字和恰好为$k$的数的个数，那么可以写出递推式</p><a id="more"></a><script type="math/tex; mode=display">f _{i+1,j,k}=\sum _{10j _1+j _2\equiv j\pmod{p},~k _1+k _2=k}f _{i,j _1,k _1}</script><p>可以发现这很像一个卷积的形式，但是$j$这一维很难用多项式来优化. 这个时候可以考虑倍增，列出更一般的递推式</p><script type="math/tex; mode=display">f _{i _1+i _2,j,k}=\sum _{10^{i _2}j _1+j _2\equiv j\pmod{p},~k _1+k _2=k}f _{i _1,j _1,k _1}f _{i _2,j _2,k _2}</script><p>这样让$F _i(x,y)=\sum f _{i,j,k}x^jy^k$就可以用倍增+NTT来加速了，（$x$直接暴力卷积，$y$用NTT优化）.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2048</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxp 55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line">ele n,p,m,a[maxp][maxn],b[maxp][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ele K,ele n,ele *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele f[maxn];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">f[i]=f[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) f[i]+=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;f[i]) swap(y[i],y[f[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;n; p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">ele o=pw(g,(MOD<span class="number">-1</span>)/p/<span class="number">2</span>);</span><br><span class="line">o=~K?o:pw(o,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=(p&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ele o1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;i+p; ++j,o1=(ll)o1*o%MOD)&#123;</span><br><span class="line">ele u=y[j],v=(ll)y[j+p]*o1%MOD;</span><br><span class="line">y[j]=(u+v)%MOD;</span><br><span class="line">y[j+p]=(u-v+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~K)&#123;</span><br><span class="line">ele invn=pw(n,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) y[i]=(ll)y[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(ele a[maxp][maxn],ele b[maxp][maxn],ele k)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele c[maxp][maxn],d[maxp][maxn],e[maxp][maxn];</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">ele tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp&lt;m+m<span class="number">-1</span>) tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d)); <span class="built_in">memcpy</span>(e,b,<span class="keyword">sizeof</span>(e));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; ++i)&#123;</span><br><span class="line">ele j=i*k%p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;m; ++r) (d[j][r]+=a[i][r])%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; ++i) NTT(<span class="number">1</span>,tmp,d[i]),NTT(<span class="number">1</span>,tmp,e[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;p; ++j)&#123;</span><br><span class="line">ele k=(i+j)%p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;tmp; ++r)</span><br><span class="line">(c[k][r]+=(ll)d[i][r]*e[j][r]%MOD)%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; ++i) NTT(<span class="number">-1</span>,tmp,a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=m; j&lt;tmp; ++j) a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;m); ++m;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span> &amp;&amp; i&lt;m; ++i) b[i%p][i]+=<span class="number">1</span>;</span><br><span class="line">ele k=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (; n; n&gt;&gt;=<span class="number">1</span>,mul(b,b,k),k=k*k%p)</span><br><span class="line"><span class="keyword">if</span> (n&amp;<span class="number">1</span>) mul(a,b,k);</span><br><span class="line">ele cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) (cnt+=a[<span class="number">0</span>][i])%=MOD,<span class="built_in">printf</span>(i?<span class="string">" %d"</span>:<span class="string">"%d"</span>,cnt);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj5338题解</title>
      <link href="/2018/06/15/bzoj5338/"/>
      <url>/2018/06/15/bzoj5338/</url>
      
        <content type="html"><![CDATA[<p>智商有点下线想复杂了.</p><a id="more"></a><p>我的做法是考虑树剖，这样每个查询可以看做序列上至多$\mathcal O(\log n)$段的查询.最大异或值可以用trie来做，那么就可以把询问离线然后在线段树上对trie做启发式合并了. 其实可以不用写启发式合并，写一个类似线段树合并的东西. 这样做是三个$\log$的，但是树剖的那个$\log$很小，所以可以过.</p><p>但是其实只需要用可持久化trie做就可以了……</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 31</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">ele v;</span><br><span class="line">edge *nxt;</span><br><span class="line">&#125;ep[maxn&lt;&lt;<span class="number">1</span>],*ecnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tn</span>&#123;</span></span><br><span class="line">tn *c[<span class="number">2</span>];</span><br><span class="line">&#125;tnp[maxn*(maxk+<span class="number">2</span>)],*tncnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">tn *t;</span><br><span class="line"><span class="built_in">vector</span>&lt;ele&gt; v;</span><br><span class="line">node *l,*r;</span><br><span class="line">&#125;np[maxn&lt;&lt;<span class="number">2</span>],*ncnt;</span><br><span class="line">ele n,Q,tcnt,v[maxn],seq[maxn],dfn[maxn],fa[maxn],size[maxn],dep[maxn],r[maxn],a[maxn],res[maxn];</span><br><span class="line">edge *h[maxn],*hc[maxn];</span><br><span class="line">node *root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ele u,ele v)</span></span>&#123;</span><br><span class="line">edge *p=ecnt++;</span><br><span class="line">p-&gt;v=v; p-&gt;nxt=h[u];</span><br><span class="line">h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">getv</span><span class="params">(ele x,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tn* <span class="title">ins</span><span class="params">(tn *x,ele y,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)&#123;</span><br><span class="line">x=tncnt++;</span><br><span class="line">x-&gt;c[<span class="number">0</span>]=x-&gt;c[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (~i) x-&gt;c[getv(y,i)]=ins(x-&gt;c[getv(y,i)],y,i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tn* <span class="title">merge</span><span class="params">(tn *x,tn *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span> (!y) <span class="keyword">return</span> x;</span><br><span class="line">x-&gt;c[<span class="number">0</span>]=merge(x-&gt;c[<span class="number">0</span>],y-&gt;c[<span class="number">0</span>]);</span><br><span class="line">x-&gt;c[<span class="number">1</span>]=merge(x-&gt;c[<span class="number">1</span>],y-&gt;c[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">build</span><span class="params">(ele l,ele r)</span></span>&#123;</span><br><span class="line">node *p=ncnt++;</span><br><span class="line">p-&gt;v.clear();</span><br><span class="line"><span class="keyword">if</span> (l==r) p-&gt;t=ins(<span class="literal">NULL</span>,v[seq[l]],maxk),p-&gt;l=p-&gt;r=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p-&gt;l=build(l,mid);</span><br><span class="line">p-&gt;r=build(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(node *x,ele a,ele b,ele l,ele r,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=a &amp;&amp; b&lt;=r) x-&gt;v.push_back(i);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ele mid=(a+b)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=mid) upd(x-&gt;l,a,mid,l,r,i);</span><br><span class="line"><span class="keyword">if</span> (mid&lt;r) upd(x-&gt;r,mid+<span class="number">1</span>,b,l,r,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(ele p,ele i)</span></span>&#123;</span><br><span class="line">size[i]=<span class="number">1</span>;</span><br><span class="line">hc[i]=<span class="literal">NULL</span>;</span><br><span class="line">fa[i]=p;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p)&#123;</span><br><span class="line">dep[j-&gt;v]=dep[i]+<span class="number">1</span>;</span><br><span class="line">dfs1(i,j-&gt;v);</span><br><span class="line">size[i]+=size[j-&gt;v];</span><br><span class="line"><span class="keyword">if</span> (!hc[i] || size[j-&gt;v]&gt;size[hc[i]-&gt;v]) hc[i]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(ele p,ele i)</span></span>&#123;</span><br><span class="line">dfn[i]=tcnt; seq[tcnt++]=i;</span><br><span class="line"><span class="keyword">if</span> (hc[i])&#123;</span><br><span class="line">r[hc[i]-&gt;v]=r[i];</span><br><span class="line">dfs2(i,hc[i]-&gt;v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (edge *j=h[i]; j; j=j-&gt;nxt)</span><br><span class="line"><span class="keyword">if</span> (j-&gt;v!=p &amp;&amp; j!=hc[i])&#123;</span><br><span class="line">r[j-&gt;v]=j-&gt;v;</span><br><span class="line">dfs2(i,j-&gt;v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">lca</span><span class="params">(ele x,ele y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (r[x]!=r[y])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[r[x]]&lt;dep[r[y]]) swap(x,y);</span><br><span class="line">x=fa[r[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ele x,ele y,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~x &amp;&amp; dep[x]&gt;dep[y])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[r[x]]&gt;dep[y]) upd(root,<span class="number">0</span>,n<span class="number">-1</span>,dfn[r[x]],dfn[x],i);</span><br><span class="line"><span class="keyword">else</span> upd(root,<span class="number">0</span>,n<span class="number">-1</span>,dfn[y]+<span class="number">1</span>,dfn[x],i);</span><br><span class="line">x=fa[r[x]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ele <span class="title">qry</span><span class="params">(tn *x,ele y,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!~i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ele t=getv(y,i)^<span class="number">1</span>;</span><br><span class="line">ele ans=x-&gt;c[t]?qry(x-&gt;c[t],y,i<span class="number">-1</span>)+(<span class="number">1</span>&lt;&lt;i):qry(x-&gt;c[t^<span class="number">1</span>],y,i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(node *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x-&gt;l)&#123;</span><br><span class="line">dfs3(x-&gt;l);</span><br><span class="line">dfs3(x-&gt;r);</span><br><span class="line">x-&gt;t=merge(x-&gt;l-&gt;t,x-&gt;r-&gt;t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;x-&gt;v.size(); ++j)&#123;</span><br><span class="line">ele i=x-&gt;v[j];</span><br><span class="line">res[i]=max(res[i],qry(x-&gt;t,a[i],maxk));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,v+i);</span><br><span class="line">ecnt=ep; <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">ele u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v); --u,--v;</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dep[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">dfs1(<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">tcnt=<span class="number">0</span>; r[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">dfs2(<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">ncnt=np; tncnt=tnp;</span><br><span class="line">root=build(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Q; ++i)&#123;</span><br><span class="line">ele op,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y); --x;</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">a[i]=y;</span><br><span class="line">upd(root,<span class="number">0</span>,n<span class="number">-1</span>,dfn[x],dfn[x]+size[x]<span class="number">-1</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op==<span class="number">2</span>)&#123;</span><br><span class="line">--y; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">a[i]=z;</span><br><span class="line">ele w=lca(x,y);</span><br><span class="line">upd(x,w,i); upd(y,w,i);</span><br><span class="line">upd(root,<span class="number">0</span>,n<span class="number">-1</span>,dfn[w],dfn[w],i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span>(res));</span><br><span class="line">dfs3(root);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> bzoj </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> trie </tag>
            
            <tag> dsu on a tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4314题解</title>
      <link href="/2018/06/15/bzoj4314/"/>
      <url>/2018/06/15/bzoj4314/</url>
      
        <content type="html"><![CDATA[<p>定义$f(x,y)=\prod _{i=0}^{n-1}(1+x^iy)$，这里做乘法的时候$x$是模$n$的循环卷积，而y是普通卷积. 那么答案就是$[x^0y^k]f(x,y)$.</p><a id="more"></a><p>这个循环卷积不好处理，注意到DFT本质上就是一个循环卷积，我们可以考虑使用IDFT，答案就是</p><script type="math/tex; mode=display">\frac{1}{n}[y^k]\sum f(\omega _n^i,y)\omega _n^{-i\cdot 0}</script><p>想办法化简这个式子</p><script type="math/tex; mode=display">\begin{aligned}&\sum f(\omega _n^i,y)\\\\=&\sum _{i=0}^{n-1}\prod _{j=0}^{n-1}(1+\omega _n^{ij}y)\\\\=&\sum _{d|n}\sum _{(i,n)=d}\prod _{j=0}^{n-1}(1+(\omega _{n/d}^{i/d})^jy)\\\\=&\sum _{d|n}\sum _{(i,n)=d}\prod _{j=0}^{n-1}(1+\omega _{n/d}^jy)\\\\=&\sum _{d|n}\sum _{(i,n)=d}(\prod _{j=0}^{n/d-1}(1+\omega _{n/d}^jy))^d\end{aligned}</script><p>这个时候要用到一个结论</p><script type="math/tex; mode=display">\prod _{i=0}^{n-1}(x-\omega _n^iy)=x^n-y^n</script><p>证明的话，把$x=\omega _n^iy(i=0,1,\ldots,n-1)$带入，发现两边都是0，而两边都是$n$次的，说明这是个恒等式.</p><p>把$x=-1$带入上式，两边再乘上$(-1)^n$，就可以得到</p><script type="math/tex; mode=display">\prod _{i=0}^{n-1}(1+\omega _n^iy)=1-(-y)^n</script><p>回到我们原来要推的那个式子，可以变形为</p><script type="math/tex; mode=display">\begin{aligned}&\sum _{d|n}\sum _{(i,n)=d}(\prod _{j=0}^{n/d-1}(1+\omega _{n/d}^jy))^d\\\\=&\sum _{d|n}\sum _{(i,n)=d}(1-(-y)^{n/d})^d\\\\=&\sum _{d|n}(1-(-y)^{n/d})^d\varphi(n/d)\end{aligned}</script><p>要求这个式子中$y^k$的系数，直接用二项式定理展开就可以了. 组合数可以把阶乘分段打表来算.</p><p>可以注意到，$k$的范围扩大到$10^9$也是可以做的，要求的余数不是0而是一个由输入给定的值也是可以做的（当然式子需要再推一推）.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 1010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 400000</span></span><br><span class="line"><span class="keyword">const</span> ele tf[]=&#123;&#125;;<span class="comment">//这里省略阶乘的表</span></span><br><span class="line">ele n,k,phi[maxk];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">get_phi</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line">ele ans=n,tmp=n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">if</span> (tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">ans/=i; ans*=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp%i==<span class="number">0</span>) tmp/=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp&gt;<span class="number">1</span>) ans/=tmp,ans*=tmp<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">fac</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line">ele ans=tf[n/K];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n/K*K+<span class="number">1</span>; i&lt;=n; ++i) ans=(ll)ans*i%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">ifac</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pw(fac(n),MOD<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">C</span><span class="params">(ele n,ele m)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ll)fac(n)*ifac(m)%MOD*ifac(n-m)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">calc</span><span class="params">(ele d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k%(n/d)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ele c=k/(n/d);</span><br><span class="line">ele ans=(ll)C(d,c)*phi[n/d]%MOD;</span><br><span class="line"><span class="keyword">if</span> (n/d%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; c%<span class="number">2</span>) ans=ans?MOD-ans:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) phi[i]=get_phi(i);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">1</span>; d*d&lt;=n; ++d)</span><br><span class="line"><span class="keyword">if</span> (n%d==<span class="number">0</span>)&#123;</span><br><span class="line">(ans+=calc(d))%=MOD;</span><br><span class="line"><span class="keyword">if</span> (d*d!=n) (ans+=calc(n/d))%=MOD;</span><br><span class="line">&#125;</span><br><span class="line">ans=(ll)ans*pw(n,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> bzoj </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 数论 </tag>
            
            <tag> DFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4162题解</title>
      <link href="/2018/06/13/bzoj4162/"/>
      <url>/2018/06/13/bzoj4162/</url>
      
        <content type="html"><![CDATA[<p>几年前刚学矩阵快速幂的时候点开了这道题，写了半天始终TLE，一看题解发现完全看不懂……时隔多年终于A掉了这道题.</p><a id="more"></a><p><strong>因为代码习惯，下文中用$n$表示题目中的$k$，用$s$表示题目中的$n$.</strong></p><p>设$M$的特征多项式为$f(\lambda)$，设$\lambda^s=f(\lambda)Q(\lambda)+R(\lambda)$，其中$\deg R&lt;\deg f$，那么因为$f(M)=0$，所以$M^s=R(M)$.</p><p>求特征多项式的话，可以把$\lambda=0,1,\ldots,n$带入$\det(M-\lambda I)$，然后插值，计算$R(\lambda)$就直接在模${f(\lambda)}$意义下快速幂就行了.</p><p>发现多项式取模的一个比较简单的$\mathcal O(n^2)$写法，设$f(\lambda)=\sum _{i=0}^na _i\lambda^i$，那么$M^n=-\sum _{i=0}^{n-1}\frac{a _i}{a _n}M^i$，利用这个把次数不小于$\deg f$的项全部变成次数小于$\deg f$的项就可以了.</p><p>代码写得比较凌乱.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">ele n,m,a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">I</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>+=(matrix&amp;a,<span class="keyword">const</span> matrix&amp;b)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.m; ++j) (a.a[i][j]+=b.a[i][j])%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(matrix&amp;a,ele b)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.m; ++j) a.a[i][j]=(ll)a.a[i][j]*b%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(matrix&amp;a,<span class="keyword">const</span> matrix&amp;b)&#123;</span><br><span class="line"><span class="keyword">static</span> matrix c;</span><br><span class="line"><span class="built_in">memset</span>(c.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.a));</span><br><span class="line">c.n=a.n; c.m=b.m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.m; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;b.m; ++k)</span><br><span class="line">(c.a[i][k]+=(ll)a.a[i][j]*b.a[j][k]%MOD)%=MOD;</span><br><span class="line">a=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[maxm];</span><br><span class="line">ele n,f[maxn][maxn],a[maxn][maxn],b[maxn][maxn],S[maxn][maxn],fac[maxn],ifac[maxn],c[maxn],d[maxn],e[maxn];</span><br><span class="line">matrix A,B,C;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">pw</span><span class="params">(ele a,ele x)</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>,tmp=a%MOD;</span><br><span class="line"><span class="keyword">for</span> (; x; x&gt;&gt;=<span class="number">1</span>,tmp=(ll)tmp*tmp%MOD)</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1</span>) ans=(ll)ans*tmp%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">det</span><span class="params">(ele n,ele a[maxn][maxn])</span></span>&#123;</span><br><span class="line">ele ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; ++j)</span><br><span class="line"><span class="keyword">while</span> (a[j][i])&#123;</span><br><span class="line">ans=MOD-ans;</span><br><span class="line">ele tmp=a[i][i]/a[j][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=i; k&lt;n; ++k)&#123;</span><br><span class="line">(a[i][k]+=MOD-(ll)a[j][k]*tmp%MOD)%=MOD;</span><br><span class="line">swap(a[i][k],a[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) ans=(ll)ans*a[i][i]%MOD;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(ele *a,ele *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ele t[maxn];</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; ++j) (t[i+j]+=(ll)a[i]*b[j]%MOD)%=MOD;</span><br><span class="line">ele invcn=pw(c[n],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n*<span class="number">2</span>; i&gt;=n; --i)&#123;</span><br><span class="line">ele tmp=(ll)invcn*t[i]%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">(t[i-j]+=MOD-(ll)tmp*c[n-j]%MOD)%=MOD;</span><br><span class="line">t[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(a,t,<span class="keyword">sizeof</span>(ele)*(n+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,s,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">f[<span class="number">0</span>][i]=det(n,b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j) (a[j][j]+=MOD<span class="number">-1</span>)%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n-i; ++j) f[i][j]=(f[i<span class="number">-1</span>][j+<span class="number">1</span>]-f[i<span class="number">-1</span>][j]+MOD)%MOD;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) (a[i][i]+=n+<span class="number">1</span>)%=MOD;</span><br><span class="line"><span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">S[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">S[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; ++j)</span><br><span class="line">S[i][j]=(S[i<span class="number">-1</span>][j<span class="number">-1</span>]+(ll)S[i<span class="number">-1</span>][j]*(i<span class="number">-1</span>)%MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) fac[i]=(ll)fac[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">ifac[n]=pw(fac[n],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>; ~i; --i) ifac[i]=(ll)ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i,ct=<span class="number">1</span>; ~j; --j,ct=MOD-ct)</span><br><span class="line">(c[j]+=(ll)S[i][j]*f[i][<span class="number">0</span>]%MOD*ifac[i]%MOD*ct%MOD)%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d)); d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e)); e[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">ele L=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=L<span class="number">-1</span>; ~i; --i)&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i]==<span class="string">'1'</span>) mul(e,d);</span><br><span class="line">mul(d,d);</span><br><span class="line">&#125;</span><br><span class="line">A.n=A.m=n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j) A.a[i][j]=a[i][j];</span><br><span class="line">B.n=B.m=n; B.I();</span><br><span class="line">C.n=C.m=n; <span class="built_in">memset</span>(C.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(C.a));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i])&#123;</span><br><span class="line">B*=e[i];</span><br><span class="line">C+=B;</span><br><span class="line">B*=pw(e[i],MOD<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line">B*=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line"><span class="built_in">printf</span>(j?<span class="string">" %d"</span>:<span class="string">"%d"</span>,C.a[i][j]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> bzoj </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6375题解</title>
      <link href="/2018/06/11/loj6375/"/>
      <url>/2018/06/11/loj6375/</url>
      
        <content type="html"><![CDATA[<p>好久没怎么做题了，做道水题练练手.</p><a id="more"></a><script type="math/tex; mode=display">\begin{aligned}&\sum\mathrm{lcm}(i,n)\\\\=&n\sum\frac{i}{\gcd(i,n)}\\\\=&n\sum _{d|n}\frac{1}{d}\sum _{i=1}^{n/d}di[\gcd(i,n/d)=1]\end{aligned}</script><p>记$f(n)=\sum _{i=1}^ni[\gcd(i,n)=1]$，那么当$n&gt;1$的时候均有$f(n)=\frac{n\varphi(n)}{2}$，而答案即为$n\sum _{d|n}f(\frac{n}{d})$.</p><p>预处理欧拉函数就可以了.</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ele long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line">ele n,pcnt,plst[maxn],phi[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">f</span><span class="params">(ele n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n==<span class="number">1</span>?<span class="number">1</span>:n*phi[n]/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"lcm.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); freopen(<span class="string">"lcm.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">pcnt=<span class="number">0</span>; phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxn; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (!flag[i]) plst[pcnt++]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;pcnt &amp;&amp; i*plst[j]&lt;maxn; ++j)&#123;</span><br><span class="line">flag[i*plst[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i%plst[j]) phi[i*plst[j]]=phi[i]*phi[plst[j]];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*plst[j]]=phi[i]*plst[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ele T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">ele ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ele d=<span class="number">1</span>; d*d&lt;=n; ++d)</span><br><span class="line"><span class="keyword">if</span> (n%d==<span class="number">0</span>)&#123;</span><br><span class="line">ans+=f(n/d);</span><br><span class="line"><span class="keyword">if</span> (d*d!=n) ans+=f(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> loj </tag>
            
            <tag> 数论 </tag>
            
            <tag> 智力康复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2018/06/10/test/"/>
      <url>/2018/06/10/test/</url>
      
        <content type="html"><![CDATA[<p>其它测试</p><p>$E=mc^2$</p><a id="more"></a><p>$\bold{bold}\textrm{normal}$</p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOI2018退役失败记</title>
      <link href="/2018/05/02/gdoi2018/"/>
      <url>/2018/05/02/gdoi2018/</url>
      
        <content type="html"><![CDATA[<p><del>在退役的边缘试探.</del></p><p>居然rk2进入A队了，rp大概用光了吧……<del>你看看你最近抽卡抽出来的都是什么鬼东西！</del></p><a id="more"></a><h2 id="D0"><a href="#D0" class="headerlink" title="D0"></a>D0</h2><p>最后看了看板子. </p><h2 id="D1"><a href="#D1" class="headerlink" title="D1"></a>D1</h2><p>早上起来感觉有点小困，但是因为要比赛了所以比较亢奋，总的来讲精神还算好. </p><p>发现有大样例真是好评！开考之后我首先从头到尾读了一遍题目，T1的题意我纠结了一会才弄懂，感觉是个水题，T2感觉比较可做但是暂时还没什么想法，T3感觉可做而且有点想法，但是觉得可能会难打，T4似乎跟之前纪中集训的一道题很像.</p><p>于是我就先切掉了T1，随手出了几个数据检查了一下，随了组大数据发现没RE什么的，就去搞T2，然后发现自己并不会做……我先暂时放弃了T2去看T3，发现是个三维数点，码了暴力和cdq分治套树状数组，放在一遍对拍，接着没花多少时间想出了T4，写了一发分治NTT，过了大样例. 这个时候我感觉300已经很不错了，就从头到尾静态差错了一遍. 大概到10:55的时候我感觉比较稳了，就去开T2，随便乱想了个做法，发现可以过所有的大样例，但是我怎么想都觉得是错的. 这个时候大概只剩30min了，想了想还是不写暴力去检查代码了，既然能过大样例应该暴力分还是有的？</p><p>中午饭堂人特别多，跟着大家出去吃了，结果菜咸得吃不下……</p><p>下午听评讲非常紧张，都没什么心情上去交流. 听说我T2的做法是对的？<del>那岂不是可以AK？</del>成绩单发下来，发现我真的AK了……</p><p>晚上继续看板子，有了400分感觉压力没那么打了. <del>想起来比赛前我爸还跟我说反正不可能AK的blahblah……</del></p><h2 id="D2"><a href="#D2" class="headerlink" title="D2"></a>D2</h2><p>按照惯例今天应该会变难，进考场之前我已经做好了打暴力的准备.</p><p>还是按照惯例从头到尾看一遍题目. T1好像就是一个sb二合一，T2说不定可以dp/多项式什么的，T3保证高度随机那应该跟最长上升/下降子序列有关，可能不是很好想，T4……还是扔最后做吧……</p><p>我先写完了T1，过了大样例还是感觉比较虚，怕爆longlong什么的，就从头到尾仔细算了一下. 接下来我推了一下T2的式子，发现并不需要多项式，可以直接$\mathcal O(nk^2)$dp. 写完T2过了大样例之后感觉还能写个暴力，就顺便对拍了一下，这样应该就比较稳了. 开T3之后我卡住了一段时间，发现有贡献的左端点和右端点都期望只有$\mathcal O(\log n)$个，为了缩小常数我写了一个zkw，发现就算是极限数据还是跑得很快. 到这个时候大概只过了2h的样子，不过我想着D2终究会难一些，再怎么样300也很不错了，于是就没打算花太多时间做T4，简单地写了一个$\mathcal O(qn^3)$的floyd求最小环. T4的大样例取消了，我只好自己出一些小数据测一下，感觉不是很稳，但也没办法. 剩下那2h我主要还是在各种检查代码<del>，感觉整个赛场估计就我写代码的时间最短了</del>.</p><p>出考场的时候评委居然问我今天能不能AK……害怕……</p><p>中午果断回酒店点外卖.</p><p>下午听讲评没有前一天那么紧张了，还上去讲了一点东西. <del>后来发现自己讲的一个东西是错的，身败名裂……</del>最后发现跟预期分数一样，100+100+100+50=350.</p><h2 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h2><p>反而有点紧张，前两天运气实在太好了，直接冲上rk2，要是D3考差了岂不是糟蹋了之前的运气？</p><p>D3没有大样例了感觉药丸. 看了一遍题，T1没什么想法，T2会50，T3可能可以想一想，T4大概不怎么可做. 我先写完了T2，仔细想了想感觉T3是个三合一，但是每一部分都比较好写，就写了一下，整整5k……这道题非常地不好拍，我先把dp改成暴力，没拍出什么错. 我纠结了一下还是写了一个纯暴力，结果一拍就拍出错了. 改完之后就怎么也查不出错误了. 但是一方面这道题随机数据不怎么强，另一方面我一开始退出来的结论很难通过对拍验证，我就前前后后检查了很长一段时间. 差不多只剩1h的时候我开始想T1，结果想出来不够时间打了，还好60分非常好写.</p><p>出考场之后，cjb：怎么样写完了吗？我：？？？</p><p>下午一回来已经看见有评委拿着折算分的表了，我拿到了预期的210分，最后的折算分仍然是rk2. rk3只比我低0.5分左右，真是惊险……</p><h2 id="D4"><a href="#D4" class="headerlink" title="D4"></a>D4</h2><p>上去领了四次奖……（GDOI+校团体+市团体+省队）<del>拿奖拿到手软!</del>今天广州市是市团体第一名，作为今年广州市的第一名有幸上台捧杯.</p><p>搞了这么多年终于进省队了，还是rk2，也算是努力有了一定的回报吧. 不过也不能满足于此，接下来的apio和noi还要继续加油.</p><hr><p>虽然有很多人喷今年的题目辣鸡，我感觉总的来讲题目质量还是很不错的，不小心出到了原题那也是没办法的事，反正那几道题都挺不错的……n合一有一点点让人不爽，但至少今年这些题目打起来都挺舒服的.</p>]]></content>
      
      
      
        <tags>
            
            <tag> stuffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-4纪中集训总结</title>
      <link href="/2018/04/10/2018-4jz/"/>
      <url>/2018/04/10/2018-4jz/</url>
      
        <content type="html"><![CDATA[<p>我好菜啊……</p><a id="more"></a><h2 id="4-10"><a href="#4-10" class="headerlink" title="4-10"></a>4-10</h2><p>炸了炸了……</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>我算是想出来了，但是考场上没有调出来，一个是因为感觉比较工业所以总是写一会纠结一会要不要写下去，另外也是因为有些细节我稍微想复杂了一些. 大概思路是，从小到大枚举$a _S$，与此同时从大到小枚举$b _S$，每次就尝试把$b _S$减少1，也就是删掉$b _x=b _S$的$x$，然后看看还有没有点数不小于$k$的联通块. 维护联通块大小的话可以用lct：每条边的权值看成两个端点$b$的较大值，很容易证明整个联通块上只有最小生成树上面的边是有用的，这个就是简单的lct问题了. </p><p>最小化$\max\{a\}+\max\{b\}$这样的问题，经常要从小到大枚举$a$，然后求$\max\{b\}$的最小值，这是我以前就知道的. 求$\max\{b\}$的最小值的时候，以前我做的题都是可以直接求的，而在这道题里面可以从大到小枚举，每次尝试将其减小直到不可行，这个思路我以前没有想到过. </p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>我已经注意到一个很关键的地方，就是强联通块的数量+1=划分的方案数，这里划分指的是把点划分成$S$和$T$两个集合（可以为空），对$\forall x\in S,~y\in T$有$(x,y)\in E$. 可能是T1做得不顺利，我没有想到将其写成$x+1=\sum _{S\cup T=U,~S\cap T=\emptyset}\prod _{x\in S}\prod _{y\in T}[(x,y)\in E]$的形式（$U$为所有点构成的集合），这样两边再求一下期望就可以得到$E(x)+1=\sum _{S\cup T=U,~S\cap T=\emptyset}\prod _{x\in S}\prod _{y\in T}\textrm{Pr}((x,y)\in E)$，考虑到输入只会给定m条边，其它边都是$\frac{1}{2}$，可以记$f _{x,y}=2\textrm{Pr}((x,y)\in E)$，即有$E(x)+1=\sum _{S\cup T=U,~S\cap T=\emptyset}2^{-|S|(n-|S|)}\prod _{x\in S}\prod _{y\in T}f _{x,y}$. </p><p>考虑怎么算这个东西，分开考虑输入给定的边构成的每个联通块，那么任何一个联通块的点数都不超过20，让$g _i=\sum _{S\cup T=U^\prime,~S\cap T=\emptyset,~|S|=i}\prod _{x\in S}\prod _{y\in T}f _{x,y}$，点数很少可以直接枚举$S$然后暴力计算出来（这里$U^\prime$代表一个联通块里的所有点构成的集合）. 让$h _i=\sum _{S\cup T=U,~S\cap T=\emptyset,~|S|=i}\prod _{x\in S}\prod _{y\in T}f _{x,y}$，容易发现$h$就是每个联通块的$g$的卷积，同样可以暴力计算，最后答案即为$\sum h _i2^{-i(n-i)}$. </p><h2 id="4-11"><a href="#4-11" class="headerlink" title="4-11"></a>4-11</h2><p>AK辣！不过能A掉T2也是因为数据很水，要卡还是能卡成50分的. </p><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>水题</p><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>我用奇怪的分治AC了，让solve(l,r,hl,hr)表示处理$[l,r]$这个区间，区间左右的石柱（即$l-1$和$r+1$）高度为$h _l$和$h _r$. 那么如果$\max _{l\le i\le r}\{a _i\}\le\min\{h _l,h _r\}$，就可以直接返回答案，否则找出区间中最高的石柱，然后向两边分治. 在数据随机的情况下，这么做是$\mathcal O(q\log n)$的. </p><p>其实只要让$a _i$单调就可以卡掉这个做法……正解是记$h _i$为第$i$列的最高位置（包括水），那么易知$h _i$是单峰的，而答案就是$\sum(h _i-a _i)$. 用两个set来维护$h _i$就可以了，具体细节有一点多，大概是维护$a _i$从左到右和从右到左的LIS，设其下标序列为$S _1,~S _2$，那么$\sum h _i=\sum a _i(S _{1,i+1}-S _{1,i})+\sum a _i(S _{2,i}-S _{2,i+1})-n\max _{i=1}^n\{a _i\}$（$S _1,~S _2$都要包含$0$和$n+1$）. </p><p>c++的reverse_iterator也不知道发生了什么完全不能用，浪费我一个下午……</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>cf原题</p><h2 id="4-12"><a href="#4-12" class="headerlink" title="4-12"></a>4-12</h2><p>辣鸡题意不清……不过也是我没认真读</p><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>按$a$排序，相同的话坐标较小的排在前面，然后$f _i=\max\{f _j+\frac{(i-j)(i-j-1)}{2}\}$，把括号拆开之后发现对每个$j$都是关于$i$的一条直线，用lych线段树维护即可，虽然是$\mathcal O(n\log^2 n)$，但常数比较小，用io优化可以卡过去. </p><p><del>然后我就拿了18分，原来可以TM一个都不选. </del></p><h3 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h3><p>首先可以想到拆开每一位，那么每次操作就是模2，循环卷积意义下乘$f(z)=1+\frac{1}{z}+\cdots+\frac{1}{z^{k-1}}$. 这个可以直接用FFT来做，不过$\log$太多了……我只拿了60分. 注意到模2意义下多项式有一些很好的性质，比方说$f^2(z)\equiv f(z^2)\pmod{2}$. 于是$f^{2^t}(z)$都是很好求的.<br>这个时候可以发现其实没有必要使用多项式，进行$2^t$之后的结果就是$y _i=\oplus _{j=0}^{k-1}x _{(i+j\cdot 2^t)\mod{n}}$（这是因为$f^{2^t}(z)=\sum _{j=0}^{k-1}z^{-j\cdot 2^t}$）. 然后这个可以对每个环求前缀和从而$\mathcal O(n)$求出来，总的时间复杂度为$\mathcal O(n\log T)$. </p><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>可以写出一个暴力的dp方程$f _{i,j}=\max\{f _{k,j-1}+\text{val}(k,i)\}$，这里$f _{i,j}$表示只考虑$r _w\le i$的区间，选$j$个点的答案. 我一开始的想法是决策单调性dp，但这样是两个$\log$的，事实上$\text{val}(k,i)$可以用线段树来维护，当$i$增加的时候只需要做一个后缀加. </p><p>关键应该是把$m$优化掉. 如果取消$m$的限制的话，dp方程的第二维可以直接去掉，这样复杂度里的$m$就没有了，这种时候可以使用这样一种套路：记选k个点的最优解为$\text{ans}(k)$，那么有$\text{ans}(k+1)-\text{ans}(k)\le\text{ans}(k)-\text{ans}(k-1)$，那么可以记$c(k)=\text{ans}(k)-\lambda k$，那么$c(k+1)-c(k)=\text{ans}(k+1)-\text{ans}(k)-\lambda$，即$\text{ans}(k+1)-\text{ans}(k)=\lambda$的时候$c(k)$取到最大值，那么二分这个$\lambda$，使$c(k)$取最大值时$k=m$，即可得到答案为$c(m)+\lambda m$. $c(k)$相当于每选一个点要付出$\lambda$的代价，问最大收益，可以用一个类似的dp来解决. 具体实现起来还有一些细节. 现在复杂度是$\mathcal O(n\log n\log x)$，据说常数比较不能AC. </p><p>接下来只能考虑优化dp了. 注意到对$x&lt; y$，一旦$f _x+v _x\le f _y+v _y$，那$x$求再也不能成为最大值了，于是我们可以维护$f _x+v _x$的差分，一旦某个位置非负，那就可以把前面的位置合并进来，这个用并查集来维护. 有几个细节，一个是具体实现的时候我们应该求出最大化收益的时候选出的最大点数，所以差分刚好为0要合并前面的时候，还要注意处理一下. 另外，应该让$f _0+v _0=\lambda$，这样在此处转移就相当于一个点都不选的情况（区间从1开始）. 第一次写起来真的挺恶心的……这种一堆区间然后dp的问题用左闭右开区间似乎会方便一点？</p><h2 id="4-13"><a href="#4-13" class="headerlink" title="4-13"></a>4-13</h2><p>炸了炸了……</p><h3 id="T1-3"><a href="#T1-3" class="headerlink" title="T1"></a>T1</h3><p>强行线性基硬搞的话$\log$应该太多了所以过不了. 我们把询问离线，按右端点排序，那么就是要维护$f(j,i)$表示$j$到$i$的线性基，支持把$i$右移. 首先注意到$j$左移的时候，相当于不断往线性基里面加数，所以不同的$f(j,i)$只有$\mathcal O(\log a)$个，考虑维护这些线性基和它们的端点，每次$i$右移的时候，存在一个$j _0$，对$j&lt; j _0$，$f(j,i)$不变，对$j\ge j _0$，$f(j,i)$相当于插入一个数，直接维护就好了. 这样的复杂度是$\mathcal O(n\log^2 a+q\log a)$.</p><p>上面那个做法的瓶颈在于维护$\mathcal O(\log a)$个线性基. 这些线性基的左端点肯定是线性无关的，从右到左线性基的变化其实就是依次加入这些端点，所以可以考虑把这些端点放入一个线性基里面，而且只维护这个线性基. 这么做的问题是，放进线性基里面就不能区分它们的位置了，所以没办法查询，这里要用到一个套路，如果$x&lt; y$，那么所有包含$a _x$的查询肯定包含$a _y$，所以把$a _x$异或上$a _y$肯定不会有影响，所以我们维护线性基的时候可以多维护一个位置，插入一个数$x$的时候，如果到了某一位有数，就把位置靠后的放入线性基，靠前的异或上靠后的然后继续往下看. 插入成功了之后不能用较小的数的去消这个数，也不能用这个数去消较大的数.</p><p>感觉讲不清楚，贴段代码吧……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ele <span class="title">getv</span><span class="params">(ele x,ele i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ele x,ele j)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=W<span class="number">-1</span>; ~i; --i)</span><br><span class="line"><span class="keyword">if</span> (getv(x,i))&#123;</span><br><span class="line"><span class="keyword">if</span> (b[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (j&gt;c[i]) swap(b[i],x),swap(c[i],j);</span><br><span class="line">x^=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[i]=x; c[i]=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这整一套思路都非常巧妙非常神仙啊，先当做查询区间线性基的一个套路记下来吧. </p><h3 id="T2-3"><a href="#T2-3" class="headerlink" title="T2"></a>T2</h3><p>恍惚间回到了GDKOI2018 D1T1……GDKOI的时候，我写的是一次更新一整段线路，这回一开始也是，结果都死活TLE卡不过去，后来改成每次只更新下一个站就飞快地AC了……<del>叫我整段小天才！</del></p><h3 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h3><p>题目可以转化成给你$r$组边，每组至多选一条，问不出现环的情况下最多选多少条边. 考虑每次增加一组边，然后钦定一条加进去，如果没有出现环就不管了，否则的话枚举删掉环上的一条边，再尝试把跟它同组的另一条边钦定加进去. 这就跟找增广路一样. 复杂度$\mathcal O(r^3)$.</p><h2 id="4-14"><a href="#4-14" class="headerlink" title="4-14"></a>4-14</h2><p>神仙题神仙题……</p><p>晚上打了场计蒜客的比赛，进了前200似乎有衣服拿？其实我发挥得挺差的，G没注意到会爆long long，又不知道unsigned long long已经到了$10^{19}$，结果耽搁了好久. B用bitset存边表但是没有清空，每次只是把邻接矩阵读进来，这样多组数据后一组的n比前一组小的时候就没有清空，后面and起来再算1的个数的时候就会出问题. C就是一个很简单的FWT，不知道为什么没想到.</p><h3 id="T3-3"><a href="#T3-3" class="headerlink" title="T3"></a>T3</h3><p>终于知道这种问题怎么做了！</p><p>首先不考虑取的树的个数的限制，那么答案就是循环卷积意义下$[x^k]\prod _{i=0}^{n-1}(1+x^i)$. 因为DFT本身就是循环卷积，所以可以考虑用IDFT来算，记$f(x)=\prod _{i=0}^{n-1}(1+x^i)$，答案就是$\sum _{i=0}^{n-1}f(\omega _n^i)\omega _n^{-ik}$.</p><p>$x^n-1=\prod (x-\omega _n^i)$，这是因为你把$\omega _n^i(i=0,1,\ldots,n-1)$代入，两边都是0. 让$x=-1$，即有$1-(-1)^n=\prod(1+\omega _n^i)$，那么答案就可以继续化为</p><script type="math/tex; mode=display">\begin{aligned}&\sum \omega _n^{-ik}\sum _{j=0}^{n-1}(1+\omega _n^{ij})\\=&\sum \omega _n^{-ik}\sum _{j=0}^{n-1}(1+\omega _{n/d}^{\frac{i}{d}j})~(\gcd(i,n)=d)\\=&\sum \omega _n^{-ik}\sum _{j=0}^{n-1}(1+\omega _{n/d}^{j})\\=&\sum \omega _n^{-ik}(1-(-1)^{n/d})^d\\=&\sum (1-(-1)^{n/d})^d\sum _{\gcd(i,n)=d}\omega _{n/d}^{-\frac{i}{d}k}\end{aligned}</script><p>记$s(n,k)=\sum _{\gcd(i,n)=1} \omega _n^{ik}$，后面那个东西就是$s(\frac{n}{d},k)$，可以莫比乌斯反演搞出来.</p><p>现在考虑怎么加上取的个数的限制，有一个套路，就是多加一个元，即计算$[x^ky^m]\prod _{i=0}^{n-1}(1+x^iy)$，这里只有$x$是循环卷积，把$x$看成主元，使用几乎完全相同的推导，得到答案是$[y^m]\sum (1-(-y)^{n/d})^ds(\frac{n}{d},k)$. 二项式展开需要组合数，可以分段打阶乘表来解决.</p><h2 id="HNOI"><a href="#HNOI" class="headerlink" title="HNOI"></a>HNOI</h2><p><del>为什么没有日期呢？因为我忘了是哪天了.</del></p><h3 id="D1T1"><a href="#D1T1" class="headerlink" title="D1T1"></a>D1T1</h3><p>这个做法真神仙！</p><p>从后往前考虑每个操作，如果某个位置and了0或者or了1，那么前面的操作就无关紧要了，或者说这一位已经被确定下来了. 于是可以把每个二进制位上的$n$个操作从后往前看成一个01串，然后插到一棵trie里面，考虑在trie里面从上往下走，如果这一步是and，那么整个左子树里的位置都被确定下来了，否则整个右子树里的位置都被确定下来了. 而你走到NULL或者一个叶子，就意味着所有的位置都确定下来了，于是本质不同的方案只有$\mathcal O(nm)$个，把这些方案都找出来，然后把他们按照钦定哪些位置为1分类，存到hash表里面，询问的时候就可以直接在hash表里面查. </p><p>如何hash位置集合？给每个位置分配一个$[0,2^{64})$的整数作为权值，位置集合的hash就是所有位置的权值异或起来，可以证明这样冲突的概率很小.</p><h3 id="D1T2"><a href="#D1T2" class="headerlink" title="D1T2"></a>D1T2</h3><p>首先是把序列倍长，很容易<del>（据说这其实是难点）</del>推出要最小化$i+\max _{i\le j\le i+n-1}\{T _j-j\}$，这个可以用单调栈很容易地dp出来，接着可以发现对答案有贡献的$T _j-j$一定是最右边的一个，它左边第一个大于它的，以此类推……然后这就非常楼房重建了. <del>我考场上头铁想用线段树维护结果没写出来. 楼房重建可以分块啊！贼好写啊！sbwhj！</del>理论上每个块的大小为$\sqrt{n\log n}$的时候跑得最快，但是似乎把块只开$\sqrt n$跑得要快很多，看来以后各种分块还是要看数据调整块的大小. 还有一些小优化：如果有一块最大值比右边的最大值小，那就可以直接跳过而不需要在块内二分；最后有很多块可以不在块内二分就跳过，因为$i &gt; n$的时候对答案没有贡献.</p><h3 id="D1T3"><a href="#D1T3" class="headerlink" title="D1T3"></a>D1T3</h3><p>kernelization真的太妙了，贴个<a href="https://www.zhihu.com/question/272303098/answer/367368615" target="_blank" rel="noopener">链接</a>.</p><h2 id="4-17"><a href="#4-17" class="headerlink" title="4-17"></a>4-17</h2><p>可能是正好太困了，发挥极差.</p><p>以后一定要记住题目难度与顺序无关. 一场比赛T4一样可能很可做，T1该弃还是要弃，没有必要慌，像今年GDKOID2，像今天的T4，似乎今年HNOID1T1也是一天里面最难的.</p><p>对拍有的时候也是不靠谱的，像T1我就有错没有拍出来，所以肉眼检查、自己出数据也是很重要的，特别是给自己程序加了个优化之类的时候，一定要想清楚，我T1炸了也有一部分原因是这个.</p><h3 id="T1-4"><a href="#T1-4" class="headerlink" title="T1"></a>T1</h3><p>成功读错题，不知道为什么产生了一种错觉，代价加起来不会超过$P$. 这是一个典型的树上背包问题，让$f_{i,j}$表示以$i$为根的子树里代价恰好为$j$的最大收益，我以前一直只会把子树的$f$卷起来来转移，不过启发式合并一发还是可以水过去的. 事实上可以用$f _{i,j}$表示dfs序上只考虑$i$以前的点，代价恰好为$j$的时候的最大收益，那么选$i$就把背包转移到dfs序上下一个点，否则就跳过整棵子树，也就是dfs序上的整段.</p><h3 id="T2-4"><a href="#T2-4" class="headerlink" title="T2"></a>T2</h3><p>想复杂了. 旋转的时候中序遍历不变，子树权值和只有两个点会被改变，每次询问就是中序遍历上一段区间的乘积.</p><h3 id="T3-4"><a href="#T3-4" class="headerlink" title="T3"></a>T3</h3><p>一眼就能看出来是跟$g(n)=n^m$卷起来做杜教筛，关键是怎么求$m$次方的前缀和. 不知道为什么我以前听说的方法都是满页数学公式，各种多项式，反而不知道这么一个简单的方法：显然这是一个$m+1$次的多项式，把它在$0,1,\ldots,m+1$处的点值线性预处理出来，然后就可以插值了. 因为选出的点的特殊性，分母处的$\prod _{1\le i\le n,~i\neq k}(x _k-x _i)=k!(m+1-k)!$，预处理阶乘之后可以$\mathcal O(1)$求出来. 最后一点空间卡得很近，出题人想强迫你写多点求值，但是可以各种卡常卡空间+预处理$\mathcal n^{\frac{2}{3}}$的答案+预处理更大范围内的$m$次方前缀和压线A掉. 卡空间的方法大概有这么几个：筛$\mu(i)i^m$的时候不额外用一个数组来存是否是质数，而是直接使用存答案的数组，一开始全部置为-1，那某个位置不为0的时候显然就已经被筛掉了；存质数的数组只需要开到$\mathcal O(\frac{n}{\ln n})$.</p><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>简单计数题，把$(0,0)$也看成不合法的向量，容斥一发，计算不考虑不合法向量随便走的方案数时，可以发现两个坐标是独立的，于是分开来dp，再用前缀和优化一下转移.</p><h2 id="4-18"><a href="#4-18" class="headerlink" title="4-18"></a>4-18</h2><p>还是很困……又挂一场. 希望只是困的问题吧……</p><p>T1我已经想到了做法，但是没有注意到可以离线，而在线的标准做法太难打，就打了个水法，结果就被卡掉了. 说到底还是我的基础不够扎实，没有想到可以离线来简化问题.T2的式子我推了太久，也导致了T1我没时间打正解，如果基础再扎实一点，再冷静一点，应该能推得更快，能注意到更简洁的做法，所以以后在考场上还是需要更平稳一点的心态，思考再细致一点，不要无脑往一个方向钻，当然太困了没办法集中精力也是原因之一，当时想边界情况的时候就死活想不清楚.</p><h3 id="T1-5"><a href="#T1-5" class="headerlink" title="T1"></a>T1</h3><p>其实就是要求每个子串出现次数的平方和，如果$n=1$的话后缀自动机随便做，有多个的话其实就是要建一个广义后缀自动机然后依次加入每个字符串，但是带修改的时候，直接暴力维护每个节点代表的串的出现次数是会被卡的. 这道题可以离线把整个广义后缀自动机建好，再用树链剖分来维护parent树，如果强制在线的话就只能上LCT了. 据说有$\mathcal O(L\sqrt L)$的水法？</p><h3 id="T2-5"><a href="#T2-5" class="headerlink" title="T2"></a>T2</h3><p>考场上把式子推了出来，但是比标算繁琐一些，而且不够时间写分治FFT了，就只好交了一发暴力的dp，结果看错了范围，最后还交错了程序……</p><p>感觉像这种题，要你算一个绕来绕去的奇奇怪怪的东西，很可能会有优美一些的意义，比方说这道题，每次操作的时候还要去掉这个数，把其他的数乘起来，就显得很难表示，我直接硬推也推出来了，但是就麻烦了很多. 事实上可以注意到，每一轮的伤害其实就是$\prod A _i$的减少量，所以只需要求最后$\prod A _i$的期望，推出来就是$\prod A _i-\frac{k!}{n^k}[z^k]e^{nz}\prod(A _i-z)$，非常地好算. </p><p>我考场上推出来的做法是记$f(z)=\prod(A _i-z)\sum\frac{1}{A _i-z}$，然后计算$\sum \frac{[z^r]f(z)}{n^{r+1}}\sum _{i=0}^{k-1}i^{r\downarrow}$，这里$\sum _{i=0}^{k-1} i^{r\downarrow}=\sum _{i=0}^{k-1} \frac{(i+1)^{r+1\downarrow}-i^{r+1\downarrow}}{r+1}=\frac{k^{r+1\downarrow}}{r+1}$，这个求和的方法我考场上一时慌张居然没想到……我好菜啊……</p><p><del>有没有dalao愿意看看我这个做法对不对啊. </del></p><h3 id="T3-5"><a href="#T3-5" class="headerlink" title="T3"></a>T3</h3><p>肯定只有两端会往回走，中间都是一个方向上的，然后<del>应该</del>可以dp出来. 细节好多不想写……</p><h3 id="T4-1"><a href="#T4-1" class="headerlink" title="T4"></a>T4</h3><p>神仙题. <del>输出Infinity有20分. </del></p><h2 id="4-19"><a href="#4-19" class="headerlink" title="4-19"></a>4-19</h2><p>开始的时候还是困，头昏脑涨地想了一会，然后开始头铁码T3，等码出来+卡常卡进去之后头非常疼，时间也不多了，结果其他题的暴力没有打好. 以后可能还是要调整一下策略，说不定需要先稳住暴力分再去码正解？</p><p>以后考前一定要尽量休息好. </p><h3 id="T1-6"><a href="#T1-6" class="headerlink" title="T1"></a>T1</h3><p>首先是一个最小割模型的套路，如果有若干个物品，第$i$个有$p _i$种决策方案，分别会得到一定的收益，决策之间有一些制约关系. 可以把$i$拆成$p _i-1$个点$a _{i,0},a _{i,1},\ldots,a _{i,p _i-2}$，相邻两个点连边，源点向$a _{i,0}$连边，$a _{i,p _i-2}$向汇点连边，割掉一条边就代表一种决策. 决策之间的制约关系，像某个点的决策编号比另一个点靠前，某个点的决策编号至少比另一个点靠前$k$位之类的，就可以通过在某些点之间连边来体现. 以假定选取获得了所有正的收益，边权即为这么决策得不到的收益，然后算最小割即可. 回去要好好看一下网络流的各种模型. </p><p>这道题里面，对每个$x _i$，可以认为它有3种决策：在最大子段前，在最大子段里，在最大子段后. 对于给定的每条边$(u,v)$，可以看作$u$的决策编号不能在$v$之后. 这样就能转化为最小割模型来做了. </p><h3 id="T2-6"><a href="#T2-6" class="headerlink" title="T2"></a>T2</h3><p>考场上我已经想到了用莫比乌斯反演转化为求$k|\gcd(u,v)$的路径条数，结果没好好想下去.</p><p>可以发现有平方因子的因数都是没有贡献的，而$10^6$以内的数最多有$c=7$个素因数，所以每个数最多有$2^c=128$个对答案有贡献的约数. 先考虑没有修改的情况，预处理出$S _d$表示权值被$d$整除的边的集合，对于每个非空且满足$\mu(d)\neq 0$的$S _d$，用一个并查集统计答案就可以了. 注意到每条边之多出现在$2^c$个满足$\mu(d)\neq 0$的$S _d$中，复杂度为$\mathcal O(2^cn\alpha(n))$. </p><p>考虑在线，我的第一反应是按时间分治，可是这个东西好像不能很方便地加边，更不用说撤销. 注意到$q$非常小，因而受到修改操作影响的边也非常少，可以把$S _d$中受操作影响和不受影响的边分开来存，对于每个$d$，先只把不受影响的边加进去，然后枚举$q+1$时间点，对每个时间点，加入受影响且边权被$d$整除的边，统计答案再撤销，去计算下一个时间点. 因为要撤销所以并查集不能路径压缩了，复杂度为$\mathcal O((n+q^2)2^c\log n)$. </p><h3 id="T3-6"><a href="#T3-6" class="headerlink" title="T3"></a>T3</h3><p>数位dp的做法还是比较容易看出来的，正解非常神仙. </p><h3 id="T4-2"><a href="#T4-2" class="headerlink" title="T4"></a>T4</h3><p>先坑着. </p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> jzoj </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
