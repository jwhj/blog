<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蒟蒻的博客</title>
    <link>https://seraphim.rocks/</link>
    <description>Recent content on 蒟蒻的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 11:40:51 +0800</lastBuildDate>
    
        <atom:link href="https://seraphim.rocks/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>雅礼2018年7月集训总结</title>
        <link>https://seraphim.rocks/posts/yali201807/</link>
        <pubDate>Sun, 01 Jul 2018 20:15:04 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/yali201807/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/yali201807/ -&lt;p&gt;&lt;del&gt;NOI前的垂死挣扎.&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-1&#34;&gt;7-1&lt;/h2&gt;
&lt;p&gt;考得还不错的样子，但是还有可以完善的地方.&lt;/p&gt;
&lt;h3 id=&#34;t1&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;想到了出题人想到的状压dp，然后别人想出来了一个&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^3)\)&lt;/span&gt;的dp. 其实我是看到了题目的&lt;span class=&#34;math inline&#34;&gt;\(n\le 24\)&lt;/span&gt;就去想状压的，如果数据范围大一点我应该也能想到？&lt;/p&gt;
&lt;h3 id=&#34;t2&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;被卡常卡成60分了，主要是因为方点的情况我强行把分治FFT的做法搬过来写出了8倍常数. 事实上比赛的时候我已经注意到了方点相当于是没有度数限制的，而用在圆点上的分治FFT本来就是为了处理度数限制的问题，所以完全没有必要照搬，可以直接用一个线性的dp解决方点的情况.&lt;/p&gt;
&lt;h3 id=&#34;t3&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;写完+检查完前两道题的时候已经过去4h了，写暴力又花了一些时间导致我没什么时间想这道题. 当时我已经想出了&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^3)\)&lt;/span&gt;的dp做法，其实再注意到一些细节就可以优化到&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt;，但是剩下的时间连打完我想到的那个dp都很勉强. 说到底还是我思维比较迟缓，并且码力太过底下，前面debug了太长的时间，还是要多做点题.&lt;/p&gt;
&lt;h2 id=&#34;7-2&#34;&gt;7-2&lt;/h2&gt;
&lt;p&gt;区分度极低+极度劝退，rk8后面就是rk29. &lt;!-- raw HTML omitted --&gt;很荣幸能够挤进前10.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;t1-1&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;挺不错的一道题，链剖的做法也没有那么容易想到，不过想到了的话打起来非常舒服.&lt;/p&gt;
&lt;h3 id=&#34;t2-1&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;没怎么卡过空间，各种会分块会主席树但是MLE……&lt;/p&gt;
&lt;p&gt;首先询问区间中有多少种数是经典的难以合并信息的问题，询问一个区间还有分块或者主席树的做法，询问多个区间的话，没什么好的想法，就只能bitset卡一卡了.&lt;/p&gt;
&lt;p&gt;用bitset的话第一个问题是想办法做到&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\frac{nm}{w})\)&lt;/span&gt;而不是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\frac{nm\log n}{w})\)&lt;/span&gt;. 直接ST表的话会MLE. 如果可以离线，就能用莫队把每个询问区间的bitset预处理出来. 其实反正已经用了bitset这么暴力的东西了，不妨维护的时候也暴力一点，把整个区间分成&lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;个块，预处理出&lt;span class=&#34;math inline&#34;&gt;\(w^2\)&lt;/span&gt;个块对之间的bitset，每个询问区间在整块的基础上加上&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\frac{n}{w})\)&lt;/span&gt;个数. 这样子空间开不下，可以把预处理&lt;span class=&#34;math inline&#34;&gt;\(w^2\)&lt;/span&gt;个块对改为用ST表维护各个块，就能把空间卡进去了.&lt;/p&gt;
&lt;h3 id=&#34;t3-1&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;差分之后按位置模&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;分类然后计算交错和什么的都很容易想到，关键是判无解非常麻烦，在左右端点需要特殊处理的情况下判无解更加麻烦，反正我在赛场上没想到优美的方法. 标解是利用hash，给每个模&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;的余数分配一个&lt;span class=&#34;math inline&#34;&gt;\([0,2^{64})\)&lt;/span&gt;之间的随机权值，那么计算询问区间中的&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;的位置的异或和再进行判断就可以了. 要注意求多类位置分别的前缀交错和的和写法比较特殊，要让&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;表示让最后一个位置的权值为&lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;时的前缀交错和，这样区间中每类位置均出现偶数次的时候，就能拿两个前缀和做个差得到区间交错和了.&lt;/p&gt;
&lt;h2 id=&#34;7-3&#34;&gt;7-3&lt;/h2&gt;
&lt;p&gt;似乎基本都听过一遍？&lt;/p&gt;
&lt;h2 id=&#34;7-4&#34;&gt;7-4&lt;/h2&gt;
&lt;p&gt;除去std还有11个人ak&lt;!-- raw HTML omitted --&gt;，我是第12名&lt;!-- raw HTML omitted --&gt;. 后来可能还重测了几个丢了程序的人.&lt;/p&gt;
&lt;h3 id=&#34;t1-2&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;我的做法是想象高维空间，一个&lt;span class=&#34;math inline&#34;&gt;\(n+1\)&lt;/span&gt;维的基础图形实际上就是由&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;维的在第&lt;span class=&#34;math inline&#34;&gt;\(n+1\)&lt;/span&gt;维上平移得到的. 那么平移前后，每一维成分的数量首先是翻了一倍，另外平移前和平移后对应的&lt;span class=&#34;math inline&#34;&gt;\(j-1\)&lt;/span&gt;维的成分构成了一个&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;维的成分. 以二维到三维为例，一个正方形向上平移，得到了&lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt;个点和&lt;span class=&#34;math inline&#34;&gt;\(8\)&lt;/span&gt;条边，设平移前正方形为&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，平移后正方形为&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;的每对对应点形成一条新的边，每对对应边形成一个新的面. 设&lt;span class=&#34;math inline&#34;&gt;\(f _{i,j}\)&lt;/span&gt;为&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;维基础图形中&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;维的个数，即有&lt;span class=&#34;math inline&#34;&gt;\(f _{i,j}=2f _{i-1,j}+f _{i-1,j-1}\)&lt;/span&gt;，记&lt;span class=&#34;math inline&#34;&gt;\(F _i(z)=\sum f _{i,j}z^j\)&lt;/span&gt;，即有&lt;span class=&#34;math inline&#34;&gt;\(F _{i+1}(z)=(2+z)F _i(z)\)&lt;/span&gt;即&lt;span class=&#34;math inline&#34;&gt;\(F _n(z)=(2+z)^n\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(f _{n,m}=2^{n-m}\binom{n}{m}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&#34;t2-2&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;跟以前见过的一道dp题比较像. 考虑从小到大决策每个元素，它的贡献依赖于前面的元素的决策，但是这个不方便表示为状态. 假设当前要加入的元素为&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;,可以把前面的元素分成跟&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;加在一起无贡献和有贡献的两部分，有贡献的部分只需要保存两边的数量就可以了，而无贡献的部分随着&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;的增大只会不断减少，所以我们可以先不决策无贡献的部分，当其中的元素变成有贡献的时候再进行决策，到最后都还是无贡献的那一部分放在哪边都不影响答案，所以最后乘一个&lt;span class=&#34;math inline&#34;&gt;\(2^\textrm{cnt}\)&lt;/span&gt;即可.&lt;/p&gt;
&lt;h3 id=&#34;t3-2&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;居然没想出来真是丢人. 我想到了容斥而且会做&lt;span class=&#34;math inline&#34;&gt;\(k=0\)&lt;/span&gt;居然还做不出来，可能是因为我总是想着一步把式子推到位，而没有把一些关键的量记为一个符号来简化思考.&lt;/p&gt;
&lt;p&gt;显然这道题就是要求极长同色子段恰有&lt;span class=&#34;math inline&#34;&gt;\(n-k\)&lt;/span&gt;个的方案数，用指数生成函数很容易算出段数不超过&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;的元次&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;. 其实这个时候就可以凑容斥系数了. 考虑一个实际有&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;段的方案，它只对&lt;span class=&#34;math inline&#34;&gt;\(j\ge i\)&lt;/span&gt;的&lt;span class=&#34;math inline&#34;&gt;\(f _j\)&lt;/span&gt;有贡献，且贡献的系数为&lt;span class=&#34;math inline&#34;&gt;\(\binom{n-i}{j-i}\)&lt;/span&gt;. 这是因为有&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;段相当于切了&lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt;刀，还有&lt;span class=&#34;math inline&#34;&gt;\(n-i\)&lt;/span&gt;个位置可以切，为了被算进&lt;span class=&#34;math inline&#34;&gt;\(f _j\)&lt;/span&gt;里面，还需要切&lt;span class=&#34;math inline&#34;&gt;\(j-i\)&lt;/span&gt;刀，所以共&lt;span class=&#34;math inline&#34;&gt;\(\binom{n-i}{j-i}\)&lt;/span&gt;种切法. 于是我们可以列出式子&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\sum _{j=i}^nc _j\binom{n-i}{j-i}=[i=n-k]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;化得好看一些&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\sum _{p=0}^{n-i}c _{i+p}\binom{n-i}{p}=[k=n-i]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;右边这个东西如果利用&lt;span class=&#34;math inline&#34;&gt;\([n=0]=\sum (-1)^i\binom{n}{i}\)&lt;/span&gt;来做，反正我不会. 注意到&lt;span class=&#34;math inline&#34;&gt;\(i\le n-k\)&lt;/span&gt;（否则不可能有贡献，一般不会去考虑），可以启发我们展开&lt;span class=&#34;math inline&#34;&gt;\((z+1-1)^{n-i}\)&lt;/span&gt;，得到&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[z^k] (z+1-1)^{n-i}=\sum 1^p(-1)^{n-i-k-p}\frac{(n-i)!}{k!p!(n-i-k-p)!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;于是有&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[c _{i+p}=\frac{(-1)^{n-i-k-p}(n-i-p)!}{k!(n-i-k-p)!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;也就是&lt;span class=&#34;math inline&#34;&gt;\(c _j=(-1)^{n-k-j}\binom{n-j}{k}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;如果不想凑系数的话，也可以考虑求一个&lt;span class=&#34;math inline&#34;&gt;\(g _i\)&lt;/span&gt;表示恰好有&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;段的方案数. 注意到&lt;span class=&#34;math inline&#34;&gt;\(f _i=\sum _{j\le i}g _j\binom{n-j}{i-j}\)&lt;/span&gt;，强行反演其实就相当于上面的凑系数，或者你也可以写成&lt;span class=&#34;math inline&#34;&gt;\((n-i)!g _i=(n-i)!f _i-\sum _{j\lt i}(n-j)!g _j\cdot\frac{1}{(i-j)!}\)&lt;/span&gt;，用多项式求逆的套路让&lt;span class=&#34;math inline&#34;&gt;\(F(z)=\sum(n-i)!f _iz^i,G(z)=\sum(n-i)!g _iz^i\)&lt;/span&gt;，就有&lt;span class=&#34;math inline&#34;&gt;\(G(z)=F(z)-(e^z-1)G(z)\)&lt;/span&gt;，即&lt;span class=&#34;math inline&#34;&gt;\(G(z)=F(z)e^{-z}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;感觉这是一道挺不错的计数题，这里面包含的几个新套路，一个是展开&lt;span class=&#34;math inline&#34;&gt;\((z+1-1)^{n-i}\)&lt;/span&gt;，一个是&lt;span class=&#34;math inline&#34;&gt;\(\binom{n-i}{j-i}\)&lt;/span&gt;这个系数，都要记下来.&lt;/p&gt;
&lt;h2 id=&#34;7-5&#34;&gt;7-5&lt;/h2&gt;
&lt;h3 id=&#34;t1-3&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;题目保证给定的点都在凸包上，所以询问区间中的点一定都在这些点的凸包上，也就是说只需要计算&lt;span class=&#34;math inline&#34;&gt;\(\sum _{i=0}^{L-1}P _i\times P _{i+1}(P _L=P _0)\)&lt;/span&gt;，其中&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;为询问区间的长度&lt;span class=&#34;math inline&#34;&gt;\(P _0,P _1,\ldots,P _{L-1}\)&lt;/span&gt;为询问区间中的点按照极角排序之后的结果.&lt;/p&gt;
&lt;p&gt;那么&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\sqrt{n}\log n)\)&lt;/span&gt;的莫队就是显然的了. 想办法继续优化，注意到插入是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log n)\)&lt;/span&gt;的，但删除可以做到&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(1)\)&lt;/span&gt;，可以用删除的撤销来代替插入. 具体来讲，把询问排序的时候，右端点从小到大改为从大到小，设当前询问区间的左端点所在块的左端点为&lt;span class=&#34;math inline&#34;&gt;\(l _0\)&lt;/span&gt;，维护&lt;span class=&#34;math inline&#34;&gt;\([l _0,n)\)&lt;/span&gt;的凸包，每次询问的时候移动端点就只需要删除了，询问结束后恢复左端点. 如果左端点所在的块变化了，就恢复右端点，然后把左边的块删掉（此次不用恢复）. 只有插入的莫队思路略有不同，挺好想的就不讲了.&lt;/p&gt;
&lt;p&gt;只有插入或者只有删除的莫队算是个以前没见过的技巧吧，要记下来.&lt;/p&gt;
&lt;h3 id=&#34;t2-3&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;可以用各种方法花式AC，稍微记录一下感觉比较有意思的.&lt;/p&gt;
&lt;p&gt;这一个是我用的方法，答案保证严格大于&lt;span class=&#34;math inline&#34;&gt;\(\frac{n}{2}\)&lt;/span&gt;，所以中位数一定在答案里面，第一次输入把所有的数按照高&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;位分类，那么答案只可能在最中间的三类里面，第二次输入的时候把中间三类的数的低&lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt;位存在&lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;个桶里，然后暴力就可以了.&lt;/p&gt;
&lt;p&gt;另外有一个挺有意思的随机化的做法，因为答案超过一般，随机选择&lt;span class=&#34;math inline&#34;&gt;\(20\)&lt;/span&gt;个位置，那么有很大概率至少选到了一个在答案里面的数，第二次读入的时候分别钦定这&lt;span class=&#34;math inline&#34;&gt;\(20\)&lt;/span&gt;个数在答案里，分别算出答案取最优.&lt;/p&gt;
&lt;h3 id=&#34;t3-3&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;这个题的构造也不知道是怎么想出来的，非构造解法晚点再研究吧.&lt;/p&gt;
&lt;p&gt;从&lt;span class=&#34;math inline&#34;&gt;\(m=2\)&lt;/span&gt;入手，定义&lt;span class=&#34;math inline&#34;&gt;\(g _0=g _1=g _2=1,g _n=g _{n-1}+g _{n-2}(n\ge 3)\)&lt;/span&gt;，那么&lt;!-- raw HTML omitted --&gt;神仙&lt;!-- raw HTML omitted --&gt;具有敏锐洞察力的选手就可以观察到如果&lt;span class=&#34;math inline&#34;&gt;\(g _n=\sum _{i=1}^kg _{a _i}\)&lt;/span&gt;，这里&lt;span class=&#34;math inline&#34;&gt;\(a _1\gt a _2\gt\cdots\gt a _k\ge 2\)&lt;/span&gt;（容易证明一定有这样的一个划分），那么&lt;span class=&#34;math inline&#34;&gt;\(f(n)=\sum _{i=1}^kg _{a _i-1}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;为什么是这样呢？首先把题目里面的式子移项，得到&lt;span class=&#34;math inline&#34;&gt;\(f(n)+f _m(n-1)=n\)&lt;/span&gt;，又有&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}n&amp;=\sum _{i=1}^kg _{a _i}\\\\f(n)&amp;=\sum _{i=1}^kg _{a _i-1}\\\\f _2(n)&amp;=\sum _{i=1}^kg _{a _i-2}\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;后面两个式子加起来跟前一个比较，发现如果是&lt;span class=&#34;math inline&#34;&gt;\(f(n)+f _m(n)=n\)&lt;/span&gt;，似乎就有&lt;span class=&#34;math inline&#34;&gt;\(g _n=g _{n-1}+g _{n-2}\)&lt;/span&gt;了. 但是这里是&lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;注意到&lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt;的分拆里面，前&lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt;个数跟&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;的分拆肯定是一样的，因而前&lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt;项仍满足上式，我们讨论&lt;span class=&#34;math inline&#34;&gt;\(g _{a _k}\)&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g _{a _k}=1\)&lt;/span&gt;，此时&lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt;的分拆没有最后一项，因为&lt;span class=&#34;math inline&#34;&gt;\(1=1+0\)&lt;/span&gt;，最后一项仍满足上式.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(g _{a _k}&gt;1\)&lt;/span&gt;，此时相当于&lt;span class=&#34;math inline&#34;&gt;\(f _2(n-1)\)&lt;/span&gt;的分拆最后一项变成了&lt;span class=&#34;math inline&#34;&gt;\(f _2(g _{a _k}-1)\)&lt;/span&gt;的分拆形式，由题目我们知道它等于&lt;span class=&#34;math inline&#34;&gt;\(g _{a _k}-f(g _{a _k})=g _{a _k}-g _{a _k-1}=g _{a _k-2}\)&lt;/span&gt;，即最后一项仍满足上式.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规定&lt;span class=&#34;math inline&#34;&gt;\(g _0=1\)&lt;/span&gt;而不是&lt;span class=&#34;math inline&#34;&gt;\(g _0=0\)&lt;/span&gt;是因为要考虑&lt;span class=&#34;math inline&#34;&gt;\(f(1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;对于一般的情况，定义&lt;span class=&#34;math inline&#34;&gt;\(g _0=g _1=\cdots=g _m=1,g _n=g _{n-1}+g _{n-m}(n\gt m)\)&lt;/span&gt;即可.&lt;/p&gt;
&lt;p&gt;其实这个时候你会发现如果那一项是&lt;span class=&#34;math inline&#34;&gt;\(f _m(n)\)&lt;/span&gt;的话反而可能会出一些问题.&lt;/p&gt;
&lt;h2 id=&#34;7-7&#34;&gt;7-7&lt;/h2&gt;
&lt;p&gt;网络流题好像有一个比较常见的思路是，当每个东西有多个决策的时候，先全部假定一下，然后再用网络流去调整.&lt;/p&gt;
&lt;h2 id=&#34;7-8&#34;&gt;7-8&lt;/h2&gt;
&lt;p&gt;挂了挂了……&lt;/p&gt;
&lt;h3 id=&#34;t1-4&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;最小树形图的朱刘算法.&lt;/p&gt;
&lt;p&gt;也不知道出题人是怎么想的……&lt;/p&gt;
&lt;h3 id=&#34;t2-4&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;我的做法似乎比std更nb一些？反正std4k跑5s，我的代码2.4k跑0.5s.&lt;/p&gt;
&lt;p&gt;定义每个软件包开始安装的时间为&lt;span class=&#34;math inline&#34;&gt;\(S _i\)&lt;/span&gt;，实际安装花费的时间为&lt;span class=&#34;math inline&#34;&gt;\(a _i\)&lt;/span&gt;，最后答案为&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;. 那么首先有&lt;span class=&#34;math inline&#34;&gt;\(\forall(i,j)\in E,S _j-S _i\ge a _i\)&lt;/span&gt;. 总花费不超过&lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;，可以表示成&lt;span class=&#34;math inline&#34;&gt;\(\sum c _i(t _i-a _i)\le w\)&lt;/span&gt;. 由题显然有&lt;span class=&#34;math inline&#34;&gt;\(0\le a _i\le t _i\)&lt;/span&gt;. 最后答案其实相当于是对&lt;span class=&#34;math inline&#34;&gt;\(S _i+a _i\)&lt;/span&gt;取&lt;span class=&#34;math inline&#34;&gt;\(\max\)&lt;/span&gt;，可以加入&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;个约束&lt;span class=&#34;math inline&#34;&gt;\(T\ge S _i+a _i\)&lt;/span&gt;，然后就是要在满足上面所有这些约束的前提下最小化&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;，直接上单纯形就可以了.&lt;/p&gt;
&lt;p&gt;考试的时候我想到了基本相同的思路，但是没有往线性规划的方向去想，强行建了一个点数极多的图，还不知道哪里写错了一点东西，最后没拿到分. 其实网络流和线性规划很多地方是有联系的，以后想网络流建图类的问题时，不妨结合线性规划一起想，毕竟有的时候网络流更简单一些，有的时候线性规划更简单一些.&lt;/p&gt;
&lt;p&gt;出题人列出的线性规划式子要考虑每一条路径，所以约束个数可能达到指数级，要先对偶再转化成网络流来做. 我列出的式子和出题人不太一样，只有&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt;个变量，&lt;span class=&#34;math inline&#34;&gt;\(O(n+m)\)&lt;/span&gt;个约束，直接跑单纯形就非常快了.&lt;/p&gt;
&lt;p&gt;不过现在还遗留了一个小问题，无论是我的做法还是出题人的做法，似乎都不能保证减少之后的安装时间是整数. 我想了一想，觉得好像可以证明至多只有一个&lt;span class=&#34;math inline&#34;&gt;\(a _i\)&lt;/span&gt;不是整数，所以最后只需要把答案向上取整就可以了，当然有单纯形的话需要考虑一下精度问题，先减去一个eps再向上取整. 出题人的做法要二分答案，所以只需要把二分的精度限制在整数就可以了.&lt;/p&gt;
&lt;h3 id=&#34;t3-4&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;毒瘤！&lt;/p&gt;
&lt;h2 id=&#34;7-9&#34;&gt;7-9&lt;/h2&gt;
&lt;p&gt;今天的题目是上交的，长得根本不像NOI模拟赛……&lt;/p&gt;
&lt;p&gt;题目比较水，而我第二题被卡常卡掉了52分，最后只能排rk29.&lt;/p&gt;
&lt;h3 id=&#34;t1-5&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;水题.&lt;/p&gt;
&lt;p&gt;不过倒是学到了一个东西：线性预处理&lt;span class=&#34;math inline&#34;&gt;\(1,2,\ldots,n\)&lt;/span&gt;逆元的&lt;code&gt;(MOD-MOD/i)*inv[MOD%i]&lt;/code&gt;的做法虽然看上去很炫酷，但是里面用了除法，实际上常数很大，需要卡常的时候得注意一下.&lt;/p&gt;
&lt;h3 id=&#34;t2-5&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;第一反应是世界树那道题，我以前因为太难码放弃了，这回在考场上硬生生码了200+行代码写了出来，可是A掉了bzoj的世界树那题，模拟赛里面的这道题却被卡常卡成48分了.&lt;/p&gt;
&lt;p&gt;事实上这道题是世界树那道题的简化版，有一个常数&lt;del&gt;应该&lt;/del&gt;更小的做法. 这道题目只需要询问&lt;span class=&#34;math inline&#34;&gt;\(a _1\)&lt;/span&gt;占领了哪些点，所以可以对每个&lt;span class=&#34;math inline&#34;&gt;\(j\in[2,k]\)&lt;/span&gt;，求出&lt;span class=&#34;math inline&#34;&gt;\(a _1\)&lt;/span&gt;与&lt;span class=&#34;math inline&#34;&gt;\(a _j\)&lt;/span&gt;的中点&lt;span class=&#34;math inline&#34;&gt;\(m _j\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(m _j\)&lt;/span&gt;靠&lt;span class=&#34;math inline&#34;&gt;\(a _j\)&lt;/span&gt;的那一边肯定不会被&lt;span class=&#34;math inline&#34;&gt;\(a _1\)&lt;/span&gt;占领，这对应着树上的一棵子树或除了一棵子树以外的其它部分，而对每个&lt;span class=&#34;math inline&#34;&gt;\(a _j\)&lt;/span&gt;去掉那些部分之后，剩下的就是&lt;span class=&#34;math inline&#34;&gt;\(a _1\)&lt;/span&gt;可以占领的点了. 这样只需要用一棵线段树在dfs序上做区间修改，应该比虚树的做法好写很多.&lt;/p&gt;
&lt;h3 id=&#34;t3-5&#34;&gt;T3&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;题目：为了锻炼你的水平，建议使用在线算法.&lt;/p&gt;
&lt;p&gt;我：我没有水平，我离线！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是我就写了一个按时间分治水了过去. &lt;del&gt;其实码力低下的我还是因为一个弱智的bug耽搁了很久.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;考虑在线算法，如果只在一段加和删，那显然可以直接做背包，删除可以看做是插入的撤销，直接再插入的时候做一个之前时刻的备份就可以了. 如果在两端加和删，可以在两端分别用一个背包来维护，每次查询相当于是要把两个背包合并起来，直接合并是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\text{MOD}^2)\)&lt;/span&gt;的，但是因为只需要合并两个背包而不是多个，也只需要求合并后一段区间里面的最值，而不是背包的完整信息，可以枚举其中一个背包中的值，然后在另一个背包里做区间查询，复杂度降到&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\text{MOD}\log\text{MOD})\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;加入删除之后会出现一个问题，就是一边背包被删空了会开始删另一个背包的另一端. 一个显然的思路是暴力把另一个背包栈的开口反向，但这样的话如果左边删一个右边删一个循环的话复杂度就不对了. 解决方法也很简单，这种时候把另一个背包的一半元素分离出来，反向，另一半保持不变，均摊分析一下会发现复杂度是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\text{MOD}\log m)\)&lt;/span&gt;的.&lt;/p&gt;
&lt;p&gt;最后，这个在线算法的复杂度为&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(m\text{MOD}(\log\text{MOD}+\log m))\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;7-10&#34;&gt;7-10&lt;/h2&gt;
&lt;p&gt;本来应该200分rk3的……一定要吸取教训. 我T2打了一个&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(m\sqrt{L}\log L)\)&lt;/span&gt;的做法，本来可以拿90分，但是数组开得比较大MLE了，但事实上是跑不满的，这也就导致用任务管理器之类的东西看内存消耗看的也远小于开的数组的大小. 可是很多评测软件看的是你开了多少而不是用了多少，所以以后还是尽量要手算空间，如果觉得跑不满又开不下，还是用vector或者别的一些方法动态开空间吧. 这个一定要记住，今天这种情况真的非常可惜.&lt;/p&gt;
&lt;h3 id=&#34;t2-6&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;这种题对于&lt;span class=&#34;math inline&#34;&gt;\(\gt\sqrt{L}\)&lt;/span&gt;的情况要善于勇敢地暴力，做这道题的时候我考虑&lt;span class=&#34;math inline&#34;&gt;\(\gt\sqrt{L}\)&lt;/span&gt;的情况考虑了很久，最后发现单独处理这些串的时候，每个串就算是暴力枚举前缀，暴力与前面的比对，复杂度都是对的.&lt;/p&gt;
&lt;p&gt;还是写一下做法吧怕自己忘了. 记&lt;span class=&#34;math inline&#34;&gt;\(L=\sum|s _i|\)&lt;/span&gt;，对于每个询问考虑&lt;span class=&#34;math inline&#34;&gt;\(|S|\le\sqrt{L}\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(|S|\gt\sqrt{L}\)&lt;/span&gt;两种情况.&lt;/p&gt;
&lt;p&gt;对于第一种情况，各种套路想一遍发现按右端点排序来做的套路比较靠谱，设&lt;span class=&#34;math inline&#34;&gt;\(f _{i,j}\)&lt;/span&gt;代表以&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;为右端点，要使得存在长度为&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;的前缀有贡献，左端点最右的位置，这个可以根据&lt;span class=&#34;math inline&#34;&gt;\(f _{i-1,j}\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;这个串长度为&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;的前缀的贡献来计算. 要计算后者，可以把所有串长度不超过&lt;span class=&#34;math inline&#34;&gt;\(\sqrt{L}\)&lt;/span&gt;的前缀取出来，记录一个&lt;span class=&#34;math inline&#34;&gt;\(\text{pos} _s\)&lt;/span&gt;表示以&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;为前缀的串的位置列表，然后在上面查就可以了. 事实上因为&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;可以存下来，这一步不需要离线.&lt;/p&gt;
&lt;p&gt;对于第二种情况，有贡献的串至多&lt;span class=&#34;math inline&#34;&gt;\(\sqrt{L}\)&lt;/span&gt;个，把询问按照包含这些串的区间分类，离线下来，记第&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;个询问包含这些串的区间是&lt;span class=&#34;math inline&#34;&gt;\([u _i,v _i]\)&lt;/span&gt;. 以&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;为第一关键字，&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;为第二关键字排序，这样固定&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;之后&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;增大就相当于在后面暴力加串. 加串的话，可以暴力枚举前缀，然后暴力扫一遍前面的串来统计这个前缀的出现次数，判断它有没有贡献（要事先预处理长度&lt;span class=&#34;math inline&#34;&gt;\(\gt\sqrt{L}\)&lt;/span&gt;的串两两之间的lcp，这个也可以暴力预处理）. 这样加串的总复杂度不超过&lt;span class=&#34;math inline&#34;&gt;\(\sum\sqrt{L}|S|=L\sqrt{L}\)&lt;/span&gt;，同样暴力预处理lcp的复杂度也不超过这个.&lt;/p&gt;
&lt;p&gt;按照以上的方法就可以求出有贡献的长度的集合，要统计答案，支持加一个长度和删一个长度，随便用个数据结构就可以维护了.&lt;/p&gt;
&lt;p&gt;但这样是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(m\sqrt{L}\log L)\)&lt;/span&gt;的，跑最后一个点很悬. 如果要继续优化的话，注意到只有插入会带&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;，删除不会，使用熟悉的套路，把插入看成删除的撤销即可. 具体来讲，&lt;span class=&#34;math inline&#34;&gt;\(\le\sqrt{L}\)&lt;/span&gt;的部分全程删除和全程插入是一样的，因为原来算法是把有贡献的插入，改成一开始全部插入好，利用&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;数组找出没贡献的删掉就行了，最后再恢复成删掉之前的样子来处理下一个询问. 至于&lt;span class=&#34;math inline&#34;&gt;\(\gt\sqrt{L}\)&lt;/span&gt;的部分，改成&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;从小到大，&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt;从大到小，就变成全程都是删除了.&lt;/p&gt;
&lt;p&gt;再讲讲我不优化算法是怎么卡常卡进去的. 首先维护的数据结构不要用set或者线段树这么大常数的东西，用zkw，顺手把删除写成&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(1)\)&lt;/span&gt;的，再加个读入优化，这个时候已经从12s优化到4.9s了，放到lemon上面跑的时候因为玄学原因变快了一些就过了.&lt;/p&gt;
&lt;h3 id=&#34;t3-6&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;先坑着.&lt;/p&gt;
&lt;h2 id=&#34;7-12&#34;&gt;7-12&lt;/h2&gt;
&lt;p&gt;居然rk1了？&lt;/p&gt;
&lt;h3 id=&#34;t1-6&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;先坑着.&lt;/p&gt;
&lt;h3 id=&#34;t2-7&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;首先一个很显然的思路是链上修改单点查询转化为单点修改子树查询，然后就可以做树上的启发式合并，来得到每个点对应的trie了. 事实上trie的合并可以像线段树合并那样做，就可以少一个&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;. 求期望的路径长度的话，每个点记一个&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;表示从&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;出发的期望步数，它的转移跟父亲有关，有一个经典的技巧是把&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;表示成&lt;span class=&#34;math inline&#34;&gt;\(a _i+b _if _{\text{fa} _i}\)&lt;/span&gt;的形式，这样就可以不用高斯消元，第一遍dfs先把&lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt;求出来，第二遍dfs把&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;求出来. 不过此题要算的是所有&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;的和，而且还要动态维护，所以再记一个&lt;span class=&#34;math inline&#34;&gt;\(s _i\)&lt;/span&gt;表示以&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;为根的子树的&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;的和，发现&lt;span class=&#34;math inline&#34;&gt;\(s _i\)&lt;/span&gt;也可以表示为&lt;span class=&#34;math inline&#34;&gt;\(c _i+d _if _{\text{fa} _i}\)&lt;/span&gt;的形式. &lt;span class=&#34;math inline&#34;&gt;\(a,b,c,d\)&lt;/span&gt;都可以很方便地在trie上动态维护，这样就能快速地求出答案了.&lt;/p&gt;
&lt;p&gt;评测的时候最后两个点好像爆栈了？但是noi应该会开无限栈的吧.&lt;/p&gt;
&lt;h3 id=&#34;t3-7&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;一开始的时候觉得多项式开根常数太大了，就写了个分治来求&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;，结果&lt;span class=&#34;math inline&#34;&gt;\(b _i\le 10^5\)&lt;/span&gt;的点跑了6.7s. 麦老大说开根常数再大也不会比&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log^2n)\)&lt;/span&gt;的分治慢. 膜拜10min打完多项式板子的dalao……&lt;/p&gt;
&lt;p&gt;假设我们已经把&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;求出来了，考虑一个简单一点的问题，已经知道&lt;span class=&#34;math inline&#34;&gt;\(x,x^2,x^3,\ldots,x^n\)&lt;/span&gt;，怎么求出&lt;span class=&#34;math inline&#34;&gt;\(x^{n+1}\)&lt;/span&gt;. 这个显然用脚都能求出来. 但是现在它是一堆东西加起来，所以应该使用线性的方法，换句话说可以考虑把&lt;span class=&#34;math inline&#34;&gt;\(x^{n+1}\)&lt;/span&gt;表示成&lt;span class=&#34;math inline&#34;&gt;\(x,x^2,x^3,\ldots,x^n\)&lt;/span&gt;的线性组合. 回忆一下在哪里干过类似的事，可以联想到求常系数线性递推的时候，把&lt;span class=&#34;math inline&#34;&gt;\(M^n\)&lt;/span&gt;表示成&lt;span class=&#34;math inline&#34;&gt;\(I,M,M^2,\ldots,M^{n-1}\)&lt;/span&gt;的线性组合. 当时是利用了&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;的化零多项式，容易想到现在也要构造一个多项式&lt;span class=&#34;math inline&#34;&gt;\(p(t)\)&lt;/span&gt;使得&lt;span class=&#34;math inline&#34;&gt;\(f _{b _1},f _{b _2},\ldots,f _{b _n}\)&lt;/span&gt;是它的根，显然&lt;span class=&#34;math inline&#34;&gt;\(p(t)=\prod(t-f _{b _i})\)&lt;/span&gt;，这个用分治fft来求就可以了.&lt;/p&gt;
&lt;p&gt;下面考虑一下如何更高效地求出&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;. 我们知道&lt;span class=&#34;math inline&#34;&gt;\(f _i\)&lt;/span&gt;的生成函数&lt;span class=&#34;math inline&#34;&gt;\(F(z)=\frac{1-\sqrt{1-4z^2-16z^3-16z^4}}{2z(1+2z)}\)&lt;/span&gt;，这是一个多项式开根的经典题目，但是这里它有一个特殊性质，就是这些式子的次数都很低，不妨把它写成&lt;span class=&#34;math inline&#34;&gt;\(\frac{A(z)-\sqrt{C(z)}}{B(z)}\)&lt;/span&gt;的形式，先考虑怎么算&lt;span class=&#34;math inline&#34;&gt;\(D(z)/B(z)=X(z)\)&lt;/span&gt;，移项得到&lt;span class=&#34;math inline&#34;&gt;\(B(z)X(z)=D(z)\)&lt;/span&gt;，代入&lt;span class=&#34;math inline&#34;&gt;\(B(z)=2z(1+2z)\)&lt;/span&gt;，比较&lt;span class=&#34;math inline&#34;&gt;\(z^n\)&lt;/span&gt;的系数，得到&lt;span class=&#34;math inline&#34;&gt;\(d _n=2x _{n-1}+4x _{n-2}\)&lt;/span&gt;，即&lt;span class=&#34;math inline&#34;&gt;\(x _n=\frac{d _{n+1}-4x _{n-1}}{2}\)&lt;/span&gt;，这样就可以线性递推了. 接下来考虑怎么计算&lt;span class=&#34;math inline&#34;&gt;\(\sqrt{C(z)}=Y(z)\)&lt;/span&gt;，求导得到&lt;span class=&#34;math inline&#34;&gt;\(Y^\prime(z)=\frac{C^\prime(z)Y(z)}{2C(z)}\)&lt;/span&gt;，即&lt;span class=&#34;math inline&#34;&gt;\(2C(z)Y^\prime(z)=C^\prime(z)Y(z)\)&lt;/span&gt;. 代入再比较&lt;span class=&#34;math inline&#34;&gt;\(z^n\)&lt;/span&gt;的系数，得到&lt;span class=&#34;math inline&#34;&gt;\(2((n+1)h _{n+1}-4(n-1)h _{n-1}-16(n-2)h _{n-2}-16(n-3)h _{n-3})=-8h _{n-1}-48h _{n-2}-64h _{n-3}\)&lt;/span&gt;，把下标平移一下再化简，得到&lt;span class=&#34;math inline&#34;&gt;\(nh _n=(4n-12)h _{n-2}+(16n-72)h _{n-3}+(16n-96)h _{n-4}\)&lt;/span&gt;. 这样就可以线性递推了.&lt;/p&gt;
&lt;p&gt;感觉有的时候求个导可以得到一些奇奇怪怪的但是有用的东西.&lt;/p&gt;- https://seraphim.rocks/posts/yali201807/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2305题解</title>
        <link>https://seraphim.rocks/posts/loj2305/</link>
        <pubDate>Wed, 27 Jun 2018 10:24:18 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2305/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2305/ -&lt;p&gt;又写了一遍，tarjan真的容易写错……&lt;/p&gt;
&lt;p&gt;如果没有x类型显然就是2SAT，如果有的话一个很自然的想法就是枚举它是A，B还是C. 但是注意到我们在做2SAT，只要把可能的情况限制在2种以内就可以了. 所以对于x类型的地图，可以枚举它不是A和它不是B两种情况（不需要枚举不是C，因为这肯定包含在前两种情况里面）.&lt;/p&gt;
&lt;p&gt;错误的tarjan：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tarjan&lt;/span&gt;(ele i){
	dfn[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	instack[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	stk[top&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]){
			tarjan(j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
			low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],low[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (instack[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]) low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (low[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;dfn[i]){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;j){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ans[stk[j]] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ans[stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ans[stk[j]];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r;
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			blg[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bcnt;
			&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;top;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (stk[top]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;i);
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;bcnt;
	}
	instack[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正确的tarjan：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tarjan&lt;/span&gt;(ele i){
	dfn[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	instack[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	stk[top&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]){
			tarjan(j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
			low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],low[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (instack[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]) low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (low[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;dfn[i]){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;j){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ans[stk[j]] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ans[stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ans[stk[j]];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r;
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			blg[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bcnt;
			instack[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;
			&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;top;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (stk[top]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;i);
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;bcnt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tarjan一定要注意栈的问题，目前发现的易错点一个是忘了弹栈（写圆方树的时候，如果是一条树边，需要弹栈），一个是在错误的地方弹栈（在有向图的dfs树里会有横叉边，instack里面 &lt;strong&gt;不能&lt;/strong&gt; 只保存当前点到根路径上的点，参考上面的代码）.&lt;/p&gt;
&lt;p&gt;完整的AC代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 100010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxm 200010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rl&lt;/span&gt;{
	ele i,hi,j,hj;
}a[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edge&lt;/span&gt;{
	ele v;
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nxt;
}ep[maxm],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ecnt;
ele n,d,m,tcnt,bcnt,top,stk[maxn],b[maxn],dfn[maxn],low[maxn],blg[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag,ans[maxn],instack[maxn];
edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;h[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addedge&lt;/span&gt;(ele u,ele v){
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ecnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[u];
	h[u]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;(ele i,ele j){
	j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;j;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tarjan&lt;/span&gt;(ele i){
	dfn[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	instack[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	stk[top&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]){
			tarjan(j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
			low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],low[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (instack[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]) low[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(low[i],dfn[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (low[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;dfn[i]){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;j){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ans[stk[j]] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ans[stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ans[stk[j]];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stk[j]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r;
			ans[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			blg[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bcnt;
			instack[stk[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;
			&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;top;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (stk[top]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;i);
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;bcnt;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;n){
		ecnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ep; memset(h,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[j].hi&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;b[a[j].i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			ele u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;idx(a[j].i,a[j].hi);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[j].hj&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;b[a[j].j]) addedge(u,u&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
				ele v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;idx(a[j].j,a[j].hj);
				addedge(u,v);
				addedge(v&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,u&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			}
		}
		memset(dfn,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(dfn)); tcnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bcnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		memset(ans,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ans));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;dfn[j]) tarjan(j);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (blg[j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;blg[j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j){
			ele u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(b[j]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ans[j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
			putchar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;u);
		}
		puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
		flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;){
		b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
		dfs(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		dfs(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		dfs(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%s%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;d,s,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		ele _a,c; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; b[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],d[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%s%d%s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;_a,b,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c,d);
		a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(rl){_a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,d[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;};
	}
	flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false; memset(instack,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(instack));
	dfs(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;flag) puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2305/ - </description>
        </item>
    
    
    
        <item>
        <title>loj6189题解</title>
        <link>https://seraphim.rocks/posts/loj6189/</link>
        <pubDate>Wed, 27 Jun 2018 08:09:36 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj6189/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj6189/ -&lt;p&gt;要知道某个数的最高位，其实就是要知道它对数的小数部分，于是可以想到维护对数的和.&lt;/p&gt;
&lt;p&gt;因为要给区间排序，容易想到线段树合并的做法，不过这里还要进行区间查询而非单点查询，理论上外面还需要套一个平衡树之类的东西，但这样就非常难写了.&lt;/p&gt;
&lt;p&gt;注意到线段树合并的做法本来外面套着一个类似ODT的东西，而这道题的排序操作正好就相当于是区间覆盖，所以外面可以套ODT而不是平衡树，就非常好写了.&lt;/p&gt;
&lt;p&gt;如果直接就这么交上去，你会发现前面有几个点T掉了，再仔细读一遍题，发现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于&lt;span class=&#34;math inline&#34;&gt;\(20\%\)&lt;/span&gt;的数据：没有操作1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还需要对这20分专门写个暴力.&lt;/p&gt;
&lt;p&gt;这种题精度很成问题，本来应该有spj，然后规定跟std输出不同的数不超过若干个就算A，可是这题没spj，那就得要跟出题人心灵相通了.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define db double
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 200010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define K 500000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mempool&lt;/span&gt;{
	T &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t;
	mempool(){ s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alloc&lt;/span&gt;(){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; T[K])&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;K),s&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	}
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;{
	ele s;
	db s1;
	node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r;
	node(){ s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL; }
};
ele n,m,a[maxn],tg[maxn];
db s1,s[maxn];
set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; S;
node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;T[maxn];
mempool&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; np;
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maintain&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x){
	x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l) x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s,x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r) x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s,x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1;
}
node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upd&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,ele u,ele v,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x) x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np.alloc();
	x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;log10(i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (u&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;v){
		ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(u&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;v)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;mid) x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;upd(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l,u,mid,i);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;upd(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r,mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,v,i);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}
node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a,node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;a) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;b) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
	a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s; a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1;
	a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l,b&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l);
	a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r,b&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,ele k,ele u,ele v,node&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;amp;&lt;/span&gt;a,node&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;amp;&lt;/span&gt;b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x){ a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;; }
	node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np.alloc();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r){
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k; x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k;
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;log10(u)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s; x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;log10(u)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s;
		a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	ele s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(u&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;v)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;s){
		split(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l,k,u,mid,a,b);
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a; maintain(p);
		x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b; maintain(x);
		a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		split(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r,k&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s,mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,v,a,b);
		x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a; maintain(x);
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b; maintain(p);
		a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (S.find(i)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;S.end()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	S.insert(i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S.find(i),it1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;it,it2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;it; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;it1; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;it2;
	tg[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tg[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tg[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1]) split(T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it&lt;span style=&#34;color:#f92672&#34;&gt;-*&lt;/span&gt;it1,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n,T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1],T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; split(T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it2&lt;span style=&#34;color:#f92672&#34;&gt;-*&lt;/span&gt;it,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n,T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it],T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it1]);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
		S.insert(i);
		T[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;upd(NULL,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n,a[i]);
		tg[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		s[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;log10(a[i]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) s[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;s[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
	s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	S.insert(n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		ele op,l,r,f;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;op,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;l,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r); &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;l,&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;r;
		split(l); split(r&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
			flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;
			scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;f);
			node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S.find(l); &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r;){
				p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(p,T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it]);
				S.erase(it&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;);
			}
			S.insert(l);
			T[l]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p; tg[l]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
			db tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s[r]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s[l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S.find(l); &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;it)
					tmp&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;T[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s1;
			tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;trunc(tmp);
			ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;exp(log(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp);
			printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,ans);
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj6189/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2664题解</title>
        <link>https://seraphim.rocks/posts/loj2664/</link>
        <pubDate>Tue, 26 Jun 2018 14:45:13 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2664/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2664/ -&lt;p&gt;把所有向量组合成一个&lt;span class=&#34;math inline&#34;&gt;\(n\times d\)&lt;/span&gt;的矩阵&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，那么问题其实就是判断&lt;span class=&#34;math inline&#34;&gt;\(AA^T=B\)&lt;/span&gt;除了对角线上是否存在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;（模&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;意义下）.&lt;/p&gt;
&lt;p&gt;先忽略对角线这个问题，判断&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;中是否存在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，如果&lt;span class=&#34;math inline&#34;&gt;\(k=2\)&lt;/span&gt;，其实就是要判断&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;是否为全&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;矩阵. 判断是否相等有一个套路，就是随机一个&lt;span class=&#34;math inline&#34;&gt;\(1\times n\)&lt;/span&gt;的向量&lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;，判断&lt;span class=&#34;math inline&#34;&gt;\(XAA^T\)&lt;/span&gt;是否等于&lt;span class=&#34;math inline&#34;&gt;\(XB\)&lt;/span&gt;，这样时间复杂度降至&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(nd)\)&lt;/span&gt;. 如果判断发现相等，错误率为&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{2}\)&lt;/span&gt;，重复若干次即可让错误率足够小.&lt;/p&gt;
&lt;p&gt;下面考虑&lt;span class=&#34;math inline&#34;&gt;\(k=3\)&lt;/span&gt;的情况. 如果&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;中不存在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;中的元素仍可能为&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;或&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;. 定义&lt;span class=&#34;math inline&#34;&gt;\(C _{i,j}=B _{i,j}^2\)&lt;/span&gt;，那么如果&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;中不存在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，则&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;为全&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;矩阵，关键是表示出这个&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;. 注意到&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\left(\sum _{i=1}^da _ib _i\right)^2=\sum _{i=1}^d\sum _{j=1}^da _ia _jb _ib _j
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;于是把输入的&lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;维向量都变成&lt;span class=&#34;math inline&#34;&gt;\(d^2\)&lt;/span&gt;维的向量，就可以处理&lt;span class=&#34;math inline&#34;&gt;\(k=3\)&lt;/span&gt;的情况了.&lt;/p&gt;
&lt;p&gt;接下来处理对角线. 注意到我们可以直接在&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(nd)\)&lt;/span&gt;的时间内把对角线计算出来，那么&lt;span class=&#34;math inline&#34;&gt;\(XB\)&lt;/span&gt;考虑对角线之后的值也可以高效算得.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 100010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxd 110
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; io{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[size],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buf,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buf;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gc&lt;/span&gt;(){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buf)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fread(buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,size,stdin)),s&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;EOF:&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; gi(I&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gc())&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;);
		a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gc())&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;gi;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele mul[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;},{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;},{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}};
ele n,d,d1,k,a[maxn][maxd],b[maxn],c[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;],dg[maxn],dst[maxn],p[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;],q[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(ele i,ele j){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;mul[a[i][p[j]]][a[i][q[j]]];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; add(ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,ele b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;((a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;k)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	gi(n); gi(d); gi(k); d1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;d:d&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) gi(a[i][j]),a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;k;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) p[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i,q[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		dg[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d1; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) add(dg[i],A(i,j));
	}
	ele K&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (K&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		ele s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
			b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rand()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;k;
			add(s,b[i]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
			dst[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s,add(dst[i],mul[b[i]][dg[i]]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;k);
		memset(c,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(c));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d1; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
				add(c[i],mul[b[j]][A(j,i)]);
		memset(b,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(b));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d1; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
				add(b[i],mul[c[j]][A(i,j)]);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b[i]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;dst[i]){
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j){
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;j) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
					ele s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;r)
						add(s1,mul[a[i][r]][a[j][r]]);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;s1){
						printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,min(i,j)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,max(i,j)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
						&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
					}
				}
			}
	}
	puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1 -1&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2664/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2249题解</title>
        <link>https://seraphim.rocks/posts/loj2249/</link>
        <pubDate>Tue, 26 Jun 2018 09:03:45 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2249/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2249/ -&lt;p&gt;一开始居然脑子短路没有想到斜率优化……以后看到这种感觉跟凸包有关系，要求最值/要最优化的问题，可以考虑写个dp方程出来看看能不能斜率优化.&lt;/p&gt;
&lt;p&gt;首先考虑链上，没有&lt;span class=&#34;math inline&#34;&gt;\(l _v\)&lt;/span&gt;的限制的情况，可以写出dp方程&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
这显然可以斜率优化，把$j$看成点$(d _j,\textrm{res} _j)$，那么使得答案最优的转移点一定在凸包上.

接下来考虑$l _v$的限制. 这个限制导致了一个问题，就是我们寻找转移点的时候，要在某个区间$[k,i)$上找，而不是在$[0,i)$上. 用二进制分组可以解决这个问题.

接下来考虑放到树上. 树造成了一个新的问题，如果我们直接做斜率优化的树形dp，就要支持在末端加入或者删除一个点，并维护凸包. 二进制分组理论上是只能加点的，否则摊还分析就会失效. 这里有一个简单的方法：只有在分裂了一个很大的块的时候，才会有很大的时间开销，因此我们可以随机地加入一些无用的点，就比较难卡掉了. &lt;del&gt;出题人好像没有考虑过这个算法，所以直接暴力删除也能过，还更快. &lt;/del&gt;

其实还有一些更靠谱的做法，比方说二进制分组靠谱的删除方法，类似替罪羊树的懒惰删除&lt;del&gt;，但是我不想写&lt;/del&gt;. 或者树上问题转为链上问题的经典思路树剖，即在重链上二进制分组，重链之间直接暴力. 或者带根的点分治&lt;del&gt;，晚点再研究&lt;/del&gt;.

有一个坑点是构建凸包的时候直接做叉积会爆long long

代码：
```cpp
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#define ele long long
#define db double
using namespace std;
#define maxn 400010
const ele M=1&lt;&lt;19;
const ele size=M&lt;&lt;1;
const ele INF=1e18;
struct edge{
	ele v;
	edge *nxt;
}ep[maxn],*ecnt;
struct pt{
	ele x,y;
}seq[maxn];
inline pt operator+(pt a,pt b){
	return (pt){a.x+b.x,a.y+b.y};
}
inline pt operator-(pt a,pt b){
	return (pt){a.x-b.x,a.y-b.y};
}
inline ele cross(pt a,pt b){
	return a.x*b.y-a.y*b.x;
}
inline db test(pt a,pt b){
	if (!a.x) return 0;
	return (db)b.y/b.x-(db)a.y/a.x;
}
ele n,ty,tot,top,a[size],b[maxn],stk[maxn],f[maxn],s[maxn],p[maxn],q[maxn],l[maxn],res[maxn],d[maxn];
edge *h[maxn];
vector&lt;pt&gt; v[size];
inline void addedge(ele u,ele v){
	edge *p=ecnt++;
	p-&gt;v=v; p-&gt;nxt=h[u];
	h[u]=p;
}
inline void build(vector&lt;pt&gt;&amp;v,ele l,ele r){
	v.clear();
	for (int i=l; i&lt;=r; ++i){
		if (!seq[i].x &amp;&amp; seq[i].y==INF) continue;
		while (v.size()&gt;1 &amp;&amp; test(v[v.size()-1]-v[v.size()-2],seq[i]-v[v.size()-1])&lt;1e-6)
			v.pop_back();
		v.push_back(seq[i]);
	}
}
inline void upd(ele i,ele k){
	ele L=1;
	i+=M;
	for (; i; i&gt;&gt;=1,L&lt;&lt;=1){
		a[i]+=k;
		if (a[i]==L){
			ele j=i,k=i;
			while (j&lt;M) j&lt;&lt;=1,k=k&lt;&lt;1|1;
			build(v[i],j-M,k-M);
		}
	}
}
inline void push(pt p){
	seq[tot]=p;
	upd(tot++,1);
}
inline void push(ele i){
	push((pt){d[i],res[i]});
	if (rand()&amp;1) push((pt){0,INF});
}
inline void pop(){
	upd(--tot,-1);
}
inline ele calc(pt v,ele d,ele p,ele q){
	return (d-v.x)*p+q+v.y;
}
inline ele qry(vector&lt;pt&gt;&amp;v,ele d,ele p,ele q){
	if (!v.size()) return INF;
	ele L=-1,R=v.size()-1;
	while (R-L&gt;1){
		ele mid=(L+R)&gt;&gt;1;
		if (calc(v[mid],d,p,q)&gt;=calc(v[mid+1],d,p,q)) L=mid; else R=mid;
	}
	return calc(v[R],d,p,q);
}
inline ele qry(ele l,ele r,ele d,ele p,ele q){
	ele ans=1e18;
	for (l=l+M-1,r=r+M+1; l^r^1; l&gt;&gt;=1,r&gt;&gt;=1){
		if (~l&amp;1) ans=min(ans,qry(v[l^1],d,p,q));
		if (r&amp;1) ans=min(ans,qry(v[r^1],d,p,q));
	}
	return ans;
}
void dfs(ele i){
	if (i){
		ele L=-1,R=top-1;
		while (R-L&gt;1){
			ele mid=(L+R)&gt;&gt;1;
			if (d[i]-d[stk[mid]]&lt;=l[i]) R=mid; else L=mid;
		}
		res[i]=qry(b[stk[R]],tot-1,d[i],p[i],q[i]);
	}
	stk[top++]=i;
	b[i]=tot;
	push(i);
	for (edge *j=h[i]; j; j=j-&gt;nxt) d[j-&gt;v]=d[i]+s[j-&gt;v],dfs(j-&gt;v);
	--top;
	do{
		pop();
	}
	while (seq[tot].x!=d[i] || seq[tot].y!=res[i]);
}
int main(){
	scanf(&#34;%lld%lld&#34;,&amp;n,&amp;ty);
	ecnt=ep; memset(h,0,sizeof(h));
	for (int i=1; i&lt;n; ++i)
		scanf(&#34;%lld%lld%lld%lld%lld&#34;,f+i,s+i,p+i,q+i,l+i),--f[i],addedge(f[i],i);
	d[0]=0; top=0; tot=1;
	dfs(0);
	for (int i=1; i&lt;n; ++i) printf(&#34;%lld\n&#34;,res[i]);
	return 0;
}
```
\]&lt;/span&gt;&lt;/p&gt;- https://seraphim.rocks/posts/loj2249/ - </description>
        </item>
    
    
    
        <item>
        <title>bzoj3533题解</title>
        <link>https://seraphim.rocks/posts/bzoj3533/</link>
        <pubDate>Mon, 25 Jun 2018 19:55:55 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/bzoj3533/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/bzoj3533/ -&lt;p&gt;容易发现答案一定在凸包上，询问的&lt;span class=&#34;math inline&#34;&gt;\(y\lt 0\)&lt;/span&gt;则在上凸壳，否则在下凸壳.&lt;/p&gt;
&lt;p&gt;容易发现&lt;span class=&#34;math inline&#34;&gt;\(A\cup B\)&lt;/span&gt;凸包上的点一定在&lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;或&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;的凸包上，所以可以考虑用线段树来维护，每个节点保存对应区间的凸包，每个询问查询&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log n)\)&lt;/span&gt;个线段树上的节点.&lt;/p&gt;
&lt;p&gt;但是这里有一个问题，凸包无法高效合并，插入也很麻烦，但是如果知道最后的点集的话离线构建是非常容易的. 这种情况一般可以考虑二进制分组. 对于本题，把二进制分组放到线段树上，也就是说当一个节点对应的区间被填满的时候，再构建这个节点的凸包.&lt;/p&gt;
&lt;p&gt;有一个细节一定要记住：求凸壳的时候两维坐标都要排序：从大到小和从小到大都没问题，两个维度顺序相反也没问题，但是一定要排序. &lt;!-- raw HTML omitted --&gt;我也不是很清楚为什么. &lt;!-- raw HTML omitted --&gt;以后遇到给struct排序的情况，最好是给每一个属性都定一个顺序.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 400010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele M&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pt&lt;/span&gt;{
	ele x,y;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(pt b)&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;b.x&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.x:y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.y;
	}
}p[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; pt &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(pt a,pt b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (pt){a.x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b.x,a.y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b.y};
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; pt &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(pt a,pt b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (pt){a.x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.x,a.y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.y};
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;dot&lt;/span&gt;(pt a,pt b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a.x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a.y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.y;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;cross&lt;/span&gt;(pt a,pt b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a.x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a.y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.x;
}
ele n,lastans,a[size];
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ty[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v1[size],v2[size];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;(ele x){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(lastans&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fffffff&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maintain&lt;/span&gt;(ele i){
	a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;v1,vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;v2,ele l,ele r){
	ele top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; pt q[maxn];
	memcpy(q,p&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;l,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(pt)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	sort(q,q&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (top&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cross(v1[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v1[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],q[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v1[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;top,v1.pop_back();
		v1.push_back(q[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]);
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top;
	}
	top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (top&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cross(v2[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v2[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],q[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v2[top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;top,v2.pop_back();
		v2.push_back(q[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]);
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upd&lt;/span&gt;(ele i){
	ele L&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i; i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;M;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; i; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[i];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;L) build(v1[i],v2[i],j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;L&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,j);
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;qry&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;v,pt p){
	ele L&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,R&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (R&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(L&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;R)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dot(v[mid],p)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;dot(v[mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],p)) L&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mid; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; R&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mid;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dot(v[R],p);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;qry&lt;/span&gt;(ele l,ele r,pt p){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1e18&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max(ans,p.y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;qry(v1[l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],p)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;qry(v2[l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],p));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max(ans,p.y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;qry(v1[r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],p)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;qry(v2[r&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],p));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld%s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,ty);
	memset(a,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(a));
	lastans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	ele i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; op[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
		ele x,y,l,r;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s%lld%lld&amp;#34;&lt;/span&gt;,op,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;y);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ty[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;) x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;decode(x),y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;decode(y);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;){
			p[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(pt){x,y};
			upd(i);
			&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
			scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld%lld&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;l,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ty[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;) l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;decode(l),r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;decode(r);
			printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,lastans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;qry(l,r,(pt){x,y}));
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/bzoj3533/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2248题解</title>
        <link>https://seraphim.rocks/posts/loj2248/</link>
        <pubDate>Mon, 25 Jun 2018 15:27:41 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2248/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2248/ -&lt;p&gt;vfk说分不清noi2014和noip2014果然是有道理的……&lt;/p&gt;
&lt;p&gt;因为要求字典序最小，可以直接从小到大枚举每个数，如果能加进字典序中，就贪心地加进去，正确性显然.&lt;/p&gt;
&lt;p&gt;现在问题是怎么判断一个数能否加在当前的字典序里面. 注意到一条路径合法等价于它的横坐标和纵坐标均单调不减，维护&lt;span class=&#34;math inline&#34;&gt;\(c _i\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(d _i\)&lt;/span&gt;表示当前已经加进去的点中，横坐标为&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;的点的最小值和最大值. 每次加入一个点，先用zkw线段树找出小于它的最大的横坐标和大于它的最小的横坐标，假设为&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，判断它的纵坐标是否在&lt;span class=&#34;math inline&#34;&gt;\(d _j\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(c _k\)&lt;/span&gt;之间即可.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 5010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele M&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
ele n,m,Q,x0,A,B,C,D,a[maxn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;maxn],p[maxn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;maxn],c[maxn],d[maxn],ans[maxn&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; b[size];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maintain&lt;/span&gt;(ele i){
	b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upd&lt;/span&gt;(ele i){
	i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;M; b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) maintain(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;_getl&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M:(b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;_getl(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;_getl(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getl&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b[i&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;_getl(i&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;getl(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;_getr&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M:(b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;_getr(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;_getr(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getr&lt;/span&gt;(ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b[i&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;_getr(i&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;getr(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(ele i){
	ele x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p[i]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getl(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M),k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getr(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; d[j]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;c[k];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d%d%d%d%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x0,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;A,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;B,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;C,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;D,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Q);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		x0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;((ll)A&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;D&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;D&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(ll)B&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;D&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;C)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;D;
		swap(a[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],a[x0&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (Q&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		ele u,v;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;u,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v);
		swap(a[u&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],a[v&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) p[a[i]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	memset(b,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(b));
	b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b[n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;M]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;M&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) maintain(i);
	memset(c,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(c)); memset(d,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(d));
	c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; c[n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cnt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (test(i)){
			ans[cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
			ele x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p[i]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;c[x]) c[x]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(c[x],y),d[x]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max(d[x],y);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; c[x]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[x]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y;
			upd(x);
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) printf(i&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,ans[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2248/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2131题解</title>
        <link>https://seraphim.rocks/posts/loj2131/</link>
        <pubDate>Mon, 25 Jun 2018 11:07:13 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2131/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2131/ -&lt;p&gt;首先注意到选择了一个数就是选择了它的所有素因子，而不超过&lt;span class=&#34;math inline&#34;&gt;\(\sqrt{n}\)&lt;/span&gt;的素数至多只有8个，可以考虑状压. &lt;!-- raw HTML omitted --&gt;超过的那些我们先不管.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我一开始想的是枚举每个素数被分在哪边，这样是&lt;span class=&#34;math inline&#34;&gt;\(3^8\)&lt;/span&gt;的，但是我没想出来. 事实上完全可以暴力一点到&lt;span class=&#34;math inline&#34;&gt;\(4^8\)&lt;/span&gt;，这样可以把状态表示为&lt;span class=&#34;math inline&#34;&gt;\((s _1,s _2)\)&lt;/span&gt;，即第一个人选了集合&lt;span class=&#34;math inline&#34;&gt;\(s _1\)&lt;/span&gt;，第二个人选了集合&lt;span class=&#34;math inline&#34;&gt;\(s _2\)&lt;/span&gt;（可以有交），最后把所有&lt;span class=&#34;math inline&#34;&gt;\(s _1\cap s _2=\emptyset\)&lt;/span&gt;的状态的答案加起来即可.&lt;/p&gt;
&lt;p&gt;现在考虑大于&lt;span class=&#34;math inline&#34;&gt;\(\sqrt{n}\)&lt;/span&gt;的素因子，每个数最多只有一个，因此我们可以把数按照这个素因子来分类. 我一开始的想法是对每一类分别dp再合并起来，但是发现不方便合并. 很多这种不方便合并的情况，可以考虑在前一个的基础上去dp下一个.&lt;/p&gt;
&lt;p&gt;具体来讲，让&lt;span class=&#34;math inline&#34;&gt;\(f _{j,k}\)&lt;/span&gt;表示之前dp出来的结果，dp出&lt;span class=&#34;math inline&#34;&gt;\(g _{j,k}\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(h _{j,k}\)&lt;/span&gt;分别表示只有第一/二个人能选当前这一类，最后两人选的集合为&lt;span class=&#34;math inline&#34;&gt;\(j,k\)&lt;/span&gt;的方案数，最后再让&lt;span class=&#34;math inline&#34;&gt;\(f _{j,k}=g _{j,k}+h _{j,k}-f _{j,k}\)&lt;/span&gt;，最后一项是因为两个人都不选这一类的情况被算了两次.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 510
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define K 8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxs (1&amp;lt;&amp;lt;8)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele p[]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;};
ele n,P,f[maxs][maxs],g[maxs][maxs],h[maxs][maxs],t1[maxs][maxs],t2[maxs][maxs];
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getv&lt;/span&gt;(ele x,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; setv(ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x,ele i,ele k){
	x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i);
	x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;(k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; add(ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,ele b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;((a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;P)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;P);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i,s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;p[j]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
				setv(s,j,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;p[j]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) tmp&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;p[j];
			}
		v[tmp].push_back(s);
	}
	memset(f,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(f)); f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].size(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		memcpy(t1,f,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(f));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f[j][k]){
					add(t1[j&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i]][k],f[j][k]);
					add(t1[j][k&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i]],f[j][k]);
				}
		memcpy(f,t1,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(f));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v[i].size()){
			memcpy(g,f,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(g)); memcpy(h,f,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;v[i].size(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;r){
				memcpy(t1,g,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(g)); memcpy(t2,h,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
					&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k){
						add(t1[j&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;v[i][r]][k],g[j][k]);
						add(t2[j][k&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;v[i][r]],h[j][k]);
					}
				memcpy(g,t1,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(g)); memcpy(h,t2,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k){
					f[j][k]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f[j][k];
					add(add(f[j][k],g[j][k]),h[j][k]);
				}
		}
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;maxs; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;k)) add(ans,f[j][k]);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,ans);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2131/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2085题解</title>
        <link>https://seraphim.rocks/posts/loj2085/</link>
        <pubDate>Mon, 25 Jun 2018 08:38:52 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2085/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2085/ -&lt;p&gt;挺优美的一道数论题. 当然也有可能是我太菜了.&lt;/p&gt;
&lt;p&gt;首先显然是考虑只计算既约分数来避免算重，即只计算&lt;span class=&#34;math inline&#34;&gt;\(x\perp y\)&lt;/span&gt;. 考虑&lt;span class=&#34;math inline&#34;&gt;\(k=10\)&lt;/span&gt;的时候，&lt;span class=&#34;math inline&#34;&gt;\(\frac{x}{y}\)&lt;/span&gt;符合题目条件当且仅当&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;没有因数&lt;span class=&#34;math inline&#34;&gt;\(2,5\)&lt;/span&gt;. 容易证明对于所有情况，&lt;span class=&#34;math inline&#34;&gt;\(\frac{x}{y}\)&lt;/span&gt;符合题目条件等价于&lt;span class=&#34;math inline&#34;&gt;\(y\perp k\)&lt;/span&gt;. 所以我们要计算的其实就是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
一开始我很傻地把两个中括号都拆开了，其实应该先只拆一个观望一下. 因为$[x\perp y]$这一项复杂一些，所以考虑先拆这个&lt;del&gt;（其实还是在瞎猜）&lt;/del&gt;，得到

$$\begin{aligned}&amp;\sum _{y=1}^m[y\perp k]\sum _{x=1}^n\sum _{d|x,~d|y}\mu(d)\\=&amp;\sum _{y=1}^m[y\perp k]\sum _{d|y}^n\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\\=&amp;\sum _{d=1}^n\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\sum _{y=1}^{\lfloor m/d\rfloor}[dy\perp k]\\=&amp;\sum _{d=1}^n[d\perp k]\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\sum _{y=1}^{\lfloor m/d\rfloor}[y\perp k]\end{aligned}$$

定义$f(n)=\sum _{y=1}^m[y\perp k]$，那么有$f(km+r)=mf(k)+f(r)~(0\le r\lt k)$，所以预处理$f(1),f(2),\ldots,f(k)$就可以$\mathcal O(1)$计算了. 之前的式子化为

$$\sum _{d=1}^n[d\perp k]\mu(d)\left\lfloor\frac{n}{d}\right\rfloor f(\left\lfloor\frac{m}{d}\right\rfloor)$$

对这个式子整除分块，于是我们需要快速计算

$$f(n,k)=\sum _{d=1}^n[d\perp k]\mu(d)$$

如果没有$[d\perp k]$，那就是一个简单的杜教筛，现在加上这一项，&lt;del&gt;它还是积性函数没关系&lt;/del&gt;就可以考虑从总和里面去掉不互质的，设$k=p^rq$，其中$p$为素数，$p\perp q$，那么有

$$\begin{aligned}f(n,k)=&amp;f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[py\perp q]\mu(py)\\=&amp;f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp q]\mu(py)\\=&amp;f(n,q)-\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp q][y\perp p]\mu(p)\mu(y)\\=&amp;f(n,q)+\sum _{y=1}^{\lfloor n/p\rfloor}[y\perp k]\mu(y)\\=&amp;f(n,q)+f(\left\lfloor\frac{n}{p}\right\rfloor,k)\end{aligned}$$

然后注意到$f(n,1)$可以直接杜教筛，这道题就可以做了.

代码：
```cpp
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#define ele long long
using namespace std;
#define maxn 1000010
#define maxk 2010
template&lt;class T1,class T2&gt;struct hashmap{
	static const ele R=8000009;
	T1 a[R];
	T2 b[R];
	bool c[R];
	hashmap(){ memset(c,0,sizeof(c)); }
	inline ele find(T1 x){
		ele i=x%R;
		for (; c[i] &amp;&amp; a[i]!=x; (i+=1)%=R);
		return i;
	}
	inline bool test(T1 x){ return c[find(x)]; }
	inline T2&amp; operator[](T1 x){
		ele i=find(x);
		!c[i] &amp;&amp; (c[i]=true,a[i]=x,b[i]=0);
		return b[i];
	}
};
ele n,m,k,S,f[maxk],pcnt,plst[maxn],mu[maxn],qcnt,q[maxk];
bool flag[maxn];
hashmap&lt;ele,ele&gt; g;
ele gcd(ele a,ele b){
	return b?gcd(b,a%b):a;
}
ele calc(ele n){
	if (n&lt;=S) return mu[n];
	if (g.test(n)) return g[n];
	g[n]=1;
	for (ele d=n; d&gt;1; ){
		ele d1=max(1ll,n/(n/d+1));
		g[n]-=calc(n/d)*(d-d1);
		d=d1;
	}
	return g[n];
}
inline ele calcf(ele n){
	return f[k]*(n/k)+f[n%k];
}
ele calcg(ele n,ele i){
	if (!i) return calc(n);
	if (!n) return 0;
	if (n==1) return 1;
	return calcg(n,i-1)+calcg(n/q[i-1],i);
}
int main(){
	scanf(&#34;%lld%lld%lld&#34;,&amp;n,&amp;m,&amp;k);
	S=exp(log(n)/3*2);
	f[0]=0;
	for (int i=1; i&lt;=k; ++i) f[i]=f[i-1]+(gcd(i,k)==1);
	mu[1]=1; pcnt=0; memset(flag,0,sizeof(flag));
	for (int i=2; i&lt;=S; ++i){
		if (!flag[i]) plst[pcnt++]=i,mu[i]=-1;
		for (int j=0; j&lt;pcnt &amp;&amp; i*plst[j]&lt;=S; ++j){
			flag[i*plst[j]]=true;
			if (i%plst[j]) mu[i*plst[j]]=-mu[i];
			else{
				mu[i*plst[j]]=0;
				break;
			}
		}
	}
	mu[0]=0;
	for (int i=2; i&lt;=S; ++i) mu[i]+=mu[i-1];
	ele tmp=k; qcnt=0;
	for (int i=2; i*i&lt;=k; ++i)
		if (tmp%i==0){
			q[qcnt++]=i;
			while (tmp%i==0) tmp/=i;
		}
	tmp&gt;1 &amp;&amp; (q[qcnt++]=tmp);
	ele ans=0;
	for (ele d=min(n,m); d; ){
		ele d1=n/(n/d+1),d2=m/(m/d+1);
		d1=max(d1,d2);
		ans+=calcf(m/d)*(n/d)*(calcg(d,qcnt)-calcg(d1,qcnt));
		d=d1;
	}
	printf(&#34;%lld\n&#34;,ans);
	return 0;
}
```\]&lt;/span&gt;&lt;/p&gt;- https://seraphim.rocks/posts/loj2085/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2306题解</title>
        <link>https://seraphim.rocks/posts/loj2306/</link>
        <pubDate>Mon, 25 Jun 2018 08:24:26 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2306/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2306/ -&lt;p&gt;这题面写得有毒……应该理解为对于第&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;种蔬菜，有&lt;span class=&#34;math inline&#34;&gt;\(x _i\)&lt;/span&gt;个单位只能在第一天卖，有&lt;span class=&#34;math inline&#34;&gt;\(x _i\)&lt;/span&gt;个单位只能在第二天结束前卖，以此类推. 也就是说，说你把当天结束本来要变质的蔬菜卖了，那天就不会有蔬菜变质了.&lt;/p&gt;
&lt;p&gt;那么我们就有一个朴素的贪心策略：每种蔬菜尽量等到它快要变质了才卖，也就是时间上从后往前贪心. 如果有两种蔬菜要抢夺某一天出售的机会，那肯定是从贵的开始贪心.&lt;/p&gt;
&lt;p&gt;这个算法看上去很正确，但是它没有办法处理&lt;span class=&#34;math inline&#34;&gt;\(s _i\)&lt;/span&gt;. 方法是把每种蔬菜拆成两部分：&lt;span class=&#34;math inline&#34;&gt;\((a _i,c _i-1)\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\((a _i+s _i,1)\)&lt;/span&gt;，后者的过期时间即为该种蔬菜最晚的销售时间，然后把所有这些东西按价格排序，每种价格从后往前贪心就可以了. 每种蔬菜在某一天可以销售的量等于贪心到那个时候还剩下的量减去那天之前变质的量. 要用并查集或者set来查询上一个还可以销售的时间.&lt;/p&gt;
&lt;p&gt;但是这样只能处理一个询问. 用反证法容易证明&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;天的答案一定是&lt;span class=&#34;math inline&#34;&gt;\(k+1\)&lt;/span&gt;天的答案的子集，而在较后时间出售的蔬菜在较前的时间显然也可以出售，那么只需要对&lt;span class=&#34;math inline&#34;&gt;\(\max p _i\)&lt;/span&gt;算出答案，然后每天去掉最廉价的若干单位蔬菜就可以了. 每天需要去掉的量其实就是，把蔬菜的销售尽量往前放之后，当天销售的量.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 200010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele INF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1e18&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;{
	ele a,c,d,x;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(st b)&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;b.a&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.a:d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.d;
	}
}b[maxn];
ele n,m,K,mx,p[maxn],a[maxn],s[maxn],c[maxn],x[maxn],u[maxn],prv[maxn],r[maxn],res[maxn],f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000010&lt;/span&gt;];
priority_queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;st&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getf&lt;/span&gt;(ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;u,ele x){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; u[x]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;x:(u[x]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getf(u,u[x]));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uni&lt;/span&gt;(ele x,ele y){
	ele a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getf(u,x),b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getf(u,y);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;b) u[a]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld%lld%lld&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;K);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld%lld%lld%lld&amp;#34;&lt;/span&gt;,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i,s&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i,c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i,x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
	mx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,p&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i),mx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max(mx,p[i]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x[i]){
			ele d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(c[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(st){a[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s[i],&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
			b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(st){a[i],c[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,x[i]};
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
			b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(st){a[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s[i],&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,mx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
			b[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(st){a[i],c[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,mx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b[i].d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b[i].c) Q.push(b[i]);
	memset(u,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(u));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;mx; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) prv[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;m;
	prv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mx; u[mx]&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (Q.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; getf(u,mx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;mx){
		st k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Q.top(); Q.pop();
		ele d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getf(u,min(k.d,mx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;mx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; k.c){
			ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(k.c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k.x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d,r[d]);
			k.c&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;tmp; r[d]&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;tmp;
			ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;k.a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) f[cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;k.a;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;r[d]) uni(d,prv[d]);
			d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getf(u,prv[d]);
		}
	}
	sort(f,f&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;cnt);
	res[mx]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ans;
	ele tot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;mx; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) tot&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r[i];
	memset(r,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(r));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;mx; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) r[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(m,tot),tot&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;r[i];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i){
		res[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;res[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;r[i]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) res[i]&lt;span style=&#34;color:#f92672&#34;&gt;-=-&lt;/span&gt;f[&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;cnt];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,res[p[i]]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2306/ - </description>
        </item>
    
    
  </channel>
</rss> 