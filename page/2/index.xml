<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蒟蒻的博客</title>
    <link>https://seraphim.rocks/</link>
    <description>Recent content on 蒟蒻的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 11:40:51 +0800</lastBuildDate>
    
        <atom:link href="https://seraphim.rocks/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Arcsine</title>
        <link>https://seraphim.rocks/posts/arcsine/</link>
        <pubDate>Sun, 20 Jan 2019 21:24:26 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/arcsine/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/arcsine/ -&lt;p&gt;厚颜无耻地发一个自己写的小游戏.&lt;/p&gt;
&lt;p&gt;地址 &lt;a href=&#34;http://jwhj.github.io/arcsine/&#34;&gt;http://jwhj.github.io/arcsine/&lt;/a&gt; ，打开就能玩.&lt;/p&gt;
&lt;p&gt;源码放在 &lt;a href=&#34;https://github.com/jwhj/arcsine&#34;&gt;https://github.com/jwhj/arcsine&lt;/a&gt; ，写得很丑希望不要被嘲讽. &lt;del&gt;说得好像有人会看一样.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;游戏功能也许会在未来进一步完善. &lt;del&gt;毕竟我比较懒.&lt;/del&gt;&lt;/p&gt;- https://seraphim.rocks/posts/arcsine/ - </description>
        </item>
    
    
    
        <item>
        <title>用markdown做slides</title>
        <link>https://seraphim.rocks/posts/mdslide/</link>
        <pubDate>Sat, 15 Dec 2018 21:43:39 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/mdslide/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/mdslide/ -&lt;p&gt;厚颜无耻地把自己的项目发上来.&lt;/p&gt;
&lt;p&gt;其实也没写什么东西，就是把&lt;code&gt;reveal.js&lt;/code&gt;封装了一下. 这样就可以比较方便地用markdown直接写，也可以一条命令导出，方便在其他电脑上播放.&lt;/p&gt;
&lt;p&gt;暂时还没有写文档，也许会在有生之年补上.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jwhj/mdslide&#34;&gt;项目地址&lt;/a&gt;&lt;/p&gt;- https://seraphim.rocks/posts/mdslide/ - </description>
        </item>
    
    
    
        <item>
        <title>whj什么都不会系列-1</title>
        <link>https://seraphim.rocks/posts/sbwhj-1/</link>
        <pubDate>Fri, 14 Dec 2018 21:40:41 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/sbwhj-1/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/sbwhj-1/ -&lt;p&gt;退役了只有一直没怎么做题，感觉水平退步了不少，以前一些比较显然的思路现在可能都想不到了. 这样下去肯定是不行的，我尽量时不时做点&lt;del&gt;水&lt;/del&gt;题写点题解恢复一点智商吧.&lt;/p&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给定&lt;span class=&#34;math inline&#34;&gt;\(n,m\)&lt;/span&gt;，求有多少对&lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;满足&lt;span class=&#34;math inline&#34;&gt;\(1\le i\le n,1\le j\le m\)&lt;/span&gt;且&lt;span class=&#34;math inline&#34;&gt;\(\gcd(i,j)\)&lt;/span&gt;为素数.&lt;/p&gt;
&lt;p&gt;共&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;组数据.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^7,T\le 10^4\)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;解&#34;&gt;解&lt;/h3&gt;
&lt;p&gt;记&lt;span class=&#34;math inline&#34;&gt;\(f(n,m)=\sum _{i=1}^n\sum _{j=1}^m[i\perp j]\)&lt;/span&gt;，显然答案就是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\sum _{p\text{ is prime}}f([n/p],[m/p])
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面看&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;怎么算. 如果&lt;span class=&#34;math inline&#34;&gt;\(n=m\)&lt;/span&gt;，显然有&lt;span class=&#34;math inline&#34;&gt;\(f(n,n)=\sum _{i=1}^n\varphi(n)\)&lt;/span&gt;，预处理欧拉函数前缀和就可以做了.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\neq m\)&lt;/span&gt;的时候一个显然的套路就是莫比乌斯反演：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
f(n,m)=&amp;\sum _{i}\sum _{j}\sum _{d|\gcd(i,j)}\mu(d)\\
=&amp;\sum _{d}\mu(d) [n/d] [m/d]
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用整除分块可以做到&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\sqrt{n})\)&lt;/span&gt;的复杂度，从而每次询问是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^{3/4})\)&lt;/span&gt;， 但这还是太慢了.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;前面都是废话.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;本身的计算已经没什么办法优化了，考虑代入&lt;span class=&#34;math inline&#34;&gt;\(f([n/p],[m/p])\)&lt;/span&gt;，得到&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\sum _{p\text{ is prime}}f([n/p],[m/p])=&amp;\sum _{p\text{ is prime}}\sum\mu(d) [n/(pd)] [m/(pd)]\\
=&amp;\sum _{T}[n/T] [m/T]\sum _{p|T,p\text{ is prime}}\mu(T/p)
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;记&lt;span class=&#34;math inline&#34;&gt;\(g(T)=\sum _{p|T,p\text{ is prime}}\mu(T/p)\)&lt;/span&gt;，观察一下可以发现&lt;span class=&#34;math inline&#34;&gt;\(g(n)\)&lt;/span&gt;很有规律.&lt;/p&gt;
&lt;p&gt;记&lt;span class=&#34;math inline&#34;&gt;\(s _1(n),s _2(n)\)&lt;/span&gt;分别为&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;的不同素因数个数和歌素因数的指数和，那么当&lt;span class=&#34;math inline&#34;&gt;\(s _1(n)=s _2(n)\)&lt;/span&gt;时，&lt;span class=&#34;math inline&#34;&gt;\(g(T)=-s _1(n)(-1)^{s _1(n)}\)&lt;/span&gt;，当&lt;span class=&#34;math inline&#34;&gt;\(s _1(n)+1=s _2(n)\)&lt;/span&gt;时，&lt;span class=&#34;math inline&#34;&gt;\(g(T)=(-1)^{s _1(n)}\)&lt;/span&gt;，当&lt;span class=&#34;math inline&#34;&gt;\(s _1(n)+2\le s _2(n)\)&lt;/span&gt;时，&lt;span class=&#34;math inline&#34;&gt;\(g(T)=0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;于是就可以很容易地处理&lt;span class=&#34;math inline&#34;&gt;\(g(n)\)&lt;/span&gt;的前缀和，进而&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\sqrt{n})\)&lt;/span&gt;地处理每次询问.&lt;/p&gt;- https://seraphim.rocks/posts/sbwhj-1/ - </description>
        </item>
    
    
    
        <item>
        <title>O(1)快速乘</title>
        <link>https://seraphim.rocks/posts/fastmul/</link>
        <pubDate>Fri, 30 Nov 2018 22:19:28 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/fastmul/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/fastmul/ -&lt;p&gt;AFO有段时间了，感觉自己什么都不会了，随便研究点东西证明我还活着……&lt;/p&gt;
&lt;p&gt;众所周知在long long乘long long模long long的时候，直接乘会溢出，所以要用一些技巧来处理. 一般的快速乘是&lt;span class=&#34;math inline&#34;&gt;\(O(\log x)\)&lt;/span&gt;的，所以我们也可以叫它慢速乘. 事实上可以用一些技巧做到&lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt;，实现真正的快速乘.&lt;/p&gt;
&lt;p&gt;首先我们知道&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;模&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;可以表示为&lt;span class=&#34;math inline&#34;&gt;\(a-b\lfloor a/b\rfloor\)&lt;/span&gt;，于是如果我们要计算&lt;span class=&#34;math inline&#34;&gt;\(a\times b\)&lt;/span&gt;对&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;取模的结果，可以考虑计算&lt;span class=&#34;math inline&#34;&gt;\(ab-m\lfloor(a/m)*b\rfloor\)&lt;/span&gt;. 写出下面的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD; b&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
ele d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)a&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;;
ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MOD;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) tmp&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;MOD;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的&lt;code&gt;a*b&lt;/code&gt;和&lt;code&gt;d*MOD&lt;/code&gt;显然都会溢出，不过可以注意到，溢出只会使结果差&lt;span class=&#34;math inline&#34;&gt;\(2^{64}\)&lt;/span&gt;的整数倍，而模出来的结果显然不到&lt;span class=&#34;math inline&#34;&gt;\(2^{64}\)&lt;/span&gt;所以一定是对的.&lt;/p&gt;
&lt;p&gt;不过这里有一个小问题，为了防止炸精度，我们加了&lt;span class=&#34;math inline&#34;&gt;\(0.5\)&lt;/span&gt;来四舍五入，而不是向下取整，最后的结果可能会少一个&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;，所以最后要判断一下，如果&lt;code&gt;tmp&amp;lt;0&lt;/code&gt;就要&lt;code&gt;tmp+=MOD&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;另外的话如果&lt;span class=&#34;math inline&#34;&gt;\(a\ge m\)&lt;/span&gt;或者&lt;span class=&#34;math inline&#34;&gt;\(b\ge m\)&lt;/span&gt;可能会挂，所以一开始的时候要模一下.&lt;/p&gt;
&lt;p&gt;简化的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(ele a,ele b,ele MOD){
	a&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD; b&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(ele)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)a&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;MOD:tmp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/fastmul/ - </description>
        </item>
    
    
    
        <item>
        <title>黑科技</title>
        <link>https://seraphim.rocks/posts/%E9%BB%91%E7%A7%91%E6%8A%80/</link>
        <pubDate>Sun, 30 Sep 2018 21:43:03 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/%E9%BB%91%E7%A7%91%E6%8A%80/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/%E9%BB%91%E7%A7%91%E6%8A%80/ -&lt;p&gt;好久没写博客了，随便扔点东西上来除个草.&lt;/p&gt;
&lt;p&gt;其实也说不上是黑科技，就是自己平时折腾linux，折腾vim之类的东西的时候发现的一些小技巧罢了.&lt;/p&gt;
&lt;h3 id=&#34;esc键太远&#34;&gt;esc键太远&lt;/h3&gt;
&lt;p&gt;平时用vim的时候经常要用到esc键，vim的设计理念本来是让手不用离开主键区，&lt;del&gt;但是esc似乎就在主键区之外&lt;/del&gt;. 事实上vim刚被开发出来那会的键盘和现在是不一样的，那个时候esc还在主键区里面. 解决这个东西的方法有几个，我用的方法是把esc和caps lock调换一下，只需要在&lt;code&gt;~/.xprofile&lt;/code&gt;里面加上这样一行代码（应该只对linux有效）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setxkbmap -option caps:swapescape
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vim配置文件&#34;&gt;vim配置文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;set autoindent
set tabstop=4
set shiftwidth=4
set noexpandtab
let g:python_recommended_style=0
set nu
set backspace=2
set mouse=a
syntax on
colorscheme desert

map &amp;lt;space&amp;gt; :
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk
map JJ &amp;lt;esc&amp;gt;
imap JJ &amp;lt;esc&amp;gt;
map JK g$
map KJ g^
imap JK &amp;lt;esc&amp;gt;lg$a
imap KJ &amp;lt;esc&amp;gt;hg^i

map &amp;lt;f7&amp;gt; :%s/[\u4E00-\u9FCC]//gn&amp;lt;cr&amp;gt;

function! P1()
	:%s/\\\\\\{/\\{/g
	:%s/\\\\\\}/\\}/g
	:%s/\\\\\\\\/\\\\/g
endfunction

function! P2()
	:%s/\\\\/\\\\\\\\/g
	:%s/\\{/\\\\\\{/g
	:%s/\\}/\\\\\\}/g
endfunction

call plug#begin(&#39;~/.vim/plugged&#39;)
Plug &#39;godlygeek/tabular&#39;
Plug &#39;plasticboy/vim-markdown&#39;
Plug &#39;iamcco/markdown-preview.vim&#39;
Plug &#39;iamcco/mathjax-support-for-mkdp&#39;
Plug &#39;vim-scripts/fcitx.vim&#39;
Plug &#39;Shougo/neocomplete.vim&#39;
call plug#end()

autocmd filetype markdown set shell=bash\ -i
let g:instant_markdown_autostart=0
&amp;quot; let g:instant_markdown_slow=1

let g:vim_markdown_folding_disabled=1

&amp;quot;Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
&amp;quot; Disable AutoComplPop.
let g:acp_enableAtStartup = 0
&amp;quot; Use neocomplete.
let g:neocomplete#enable_at_startup = 1
&amp;quot; Use smartcase.
let g:neocomplete#enable_smart_case = 1
&amp;quot; Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

&amp;quot; Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ &#39;default&#39; : &#39;&#39;,
    \ &#39;vimshell&#39; : $HOME.&#39;/.vimshell_hist&#39;,
    \ &#39;scheme&#39; : $HOME.&#39;/.gosh_completions&#39;
        \ }

&amp;quot; Define keyword.
if !exists(&#39;g:neocomplete#keyword_patterns&#39;)
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns[&#39;default&#39;] = &#39;\h\w*&#39;

&amp;quot; Plugin key-mappings.
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-g&amp;gt;     neocomplete#undo_completion()
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-l&amp;gt;     neocomplete#complete_common_string()

&amp;quot; Recommended key-mappings.
&amp;quot; &amp;lt;CR&amp;gt;: close popup and save indent.
inoremap &amp;lt;silent&amp;gt; &amp;lt;CR&amp;gt; &amp;lt;C-r&amp;gt;=&amp;lt;SID&amp;gt;my_cr_function()&amp;lt;CR&amp;gt;
function! s:my_cr_function()
  return (pumvisible() ? &amp;quot;\&amp;lt;C-y&amp;gt;&amp;quot; : &amp;quot;&amp;quot; ) . &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;
  &amp;quot; For no inserting &amp;lt;CR&amp;gt; key.
  &amp;quot;return pumvisible() ? &amp;quot;\&amp;lt;C-y&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;
endfunction
&amp;quot; &amp;lt;TAB&amp;gt;: completion.
inoremap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt;  pumvisible() ? &amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
&amp;quot; &amp;lt;C-h&amp;gt;, &amp;lt;BS&amp;gt;: close popup and delete backword char.
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-h&amp;gt; neocomplete#smart_close_popup().&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;
inoremap &amp;lt;expr&amp;gt;&amp;lt;BS&amp;gt; neocomplete#smart_close_popup().&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;
&amp;quot; Close popup by &amp;lt;Space&amp;gt;.
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Space&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;C-y&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;Space&amp;gt;&amp;quot;

&amp;quot; AutoComplPop like behavior.
&amp;quot;let g:neocomplete#enable_auto_select = 1

&amp;quot; Shell like behavior(not recommended).
&amp;quot;set completeopt+=longest
&amp;quot;let g:neocomplete#enable_auto_select = 1
&amp;quot;let g:neocomplete#disable_auto_complete = 1
&amp;quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt;  pumvisible() ? &amp;quot;\&amp;lt;Down&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;C-x&amp;gt;\&amp;lt;C-u&amp;gt;&amp;quot;

&amp;quot; Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

&amp;quot; Enable heavy omni completion.
if !exists(&#39;g:neocomplete#sources#omni#input_patterns&#39;)
  let g:neocomplete#sources#omni#input_patterns = {}
endif
&amp;quot;let g:neocomplete#sources#omni#input_patterns.php = &#39;[^. \t]-&amp;gt;\h\w*\|\h\w*::&#39;
&amp;quot;let g:neocomplete#sources#omni#input_patterns.c = &#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)&#39;
&amp;quot;let g:neocomplete#sources#omni#input_patterns.cpp = &#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)\|\h\w*::&#39;

&amp;quot; For perlomni.vim setting.
&amp;quot; https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = &#39;\h\w*-&amp;gt;\h\w*\|\h\w*::&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;如果只是要用于OI比赛的话，应该只需要前面的一部分.&lt;/p&gt;
&lt;p&gt;希望很久以后我还能看得懂这份配置文件，懒得没修改一次就重新写一次解释了.&lt;/p&gt;- https://seraphim.rocks/posts/%E9%BB%91%E7%A7%91%E6%8A%80/ - </description>
        </item>
    
    
    
        <item>
        <title>NOI2018退役记</title>
        <link>https://seraphim.rocks/posts/farewelloi/</link>
        <pubDate>Sat, 01 Sep 2018 21:34:49 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/farewelloi/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/farewelloi/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;退役之后一直有点消沉，没有写退役记什么的，最近想了想还是多少放点东西上来.&lt;/p&gt;
&lt;p&gt;考挂了的原因有很多，各种意外，和同层次的选手缺少交流等等，或者可以说我觉得自己有进队的实力，但是没有稳进队的实力.&lt;/p&gt;
&lt;p&gt;不过现在再说这些东西意义也没什么意义，丢掉的分不会再回来，我总归还是退役了.&lt;/p&gt;
&lt;p&gt;其实回过头来想想，我也算是比很多人走得远了. 况且，就算我进了队，再多苟半年一年终究是要退役. 所以真的也没什么必要耿耿于怀，只是时不时回想起来，总觉得太过遗憾. 但人生总是要有些不如意的事情，或许十几年过后，再回想起来，这也不过是一件小事.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;幻梦终醒，本无不散之筵席，却不悔付此华年.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是开始，也远未结束.&lt;/p&gt;
&lt;/blockquote&gt;- https://seraphim.rocks/posts/farewelloi/ - </description>
        </item>
    
    
    
        <item>
        <title>uoj50题解</title>
        <link>https://seraphim.rocks/posts/uoj50/</link>
        <pubDate>Fri, 17 Aug 2018 19:28:08 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/uoj50/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/uoj50/ -&lt;p&gt;分治fft是非常明显的做法，不过这样是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log^2n)\)&lt;/span&gt;的. 把生成函数弄出来之后会发现它是个微分方程，可以有一些神奇的方法来解，具体可以看UR3的题解.&lt;/p&gt;
&lt;p&gt;我比较菜所以还是决定写分治+卡常，发现了一个卡常技巧. 对&lt;span class=&#34;math inline&#34;&gt;\([l,r)\)&lt;/span&gt;区间分治的时候，设&lt;span class=&#34;math inline&#34;&gt;\(m=\left\lfloor\frac{l+r}{2}\right\rfloor\)&lt;/span&gt;，如果&lt;span class=&#34;math inline&#34;&gt;\(l\neq0\)&lt;/span&gt;，就要把&lt;span class=&#34;math inline&#34;&gt;\(C(z)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(F(z)\)&lt;/span&gt;在&lt;span class=&#34;math inline&#34;&gt;\([l,m)\)&lt;/span&gt;的部分，&lt;span class=&#34;math inline&#34;&gt;\(F(z)\)&lt;/span&gt;在&lt;span class=&#34;math inline&#34;&gt;\([0,r-l)\)&lt;/span&gt;的部分卷起来，这里fft的长度看似要开到&lt;span class=&#34;math inline&#34;&gt;\(4(r-l)\)&lt;/span&gt;，但事实上只需要开到&lt;span class=&#34;math inline&#34;&gt;\(2(r-l)\)&lt;/span&gt;，因为超出&lt;span class=&#34;math inline&#34;&gt;\(2(r-l)\)&lt;/span&gt;的部分小于&lt;span class=&#34;math inline&#34;&gt;\(2(r-l)+(m-l)\)&lt;/span&gt;，这样就算循环到前面去，也会小于&lt;span class=&#34;math inline&#34;&gt;\(m-l\)&lt;/span&gt;，而对&lt;span class=&#34;math inline&#34;&gt;\([m,r)\)&lt;/span&gt;的贡献是从&lt;span class=&#34;math inline&#34;&gt;\(m-l\)&lt;/span&gt;开始的，所以不影响答案. 而&lt;span class=&#34;math inline&#34;&gt;\(l=0\)&lt;/span&gt;的时候fft长度显然也可以只开到&lt;span class=&#34;math inline&#34;&gt;\(2(r-l)\)&lt;/span&gt;. 这样一来可以显著减小常数. &lt;del&gt;跑得比网上搜到的倍增还快！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;另外以后在我学会倍增解微分方程之前，看到微分方程不会解可以考虑分治.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele maxn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele MOD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998244353&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele G&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele inv2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(MOD&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; add(ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,ele b){
	a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;MOD:a;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;pw&lt;/span&gt;(ele a,ele x){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; x; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
ele n,f[maxn],g[maxn],c[maxn],inv[maxn],fac[maxn],ifac[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ntt&lt;/span&gt;(ele K,ele n,ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ele f[maxn];
	f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		f[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) f[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;f[i]) swap(y[i],y[f[i]]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		ele o&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(G,(MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); o&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;o:pw(o,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)){
			ele o1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j,o1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)o1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;o&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD){
				ele v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;o1&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
				y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y[j];
				add(y[j],v); add(y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v);
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;K){
		ele invn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(n,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) y[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)y[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;invn&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(ele l,ele r){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		f[l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)g[l]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inv[l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;r)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ele t1[maxn],t2[maxn],t3[maxn];
	solve(l,mid);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l){
		ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		memset(t1,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t1,c,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l));
		memset(t2,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t2,f&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;l,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(mid&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l));
		memset(t3,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t3,f,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l));
		ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1); ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t2); ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t3);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t2[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t3[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
		ntt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mid; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;r; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) add(g[i],t1[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		memset(t1,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t1,c,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l));
		memset(t2,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t2,f&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;l,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(mid&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l));
		ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1); ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t2);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
			t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t2[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t2[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
			t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;(t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
		ntt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mid; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;r; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) add(g[i],t1[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l]);
	}
	solve(mid,r);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,s);
	ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n) tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	fac[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) fac[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)fac[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	ifac[tmp]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(fac[tmp],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) ifac[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ifac[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) inv[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)fac[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ifac[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		c[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
		c[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ifac[i];
	}
	g[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	solve(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,tmp);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,(ll)f[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fac[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/uoj50/ - </description>
        </item>
    
    
    
        <item>
        <title>loj2541题解</title>
        <link>https://seraphim.rocks/posts/loj2541/</link>
        <pubDate>Mon, 16 Jul 2018 15:47:07 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj2541/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj2541/ -&lt;p&gt;这种求某个东西在最后一个的概率之类的其实可以考虑容斥，设钦定一个集合&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;在它后面的概率为&lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt;，那么最后的答案为&lt;span class=&#34;math inline&#34;&gt;\(\sum (-1)^{|S|}f(S)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;现在考虑怎么算&lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt;，一种感性的方法是，你可以认为其他人就没有关系了，那么&lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt;即为第一个人第一个死的概率，即&lt;span class=&#34;math inline&#34;&gt;\(\frac{w _1}{w _1+\text{sum}(S)}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;要严谨地证明的话，可以改变一下游戏规则：死去的人不把他踢出去，这样不会改变每个人的死亡顺序，记&lt;span class=&#34;math inline&#34;&gt;\(W=\sum _{i=1}^n w _i\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(f(S)=\sum _{i=0}^{+\infty}\left(\frac{W-w _1-\text{sum}(S)}{W}\right)^i\frac{w _1}{W}=\frac{w _1}{w _1+\text{sum}(S)}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;于是答案就是&lt;span class=&#34;math inline&#34;&gt;\(\sum \frac{(-1)^{|S|}}{w _1+\text{sum}(S)}\)&lt;/span&gt;，注意到&lt;span class=&#34;math inline&#34;&gt;\(w _i\)&lt;/span&gt;加起来很小，我们可以统计每个&lt;span class=&#34;math inline&#34;&gt;\(\text{sum}(S)\)&lt;/span&gt;的贡献，这个只需要计算&lt;span class=&#34;math inline&#34;&gt;\(\prod _{i=2}^n(1-z^{w _i})\)&lt;/span&gt;就可以了.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele maxn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#define MOD 998244353
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define G 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; add(ele &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,ele b){
	a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;MOD:a;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;pw&lt;/span&gt;(ele a,ele x){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; x; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
ele n,w[maxn],a[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ntt&lt;/span&gt;(ele K,ele n,ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ele f[maxn];
	f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		f[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f[i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) f[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;f[i]) swap(y[i],y[f[i]]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		ele o&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(G,(MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); o&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;o:pw(o,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)){
			ele o1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j,o1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)o1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;o&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD){
				ele u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y[j],v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;o1&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
				y[j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;u;
				add(y[j],v); add(y[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v);
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;K){
		ele invn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(n,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) y[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)y[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;invn&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	}
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a,ele l,ele r){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;r){
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		a[w[l]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;w[l]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w[l];
	}
	ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;r)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele s1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;solve(a,l,mid);
	ele s2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;solve(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r);
	ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s2) tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ele t1[maxn],t2[maxn];
	memset(t1,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t1,a,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	memset(t2,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp); memcpy(t2,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(s2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1); ntt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t2);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tmp; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)t1[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t2[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	ntt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp,t1);
	memcpy(a,t1,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s2;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,w&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		ele s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;solve(a,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;s; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) add(ans,(ll)w[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pw(w[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD);
		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,ans);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/loj2541/ - </description>
        </item>
    
    
    
        <item>
        <title>uoj387题解</title>
        <link>https://seraphim.rocks/posts/uoj387/</link>
        <pubDate>Sun, 15 Jul 2018 13:31:44 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/uoj387/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/uoj387/ -&lt;p&gt;学到了一个新的技巧，树形的依赖关系，把顺序翻转，就可以在依赖父亲和依赖子树之间相互转化.&lt;/p&gt;
&lt;p&gt;每次选取最深的能选取的叶子，证明的话，画个图用一下调整法应该能证.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define fi first
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define se second
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 100010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ele n,m,ans,f[maxn],dep[maxn],deg[maxn];
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res[maxn];
priority_queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele,ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q1;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m);
	dep[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	memset(deg,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(deg));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,f&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;f[i]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;deg[f[i]];
		dep[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dep[f[i]]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;deg[i]) Q.push(make_pair(dep[i],i));
	ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Q.empty()){
			&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;ans;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Q1.empty()){
				ele k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Q1.front(); Q1.pop();
				Q.push(make_pair(dep[k],k));
			}
		}
		pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele,ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Q.top(); Q.pop();
		ele k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k1.se;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (res[ans].size()&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;m){
			&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;ans;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Q1.empty()){
				ele k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Q1.front(); Q1.pop();
				Q.push(make_pair(dep[k],k));
			}
		}
		res[ans].push_back(k);
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;deg[f[k]];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;deg[f[k]]) Q1.push(f[k]);
	}
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,ans&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ans; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i){
		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,res[i].size());
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;res[i].size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;j; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;j) printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,res[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/uoj387/ - </description>
        </item>
    
    
    
        <item>
        <title>bzoj2324题解</title>
        <link>https://seraphim.rocks/posts/bzoj2324/</link>
        <pubDate>Sat, 07 Jul 2018 20:49:50 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/bzoj2324/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/bzoj2324/ -&lt;p&gt;前置技能：DAG的最小路径覆盖和最小链覆盖.&lt;/p&gt;
&lt;p&gt;算了还是写一下吧免得自己忘了.&lt;/p&gt;
&lt;p&gt;最小路径覆盖的做法就是把每个点&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;拆成两个点&lt;span class=&#34;math inline&#34;&gt;\(i _0,i _1\)&lt;/span&gt;，边&lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;变成&lt;span class=&#34;math inline&#34;&gt;\((i _0,j _1)\)&lt;/span&gt;，然后做最大匹配，这样每条匹配边相当于原图中一条边，匹配保证了每个点最多有一条入边一条出边，答案就是原图点数-匹配数，因为你可以看成每个点先独立为一条路径，每加入一条边相当于合并两条路径.&lt;/p&gt;
&lt;p&gt;最小链覆盖的话边可以相交，所以需要先用floyd传递闭包，其实就是对于所有点对&lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt;求出是否有一条链从&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;到&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，有的话直接连一条边过去，这样两条链相交的话其中一条就可以直接跳过交点.&lt;/p&gt;
&lt;p&gt;题目可以认为是用&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;条可相交的路径去覆盖这张图，满足一些条件，让边权和最小.&lt;/p&gt;
&lt;p&gt;因为可相交，先考虑来一发传递闭包，因为题目要求，状态要改成&lt;span class=&#34;math inline&#34;&gt;\(g _{i,j}\)&lt;/span&gt;表示只经过编号不超过&lt;span class=&#34;math inline&#34;&gt;\(\max(i,j)\)&lt;/span&gt;的点，从&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;到&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;的最短路，然后对所有&lt;span class=&#34;math inline&#34;&gt;\(i\lt j\)&lt;/span&gt;，以&lt;span class=&#34;math inline&#34;&gt;\(g _{i,j}\)&lt;/span&gt;为权值连边.&lt;/p&gt;
&lt;p&gt;这样题目就变成了用&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;条只在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;号点相交的路径去覆盖这张图，然后就能够按照DAG最小路径覆盖来建图了，需要注意的是，源点连向&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;号点的入点的边容量为&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，因为这&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;条路径能在&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;处相交即&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;号点出去的边最多可以选&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;条. 边的费用当然就是&lt;span class=&#34;math inline&#34;&gt;\(g _{i,j}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define fi first
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define se second
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 310
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxm 20010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele INF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edge&lt;/span&gt;{
	ele v,r,c;
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nxt,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rev;
}ep[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ecnt;
ele n,m,K,g[maxn][maxn],d[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; vis[maxn];
edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;h[maxn],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cur[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addedge1&lt;/span&gt;(ele u,ele v,ele r,ele c){
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ecnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[u]; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ep&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;((ecnt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ep)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	h[u]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addedge&lt;/span&gt;(ele u,ele v,ele r,ele c){
	addedge1(u,v,r,c); addedge1(v,u,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spfa&lt;/span&gt;(ele s,ele t){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) d[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;INF;
	d[s]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	Q.push(s);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Q.empty()){
		ele k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Q.front(); Q.pop();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[k]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d[k]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]){
				d[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[k]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c;
				Q.push(j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
			}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; d[t]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;INF;
}
pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele,ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dfs(ele i,ele t,ele p){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;t) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; make_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,p);
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,ans1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	vis[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;amp;&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;vis[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;d[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]){
			pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele,ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dfs(j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v,t,min(p,j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r));
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp.se){
				ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp.fi; ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp.se;
				ans1&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp.se;
				j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;tmp.se; j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rev&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp.se;
				p&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;tmp.se;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;p) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; d[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;INF;
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_pair&lt;/span&gt;(ans,ans1);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;mincost&lt;/span&gt;(ele s,ele t){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (spfa(s,t)){
		memset(vis,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(vis));
		memcpy(cur,h,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
		ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;dfs(s,t,INF).fi;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;K);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) g[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;INF;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		ele u,v,w;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;u,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w);
		g[u][v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;g[v][u]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(g[u][v],w);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (max(i,j)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;k)
					g[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min(g[i][j],g[i][k]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;g[k][j]);
	ecnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ep; memset(h,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) addedge(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,g[i][j]);
	addedge(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,K,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) addedge(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) addedge(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,mincost(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/bzoj2324/ - </description>
        </item>
    
    
  </channel>
</rss> 