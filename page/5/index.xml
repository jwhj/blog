<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蒟蒻的博客</title>
    <link>https://seraphim.rocks/</link>
    <description>Recent content on 蒟蒻的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2020 21:55:41 +0800</lastBuildDate>
    
        <atom:link href="https://seraphim.rocks/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>bzoj5338题解</title>
        <link>https://seraphim.rocks/posts/bzoj5338/</link>
        <pubDate>Fri, 15 Jun 2018 17:34:10 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/bzoj5338/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/bzoj5338/ -&lt;p&gt;智商有点下线想复杂了.&lt;/p&gt;
&lt;p&gt;我的做法是考虑树剖，这样每个查询可以看做序列上至多&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log n)\)&lt;/span&gt;段的查询.最大异或值可以用trie来做，那么就可以把询问离线然后在线段树上对trie做启发式合并了. 其实可以不用写启发式合并，写一个类似线段树合并的东西. 这样做是三个&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;的，但是树剖的那个&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;很小，所以可以过.&lt;/p&gt;
&lt;p&gt;但是其实只需要用可持久化trie做就可以了……&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 100010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxk 31
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edge&lt;/span&gt;{
	ele v;
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nxt;
}ep[maxn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ecnt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tn&lt;/span&gt;{
	tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
}tnp[maxn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(maxk&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tncnt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;{
	tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ele&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v;
	node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r;
}np[maxn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ncnt;
ele n,Q,tcnt,v[maxn],seq[maxn],dfn[maxn],fa[maxn],size[maxn],dep[maxn],r[maxn],a[maxn],res[maxn];
edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;h[maxn],&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hc[maxn];
node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root;
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addedge&lt;/span&gt;(ele u,ele v){
	edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ecnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[u];
	h[u]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getv&lt;/span&gt;(ele x,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
tn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ins&lt;/span&gt;(tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,ele y,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x){
		x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tncnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
		x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i) x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[getv(y,i)]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ins(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[getv(y,i)],y,i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}
tn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;x) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;y) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
	x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],y&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
	x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],y&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}
node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(ele l,ele r){
	node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ncnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v.clear();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;r) p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ins(NULL,v[seq[l]],maxk),p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;r)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build(l,mid);
		p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build(mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upd&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,ele a,ele b,ele l,ele r,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r) x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v.push_back(i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		ele mid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;mid) upd(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l,a,mid,l,r,i);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mid&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;r) upd(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r,mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,b,l,r,i);
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs1&lt;/span&gt;(ele p,ele i){
	size[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	hc[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NULL;
	fa[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;p){
			dep[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dep[i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			dfs1(i,j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
			size[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;size[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;hc[i] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; size[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;size[hc[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]) hc[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j;
		}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs2&lt;/span&gt;(ele p,ele i){
	dfn[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcnt; seq[tcnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hc[i]){
		r[hc[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r[i];
		dfs2(i,hc[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (edge &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i]; j; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxt)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;hc[i]){
			r[j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v;
			dfs2(i,j&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v);
		}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;lca&lt;/span&gt;(ele x,ele y){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (r[x]&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;r[y]){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dep[r[x]]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dep[r[y]]) swap(x,y);
		x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fa[r[x]];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dep[x]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dep[y]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;x:y;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upd&lt;/span&gt;(ele x,ele y,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dep[x]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;dep[y]){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dep[r[x]]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;dep[y]) upd(root,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dfn[r[x]],dfn[x],i);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; upd(root,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dfn[y]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dfn[x],i);
		x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fa[r[x]];
	}
}
ele &lt;span style=&#34;color:#a6e22e&#34;&gt;qry&lt;/span&gt;(tn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x,ele y,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	ele t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getv(y,i)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[t]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;qry(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[t],y,i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;qry(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c[t&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],y,i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs3&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l){
		dfs3(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l);
		dfs3(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r);
		x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;t,x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;t);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v.size(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j){
		ele i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;v[j];
		res[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max(res[i],qry(x&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;t,a[i],maxk));
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Q);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,v&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
	ecnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ep; memset(h,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(h));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		ele u,v;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;u,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v); &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;u,&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v;
		addedge(u,v); addedge(v,u);
	}
	dep[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	dfs1(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	tcnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	dfs2(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	ncnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np; tncnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tnp;
	root&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Q; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		ele op,x,y,z;
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;op,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;y); &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;x;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
			a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y;
			upd(root,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dfn[x],dfn[x]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;size[x]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,i);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;){
			&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;y; scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;z);
			a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;z;
			ele w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lca(x,y);
			upd(x,w,i); upd(y,w,i);
			upd(root,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dfn[w],dfn[w],i);
		}
	}
	memset(res,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(res));
	dfs3(root);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Q; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,res[i]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/bzoj5338/ - </description>
        </item>
    
    
    
        <item>
        <title>bzoj4314题解</title>
        <link>https://seraphim.rocks/posts/bzoj4314/</link>
        <pubDate>Fri, 15 Jun 2018 10:36:33 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/bzoj4314/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/bzoj4314/ -&lt;p&gt;定义&lt;span class=&#34;math inline&#34;&gt;\(f(x,y)=\prod _{i=0}^{n-1}(1+x^iy)\)&lt;/span&gt;，这里做乘法的时候&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;是模&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;的循环卷积，而y是普通卷积. 那么答案就是&lt;span class=&#34;math inline&#34;&gt;\([x^0y^k]f(x,y)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;这个循环卷积不好处理，注意到DFT本质上就是一个循环卷积，我们可以考虑使用IDFT，答案就是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\frac{1}{n}[y^k]\sum f(\omega _n^i,y)\omega _n^{-i\cdot 0}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;想办法化简这个式子&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}&amp;\sum f(\omega _n^i,y)\\\\=&amp;\sum _{i=0}^{n-1}\prod _{j=0}^{n-1}(1+\omega _n^{ij}y)\\\\=&amp;\sum _{d|n}\sum _{(i,n)=d}\prod _{j=0}^{n-1}(1+(\omega _{n/d}^{i/d})^jy)\\\\=&amp;\sum _{d|n}\sum _{(i,n)=d}\prod _{j=0}^{n-1}(1+\omega _{n/d}^jy)\\\\=&amp;\sum _{d|n}\sum _{(i,n)=d}(\prod _{j=0}^{n/d-1}(1+\omega _{n/d}^jy))^d\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个时候要用到一个结论&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\prod _{i=0}^{n-1}(x-\omega _n^iy)=x^n-y^n
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;证明的话，把&lt;span class=&#34;math inline&#34;&gt;\(x=\omega _n^iy(i=0,1,\ldots,n-1)\)&lt;/span&gt;带入，发现两边都是0，而两边都是&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;次的，说明这是个恒等式.&lt;/p&gt;
&lt;p&gt;把&lt;span class=&#34;math inline&#34;&gt;\(x=-1\)&lt;/span&gt;带入上式，两边再乘上&lt;span class=&#34;math inline&#34;&gt;\((-1)^n\)&lt;/span&gt;，就可以得到&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\prod _{i=0}^{n-1}(1+\omega _n^iy)=1-(-y)^n
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;回到我们原来要推的那个式子，可以变形为&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}&amp;\sum _{d|n}\sum _{(i,n)=d}(\prod _{j=0}^{n/d-1}(1+\omega _{n/d}^jy))^d\\\\=&amp;\sum _{d|n}\sum _{(i,n)=d}(1-(-y)^{n/d})^d\\\\=&amp;\sum _{d|n}(1-(-y)^{n/d})^d\varphi(n/d)\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;要求这个式子中&lt;span class=&#34;math inline&#34;&gt;\(y^k\)&lt;/span&gt;的系数，直接用二项式定理展开就可以了. 组合数可以把阶乘分段打表来算.&lt;/p&gt;
&lt;p&gt;可以注意到，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;的范围扩大到&lt;span class=&#34;math inline&#34;&gt;\(10^9\)&lt;/span&gt;也是可以做的，要求的余数不是0而是一个由输入给定的值也是可以做的（当然式子需要再推一推）.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxk 1010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MOD 1000000007
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define K 400000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ele tf[]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{};&lt;span style=&#34;color:#75715e&#34;&gt;//这里省略阶乘的表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ele n,k,phi[maxk];
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;get_phi&lt;/span&gt;(ele n){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
			ans&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;i; ans&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) tmp&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;i;
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;tmp,ans&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;pw&lt;/span&gt;(ele a,ele x){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; x; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;fac&lt;/span&gt;(ele n){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tf[n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;K];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;ifac&lt;/span&gt;(ele n){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pw(fac(n),MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(ele n,ele m){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (ll)fac(n)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ifac(m)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ifac(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;calc&lt;/span&gt;(ele d){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	ele c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d);
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)C(d,c)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;phi[n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ans&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ans:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;k);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;k; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) phi[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;get_phi(i);
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; d&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;d)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
			(ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;calc(d))&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (d&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;n) (ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;calc(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d))&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
		}
	ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pw(n,MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,ans);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/bzoj4314/ - </description>
        </item>
    
    
    
        <item>
        <title>bzoj4162题解</title>
        <link>https://seraphim.rocks/posts/bzoj4162/</link>
        <pubDate>Wed, 13 Jun 2018 19:48:56 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/bzoj4162/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/bzoj4162/ -&lt;p&gt;几年前刚学矩阵快速幂的时候点开了这道题，写了半天始终TLE，一看题解发现完全看不懂……时隔多年终于A掉了这道题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为代码习惯，下文中用&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;表示题目中的&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，用&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;表示题目中的&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设&lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;的特征多项式为&lt;span class=&#34;math inline&#34;&gt;\(f(\lambda)\)&lt;/span&gt;，设&lt;span class=&#34;math inline&#34;&gt;\(\lambda^s=f(\lambda)Q(\lambda)+R(\lambda)\)&lt;/span&gt;，其中&lt;span class=&#34;math inline&#34;&gt;\(\deg R&lt;\deg f\)&lt;/span&gt;，那么因为&lt;span class=&#34;math inline&#34;&gt;\(f(M)=0\)&lt;/span&gt;，所以&lt;span class=&#34;math inline&#34;&gt;\(M^s=R(M)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;求特征多项式的话，可以把&lt;span class=&#34;math inline&#34;&gt;\(\lambda=0,1,\ldots,n\)&lt;/span&gt;带入&lt;span class=&#34;math inline&#34;&gt;\(\det(M-\lambda I)\)&lt;/span&gt;，然后插值，计算&lt;span class=&#34;math inline&#34;&gt;\(R(\lambda)\)&lt;/span&gt;就直接在模&lt;span class=&#34;math inline&#34;&gt;\({f(\lambda)}\)&lt;/span&gt;意义下快速幂就行了.&lt;/p&gt;
&lt;p&gt;发现多项式取模的一个比较简单的&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n^2)\)&lt;/span&gt;写法，设&lt;span class=&#34;math inline&#34;&gt;\(f(\lambda)=\sum _{i=0}^na _i\lambda^i\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(M^n=-\sum _{i=0}^{n-1}\frac{a _i}{a _n}M^i\)&lt;/span&gt;，利用这个把次数不小于&lt;span class=&#34;math inline&#34;&gt;\(\deg f\)&lt;/span&gt;的项全部变成次数小于&lt;span class=&#34;math inline&#34;&gt;\(\deg f\)&lt;/span&gt;的项就可以了.&lt;/p&gt;
&lt;p&gt;代码写得比较凌乱.&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ele int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define maxn 110
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define maxm 10010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MOD 1000000007
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;{
	ele n,m,a[maxn][maxn];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt;(){
		memset(a,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(a));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) a[i][i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	}
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(matrix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; matrix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) (a.a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;b.a[i][j])&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;(matrix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,ele b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) a.a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)a.a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;(matrix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a,&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; matrix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; matrix c;
	memset(c.a,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(c.a));
	c.n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a.n; c.m&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b.m;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k)
				(c.a[i][k]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(ll)a.a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.a[j][k]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[maxm];
ele n,f[maxn][maxn],a[maxn][maxn],b[maxn][maxn],S[maxn][maxn],fac[maxn],ifac[maxn],c[maxn],d[maxn],e[maxn];
matrix A,B,C;
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;pw&lt;/span&gt;(ele a,ele x){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; x; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;det&lt;/span&gt;(ele n,ele a[maxn][maxn]){
	ele ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[j][i]){
				ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ans;
				ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a[i][i]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;a[j][i];
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k){
					(a[i][k]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(ll)a[j][k]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
					swap(a[i][k],a[j][k]);
				}
			}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[i][i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a,ele &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ele t[maxn];
	memset(t,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(t));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) (t[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(ll)a[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b[j]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	ele invcn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(c[n],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i){
		ele tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)invcn&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			(t[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(ll)tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
		t[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
	memcpy(a,t,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ele)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s%d&amp;#34;&lt;/span&gt;,s,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a[i][j]);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		memcpy(b,a,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(a));
		f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;det(n,b);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) (a[j][j]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) f[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(f[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) (a[i][i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	memset(S,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(S));
	S[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		S[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			S[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(S[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(ll)S[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	}
	fac[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) fac[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)fac[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	ifac[n]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw(fac[n],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) ifac[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ll)ifac[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD;
	memset(c,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(c));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i,ct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;j; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;j,ct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ct)
			(c[j]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(ll)S[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ifac[i]&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ct&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MOD)&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;MOD;
	}
	memset(d,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(d)); d[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	memset(e,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(e)); e[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	ele L&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;strlen(s);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;L&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) mul(e,d);
		mul(d,d);
	}
	A.n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;A.m&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) A.a[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a[i][j];
	B.n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;B.m&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n; B.I();
	C.n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;C.m&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n; memset(C.a,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(C.a));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e[i]){
			B&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;e[i];
			C&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;B;
			B&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;pw(e[i],MOD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		}
		B&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;A;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
			printf(j&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,C.a[i][j]);
		puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://seraphim.rocks/posts/bzoj4162/ - </description>
        </item>
    
    
    
        <item>
        <title>loj6375题解</title>
        <link>https://seraphim.rocks/posts/loj6375/</link>
        <pubDate>Mon, 11 Jun 2018 19:08:30 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/loj6375/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/loj6375/ -&lt;p&gt;好久没怎么做题了，做道水题练练手.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
记$f(n)=\sum _{i=1}^ni[\gcd(i,n)=1]$，那么当$n&gt;1$的时候均有$f(n)=\frac{n\varphi(n)}{2}$，而答案即为$n\sum _{d|n}f(\frac{n}{d})$.

预处理欧拉函数就可以了.

代码：
```cpp
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#define ele long long
using namespace std;
#define maxn 1000010
ele n,pcnt,plst[maxn],phi[maxn];
bool flag[maxn];
inline ele f(ele n){
	return n==1?1:n*phi[n]/2;
}
int main(){
	freopen(&#34;lcm.in&#34;,&#34;r&#34;,stdin); freopen(&#34;lcm.out&#34;,&#34;w&#34;,stdout);
	pcnt=0; phi[1]=1;
	memset(flag,0,sizeof(flag));
	for (int i=2; i&lt;maxn; ++i){
		if (!flag[i]) plst[pcnt++]=i,phi[i]=i-1;
		for (int j=0; j&lt;pcnt &amp;&amp; i*plst[j]&lt;maxn; ++j){
			flag[i*plst[j]]=true;
			if (i%plst[j]) phi[i*plst[j]]=phi[i]*phi[plst[j]];
			else{
				phi[i*plst[j]]=phi[i]*plst[j];
				break;
			}
		}
	}
	ele T;
	scanf(&#34;%lld&#34;,&amp;T);
	while (T--){
		scanf(&#34;%lld&#34;,&amp;n);
		ele ans=0;
		for (ele d=1; d*d&lt;=n; ++d)
			if (n%d==0){
				ans+=f(n/d);
				if (d*d!=n) ans+=f(d);
			}
		printf(&#34;%lld\n&#34;,ans*n);
	}
	return 0;
}
```\]&lt;/span&gt;&lt;/p&gt;- https://seraphim.rocks/posts/loj6375/ - </description>
        </item>
    
    
    
        <item>
        <title>test</title>
        <link>https://seraphim.rocks/posts/test/</link>
        <pubDate>Sun, 10 Jun 2018 19:08:17 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/test/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/test/ -&lt;p&gt;其它测试&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(E=mc^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\bold{bold}\textrm{normal}\)&lt;/span&gt;&lt;/p&gt;- https://seraphim.rocks/posts/test/ - </description>
        </item>
    
    
    
        <item>
        <title>GDOI2018退役失败记</title>
        <link>https://seraphim.rocks/posts/gdoi2018/</link>
        <pubDate>Wed, 02 May 2018 22:26:00 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/gdoi2018/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/gdoi2018/ -&lt;p&gt;&lt;!-- raw HTML omitted --&gt;在退役的边缘试探.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;居然rk2进入A队了，rp大概用光了吧……&lt;!-- raw HTML omitted --&gt;你看看你最近抽卡抽出来的都是什么鬼东西！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;d0&#34;&gt;D0&lt;/h2&gt;
&lt;p&gt;最后看了看板子.&lt;/p&gt;
&lt;h2 id=&#34;d1&#34;&gt;D1&lt;/h2&gt;
&lt;p&gt;早上起来感觉有点小困，但是因为要比赛了所以比较亢奋，总的来讲精神还算好.&lt;/p&gt;
&lt;p&gt;发现有大样例真是好评！开考之后我首先从头到尾读了一遍题目，T1的题意我纠结了一会才弄懂，感觉是个水题，T2感觉比较可做但是暂时还没什么想法，T3感觉可做而且有点想法，但是觉得可能会难打，T4似乎跟之前纪中集训的一道题很像.&lt;/p&gt;
&lt;p&gt;于是我就先切掉了T1，随手出了几个数据检查了一下，随了组大数据发现没RE什么的，就去搞T2，然后发现自己并不会做……我先暂时放弃了T2去看T3，发现是个三维数点，码了暴力和cdq分治套树状数组，放在一遍对拍，接着没花多少时间想出了T4，写了一发分治NTT，过了大样例. 这个时候我感觉300已经很不错了，就从头到尾静态差错了一遍. 大概到10:55的时候我感觉比较稳了，就去开T2，随便乱想了个做法，发现可以过所有的大样例，但是我怎么想都觉得是错的. 这个时候大概只剩30min了，想了想还是不写暴力去检查代码了，既然能过大样例应该暴力分还是有的？&lt;/p&gt;
&lt;p&gt;中午饭堂人特别多，跟着大家出去吃了，结果菜咸得吃不下……&lt;/p&gt;
&lt;p&gt;下午听评讲非常紧张，都没什么心情上去交流. 听说我T2的做法是对的？&lt;!-- raw HTML omitted --&gt;那岂不是可以AK？&lt;!-- raw HTML omitted --&gt;成绩单发下来，发现我真的AK了……&lt;/p&gt;
&lt;p&gt;晚上继续看板子，有了400分感觉压力没那么打了. &lt;!-- raw HTML omitted --&gt;想起来比赛前我爸还跟我说反正不可能AK的blahblah……&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;d2&#34;&gt;D2&lt;/h2&gt;
&lt;p&gt;按照惯例今天应该会变难，进考场之前我已经做好了打暴力的准备.&lt;/p&gt;
&lt;p&gt;还是按照惯例从头到尾看一遍题目. T1好像就是一个sb二合一，T2说不定可以dp/多项式什么的，T3保证高度随机那应该跟最长上升/下降子序列有关，可能不是很好想，T4……还是扔最后做吧……&lt;/p&gt;
&lt;p&gt;我先写完了T1，过了大样例还是感觉比较虚，怕爆longlong什么的，就从头到尾仔细算了一下. 接下来我推了一下T2的式子，发现并不需要多项式，可以直接&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(nk^2)\)&lt;/span&gt;dp. 写完T2过了大样例之后感觉还能写个暴力，就顺便对拍了一下，这样应该就比较稳了. 开T3之后我卡住了一段时间，发现有贡献的左端点和右端点都期望只有&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log n)\)&lt;/span&gt;个，为了缩小常数我写了一个zkw，发现就算是极限数据还是跑得很快. 到这个时候大概只过了2h的样子，不过我想着D2终究会难一些，再怎么样300也很不错了，于是就没打算花太多时间做T4，简单地写了一个&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(qn^3)\)&lt;/span&gt;的floyd求最小环. T4的大样例取消了，我只好自己出一些小数据测一下，感觉不是很稳，但也没办法. 剩下那2h我主要还是在各种检查代码&lt;!-- raw HTML omitted --&gt;，感觉整个赛场估计就我写代码的时间最短了&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;出考场的时候评委居然问我今天能不能AK……害怕……&lt;/p&gt;
&lt;p&gt;中午果断回酒店点外卖.&lt;/p&gt;
&lt;p&gt;下午听讲评没有前一天那么紧张了，还上去讲了一点东西. &lt;!-- raw HTML omitted --&gt;后来发现自己讲的一个东西是错的，身败名裂……&lt;!-- raw HTML omitted --&gt;最后发现跟预期分数一样，100+100+100+50=350.&lt;/p&gt;
&lt;h2 id=&#34;d3&#34;&gt;D3&lt;/h2&gt;
&lt;p&gt;反而有点紧张，前两天运气实在太好了，直接冲上rk2，要是D3考差了岂不是糟蹋了之前的运气？&lt;/p&gt;
&lt;p&gt;D3没有大样例了感觉药丸. 看了一遍题，T1没什么想法，T2会50，T3可能可以想一想，T4大概不怎么可做. 我先写完了T2，仔细想了想感觉T3是个三合一，但是每一部分都比较好写，就写了一下，整整5k……这道题非常地不好拍，我先把dp改成暴力，没拍出什么错. 我纠结了一下还是写了一个纯暴力，结果一拍就拍出错了. 改完之后就怎么也查不出错误了. 但是一方面这道题随机数据不怎么强，另一方面我一开始退出来的结论很难通过对拍验证，我就前前后后检查了很长一段时间. 差不多只剩1h的时候我开始想T1，结果想出来不够时间打了，还好60分非常好写.&lt;/p&gt;
&lt;p&gt;出考场之后，cjb：怎么样写完了吗？我：？？？&lt;/p&gt;
&lt;p&gt;下午一回来已经看见有评委拿着折算分的表了，我拿到了预期的210分，最后的折算分仍然是rk2. rk3只比我低0.5分左右，真是惊险……&lt;/p&gt;
&lt;h2 id=&#34;d4&#34;&gt;D4&lt;/h2&gt;
&lt;p&gt;上去领了四次奖……（GDOI+校团体+市团体+省队）&lt;!-- raw HTML omitted --&gt;拿奖拿到手软!&lt;!-- raw HTML omitted --&gt;今天广州市是市团体第一名，作为今年广州市的第一名有幸上台捧杯.&lt;/p&gt;
&lt;p&gt;搞了这么多年终于进省队了，还是rk2，也算是努力有了一定的回报吧. 不过也不能满足于此，接下来的apio和noi还要继续加油.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;虽然有很多人喷今年的题目辣鸡，我感觉总的来讲题目质量还是很不错的，不小心出到了原题那也是没办法的事，反正那几道题都挺不错的……n合一有一点点让人不爽，但至少今年这些题目打起来都挺舒服的.&lt;/p&gt;- https://seraphim.rocks/posts/gdoi2018/ - </description>
        </item>
    
    
    
        <item>
        <title>2018-4纪中集训总结</title>
        <link>https://seraphim.rocks/posts/2018-4jz/</link>
        <pubDate>Tue, 10 Apr 2018 17:33:00 +0800</pubDate>
        
        <guid>https://seraphim.rocks/posts/2018-4jz/</guid>
        <description>蒟蒻的博客 https://seraphim.rocks/posts/2018-4jz/ -&lt;p&gt;我好菜啊……&lt;/p&gt;
&lt;h2 id=&#34;4-10&#34;&gt;4-10&lt;/h2&gt;
&lt;p&gt;炸了炸了……&lt;/p&gt;
&lt;h3 id=&#34;t1&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;我算是想出来了，但是考场上没有调出来，一个是因为感觉比较工业所以总是写一会纠结一会要不要写下去，另外也是因为有些细节我稍微想复杂了一些. 大概思路是，从小到大枚举&lt;span class=&#34;math inline&#34;&gt;\(a _S\)&lt;/span&gt;，与此同时从大到小枚举&lt;span class=&#34;math inline&#34;&gt;\(b _S\)&lt;/span&gt;，每次就尝试把&lt;span class=&#34;math inline&#34;&gt;\(b _S\)&lt;/span&gt;减少1，也就是删掉&lt;span class=&#34;math inline&#34;&gt;\(b _x=b _S\)&lt;/span&gt;的&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，然后看看还有没有点数不小于&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;的联通块. 维护联通块大小的话可以用lct：每条边的权值看成两个端点&lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;的较大值，很容易证明整个联通块上只有最小生成树上面的边是有用的，这个就是简单的lct问题了.&lt;/p&gt;
&lt;p&gt;最小化&lt;span class=&#34;math inline&#34;&gt;\(\max\{a\}+\max\{b\}\)&lt;/span&gt;这样的问题，经常要从小到大枚举&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，然后求&lt;span class=&#34;math inline&#34;&gt;\(\max\{b\}\)&lt;/span&gt;的最小值，这是我以前就知道的. 求&lt;span class=&#34;math inline&#34;&gt;\(\max\{b\}\)&lt;/span&gt;的最小值的时候，以前我做的题都是可以直接求的，而在这道题里面可以从大到小枚举，每次尝试将其减小直到不可行，这个思路我以前没有想到过.&lt;/p&gt;
&lt;h3 id=&#34;t2&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;我已经注意到一个很关键的地方，就是强联通块的数量+1=划分的方案数，这里划分指的是把点划分成&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;两个集合（可以为空），对&lt;span class=&#34;math inline&#34;&gt;\(\forall x\in S,~y\in T\)&lt;/span&gt;有&lt;span class=&#34;math inline&#34;&gt;\((x,y)\in E\)&lt;/span&gt;. 可能是T1做得不顺利，我没有想到将其写成&lt;span class=&#34;math inline&#34;&gt;\(x+1=\sum _{S\cup T=U,~S\cap T=\emptyset}\prod _{x\in S}\prod _{y\in T}[(x,y)\in E]\)&lt;/span&gt;的形式（&lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;为所有点构成的集合），这样两边再求一下期望就可以得到&lt;span class=&#34;math inline&#34;&gt;\(E(x)+1=\sum _{S\cup T=U,~S\cap T=\emptyset}\prod _{x\in S}\prod _{y\in T}\textrm{Pr}((x,y)\in E)\)&lt;/span&gt;，考虑到输入只会给定m条边，其它边都是&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{2}\)&lt;/span&gt;，可以记&lt;span class=&#34;math inline&#34;&gt;\(f _{x,y}=2\textrm{Pr}((x,y)\in E)\)&lt;/span&gt;，即有&lt;span class=&#34;math inline&#34;&gt;\(E(x)+1=\sum _{S\cup T=U,~S\cap T=\emptyset}2^{-|S|(n-|S|)}\prod _{x\in S}\prod _{y\in T}f _{x,y}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;考虑怎么算这个东西，分开考虑输入给定的边构成的每个联通块，那么任何一个联通块的点数都不超过20，让&lt;span class=&#34;math inline&#34;&gt;\(g _i=\sum _{S\cup T=U^\prime,~S\cap T=\emptyset,~|S|=i}\prod _{x\in S}\prod _{y\in T}f _{x,y}\)&lt;/span&gt;，点数很少可以直接枚举&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;然后暴力计算出来（这里&lt;span class=&#34;math inline&#34;&gt;\(U^\prime\)&lt;/span&gt;代表一个联通块里的所有点构成的集合）. 让&lt;span class=&#34;math inline&#34;&gt;\(h _i=\sum _{S\cup T=U,~S\cap T=\emptyset,~|S|=i}\prod _{x\in S}\prod _{y\in T}f _{x,y}\)&lt;/span&gt;，容易发现&lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;就是每个联通块的&lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt;的卷积，同样可以暴力计算，最后答案即为&lt;span class=&#34;math inline&#34;&gt;\(\sum h _i2^{-i(n-i)}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-11&#34;&gt;4-11&lt;/h2&gt;
&lt;p&gt;AK辣！不过能A掉T2也是因为数据很水，要卡还是能卡成50分的.&lt;/p&gt;
&lt;h3 id=&#34;t1-1&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;水题&lt;/p&gt;
&lt;h3 id=&#34;t2-1&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;我用奇怪的分治AC了，让solve(l,r,hl,hr)表示处理&lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;这个区间，区间左右的石柱（即&lt;span class=&#34;math inline&#34;&gt;\(l-1\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(r+1\)&lt;/span&gt;）高度为&lt;span class=&#34;math inline&#34;&gt;\(h _l\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(h _r\)&lt;/span&gt;. 那么如果&lt;span class=&#34;math inline&#34;&gt;\(\max _{l\le i\le r}\{a _i\}\le\min\{h _l,h _r\}\)&lt;/span&gt;，就可以直接返回答案，否则找出区间中最高的石柱，然后向两边分治. 在数据随机的情况下，这么做是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(q\log n)\)&lt;/span&gt;的.&lt;/p&gt;
&lt;p&gt;其实只要让&lt;span class=&#34;math inline&#34;&gt;\(a _i\)&lt;/span&gt;单调就可以卡掉这个做法……正解是记&lt;span class=&#34;math inline&#34;&gt;\(h _i\)&lt;/span&gt;为第&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;列的最高位置（包括水），那么易知&lt;span class=&#34;math inline&#34;&gt;\(h _i\)&lt;/span&gt;是单峰的，而答案就是&lt;span class=&#34;math inline&#34;&gt;\(\sum(h _i-a _i)\)&lt;/span&gt;. 用两个set来维护&lt;span class=&#34;math inline&#34;&gt;\(h _i\)&lt;/span&gt;就可以了，具体细节有一点多，大概是维护&lt;span class=&#34;math inline&#34;&gt;\(a _i\)&lt;/span&gt;从左到右和从右到左的LIS，设其下标序列为&lt;span class=&#34;math inline&#34;&gt;\(S _1,~S _2\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(\sum h _i=\sum a _i(S _{1,i+1}-S _{1,i})+\sum a _i(S _{2,i}-S _{2,i+1})-n\max _{i=1}^n\{a _i\}\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(S _1,~S _2\)&lt;/span&gt;都要包含&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;和&lt;span class=&#34;math inline&#34;&gt;\(n+1\)&lt;/span&gt;）.&lt;/p&gt;
&lt;p&gt;c++的reverse_iterator也不知道发生了什么完全不能用，浪费我一个下午……&lt;/p&gt;
&lt;h3 id=&#34;t3&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;cf原题&lt;/p&gt;
&lt;h2 id=&#34;4-12&#34;&gt;4-12&lt;/h2&gt;
&lt;p&gt;辣鸡题意不清……不过也是我没认真读&lt;/p&gt;
&lt;h3 id=&#34;t1-2&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;按&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;排序，相同的话坐标较小的排在前面，然后&lt;span class=&#34;math inline&#34;&gt;\(f _i=\max\{f _j+\frac{(i-j)(i-j-1)}{2}\}\)&lt;/span&gt;，把括号拆开之后发现对每个&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;都是关于&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;的一条直线，用lych线段树维护即可，虽然是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log^2 n)\)&lt;/span&gt;，但常数比较小，用io优化可以卡过去.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;然后我就拿了18分，原来可以TM一个都不选. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;t2-2&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;首先可以想到拆开每一位，那么每次操作就是模2，循环卷积意义下乘&lt;span class=&#34;math inline&#34;&gt;\(f(z)=1+\frac{1}{z}+\cdots+\frac{1}{z^{k-1}}\)&lt;/span&gt;. 这个可以直接用FFT来做，不过&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;太多了……我只拿了60分. 注意到模2意义下多项式有一些很好的性质，比方说&lt;span class=&#34;math inline&#34;&gt;\(f^2(z)\equiv f(z^2)\pmod{2}\)&lt;/span&gt;. 于是&lt;span class=&#34;math inline&#34;&gt;\(f^{2^t}(z)\)&lt;/span&gt;都是很好求的.
这个时候可以发现其实没有必要使用多项式，进行&lt;span class=&#34;math inline&#34;&gt;\(2^t\)&lt;/span&gt;之后的结果就是&lt;span class=&#34;math inline&#34;&gt;\(y _i=\oplus _{j=0}^{k-1}x _{(i+j\cdot 2^t)\mod{n}}\)&lt;/span&gt;（这是因为&lt;span class=&#34;math inline&#34;&gt;\(f^{2^t}(z)=\sum _{j=0}^{k-1}z^{-j\cdot 2^t}\)&lt;/span&gt;）. 然后这个可以对每个环求前缀和从而&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n)\)&lt;/span&gt;求出来，总的时间复杂度为&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log T)\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&#34;t3-1&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;可以写出一个暴力的dp方程&lt;span class=&#34;math inline&#34;&gt;\(f _{i,j}=\max\{f _{k,j-1}+\text{val}(k,i)\}\)&lt;/span&gt;，这里&lt;span class=&#34;math inline&#34;&gt;\(f _{i,j}\)&lt;/span&gt;表示只考虑&lt;span class=&#34;math inline&#34;&gt;\(r _w\le i\)&lt;/span&gt;的区间，选&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;个点的答案. 我一开始的想法是决策单调性dp，但这样是两个&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;的，事实上&lt;span class=&#34;math inline&#34;&gt;\(\text{val}(k,i)\)&lt;/span&gt;可以用线段树来维护，当&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;增加的时候只需要做一个后缀加.&lt;/p&gt;
&lt;p&gt;关键应该是把&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;优化掉. 如果取消&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;的限制的话，dp方程的第二维可以直接去掉，这样复杂度里的&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;就没有了，这种时候可以使用这样一种套路：记选k个点的最优解为&lt;span class=&#34;math inline&#34;&gt;\(\text{ans}(k)\)&lt;/span&gt;，那么有&lt;span class=&#34;math inline&#34;&gt;\(\text{ans}(k+1)-\text{ans}(k)\le\text{ans}(k)-\text{ans}(k-1)\)&lt;/span&gt;，那么可以记&lt;span class=&#34;math inline&#34;&gt;\(c(k)=\text{ans}(k)-\lambda k\)&lt;/span&gt;，那么&lt;span class=&#34;math inline&#34;&gt;\(c(k+1)-c(k)=\text{ans}(k+1)-\text{ans}(k)-\lambda\)&lt;/span&gt;，即&lt;span class=&#34;math inline&#34;&gt;\(\text{ans}(k+1)-\text{ans}(k)=\lambda\)&lt;/span&gt;的时候&lt;span class=&#34;math inline&#34;&gt;\(c(k)\)&lt;/span&gt;取到最大值，那么二分这个&lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;，使&lt;span class=&#34;math inline&#34;&gt;\(c(k)\)&lt;/span&gt;取最大值时&lt;span class=&#34;math inline&#34;&gt;\(k=m\)&lt;/span&gt;，即可得到答案为&lt;span class=&#34;math inline&#34;&gt;\(c(m)+\lambda m\)&lt;/span&gt;. &lt;span class=&#34;math inline&#34;&gt;\(c(k)\)&lt;/span&gt;相当于每选一个点要付出&lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;的代价，问最大收益，可以用一个类似的dp来解决. 具体实现起来还有一些细节. 现在复杂度是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log n\log x)\)&lt;/span&gt;，据说常数比较不能AC.&lt;/p&gt;
&lt;p&gt;接下来只能考虑优化dp了. 注意到对&lt;span class=&#34;math inline&#34;&gt;\(x&lt; y\)&lt;/span&gt;，一旦&lt;span class=&#34;math inline&#34;&gt;\(f _x+v _x\le f _y+v _y\)&lt;/span&gt;，那&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;求再也不能成为最大值了，于是我们可以维护&lt;span class=&#34;math inline&#34;&gt;\(f _x+v _x\)&lt;/span&gt;的差分，一旦某个位置非负，那就可以把前面的位置合并进来，这个用并查集来维护. 有几个细节，一个是具体实现的时候我们应该求出最大化收益的时候选出的最大点数，所以差分刚好为0要合并前面的时候，还要注意处理一下. 另外，应该让&lt;span class=&#34;math inline&#34;&gt;\(f _0+v _0=\lambda\)&lt;/span&gt;，这样在此处转移就相当于一个点都不选的情况（区间从1开始）. 第一次写起来真的挺恶心的……这种一堆区间然后dp的问题用左闭右开区间似乎会方便一点？&lt;/p&gt;
&lt;h2 id=&#34;4-13&#34;&gt;4-13&lt;/h2&gt;
&lt;p&gt;炸了炸了……&lt;/p&gt;
&lt;h3 id=&#34;t1-3&#34;&gt;T1&lt;/h3&gt;
&lt;p&gt;强行线性基硬搞的话&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;应该太多了所以过不了. 我们把询问离线，按右端点排序，那么就是要维护&lt;span class=&#34;math inline&#34;&gt;\(f(j,i)\)&lt;/span&gt;表示&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;到&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;的线性基，支持把&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;右移. 首先注意到&lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;左移的时候，相当于不断往线性基里面加数，所以不同的&lt;span class=&#34;math inline&#34;&gt;\(f(j,i)\)&lt;/span&gt;只有&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log a)\)&lt;/span&gt;个，考虑维护这些线性基和它们的端点，每次&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;右移的时候，存在一个&lt;span class=&#34;math inline&#34;&gt;\(j _0\)&lt;/span&gt;，对&lt;span class=&#34;math inline&#34;&gt;\(j&lt; j _0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f(j,i)\)&lt;/span&gt;不变，对&lt;span class=&#34;math inline&#34;&gt;\(j\ge j _0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f(j,i)\)&lt;/span&gt;相当于插入一个数，直接维护就好了. 这样的复杂度是&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(n\log^2 a+q\log a)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;上面那个做法的瓶颈在于维护&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(\log a)\)&lt;/span&gt;个线性基. 这些线性基的左端点肯定是线性无关的，从右到左线性基的变化其实就是依次加入这些端点，所以可以考虑把这些端点放入一个线性基里面，而且只维护这个线性基. 这么做的问题是，放进线性基里面就不能区分它们的位置了，所以没办法查询，这里要用到一个套路，如果&lt;span class=&#34;math inline&#34;&gt;\(x&lt; y\)&lt;/span&gt;，那么所有包含&lt;span class=&#34;math inline&#34;&gt;\(a _x\)&lt;/span&gt;的查询肯定包含&lt;span class=&#34;math inline&#34;&gt;\(a _y\)&lt;/span&gt;，所以把&lt;span class=&#34;math inline&#34;&gt;\(a _x\)&lt;/span&gt;异或上&lt;span class=&#34;math inline&#34;&gt;\(a _y\)&lt;/span&gt;肯定不会有影响，所以我们维护线性基的时候可以多维护一个位置，插入一个数&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;的时候，如果到了某一位有数，就把位置靠后的放入线性基，靠前的异或上靠后的然后继续往下看. 插入成功了之后不能用较小的数的去消这个数，也不能用这个数去消较大的数.&lt;/p&gt;
&lt;p&gt;感觉讲不清楚，贴段代码吧……&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ele &lt;span style=&#34;color:#a6e22e&#34;&gt;getv&lt;/span&gt;(ele x,ele i){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(ele x,ele j){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (getv(x,i)){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b[i]){
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;c[i]) swap(b[i],x),swap(c[i],j);
				x&lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt;b[i];
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
				b[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x; c[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			}
		}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这整一套思路都非常巧妙非常神仙啊，先当做查询区间线性基的一个套路记下来吧.&lt;/p&gt;
&lt;h3 id=&#34;t2-3&#34;&gt;T2&lt;/h3&gt;
&lt;p&gt;恍惚间回到了GDKOI2018 D1T1……GDKOI的时候，我写的是一次更新一整段线路，这回一开始也是，结果都死活TLE卡不过去，后来改成每次只更新下一个站就飞快地AC了……&lt;!-- raw HTML omitted --&gt;叫我整段小天才！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;t3-2&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;题目可以转化成给你&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;组边，每组至多选一条，问不出现环的情况下最多选多少条边. 考虑每次增加一组边，然后钦定一条加进去，如果没有出现环就不管了，否则的话枚举删掉环上的一条边，再尝试把跟它同组的另一条边钦定加进去. 这就跟找增广路一样. 复杂度&lt;span class=&#34;math inline&#34;&gt;\(\mathcal O(r^3)\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-14&#34;&gt;4-14&lt;/h2&gt;
&lt;p&gt;神仙题神仙题……&lt;/p&gt;
&lt;p&gt;晚上打了场计蒜客的比赛，进了前200似乎有衣服拿？其实我发挥得挺差的，G没注意到会爆long long，又不知道unsigned long long已经到了&lt;span class=&#34;math inline&#34;&gt;\(10^{19}\)&lt;/span&gt;，结果耽搁了好久. B用bitset存边表但是没有清空，每次只是把邻接矩阵读进来，这样多组数据后一组的n比前一组小的时候就没有清空，后面and起来再算1的个数的时候就会出问题. C就是一个很简单的FWT，不知道为什么没想到.&lt;/p&gt;
&lt;h3 id=&#34;t3-3&#34;&gt;T3&lt;/h3&gt;
&lt;p&gt;终于知道这种问题怎么做了！&lt;/p&gt;
&lt;p&gt;首先不考虑取的树的个数的限制，那么答案就是循环卷积意义下&lt;span class=&#34;math inline&#34;&gt;\([x^k]\prod _{i=0}^{n-1}(1+x^i)\)&lt;/span&gt;. 因为DFT本身就是循环卷积，所以可以考虑用IDFT来算，记&lt;span class=&#34;math inline&#34;&gt;\(f(x)=\prod _{i=0}^{n-1}(1+x^i)\)&lt;/span&gt;，答案就是&lt;span class=&#34;math inline&#34;&gt;\(\sum _{i=0}^{n-1}f(\omega _n^i)\omega _n^{-ik}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x^n-1=\prod (x-\omega _n^i)\)&lt;/span&gt;，这是因为你把&lt;span class=&#34;math inline&#34;&gt;\(\omega _n^i(i=0,1,\ldots,n-1)\)&lt;/span&gt;代入，两边都是0. 让&lt;span class=&#34;math inline&#34;&gt;\(x=-1\)&lt;/span&gt;，即有&lt;span class=&#34;math inline&#34;&gt;\(1-(-1)^n=\prod(1+\omega _n^i)\)&lt;/span&gt;，那么答案就可以继续化为&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
记$s(n,k)=\sum _{\gcd(i,n)=1} \omega _n^{ik}$，后面那个东西就是$s(\frac{n}{d},k)$，可以莫比乌斯反演搞出来.

现在考虑怎么加上取的个数的限制，有一个套路，就是多加一个元，即计算$[x^ky^m]\prod _{i=0}^{n-1}(1+x^iy)$，这里只有$x$是循环卷积，把$x$看成主元，使用几乎完全相同的推导，得到答案是$[y^m]\sum (1-(-y)^{n/d})^ds(\frac{n}{d},k)$. 二项式展开需要组合数，可以分段打阶乘表来解决.


## HNOI

&lt;del&gt;为什么没有日期呢？因为我忘了是哪天了.&lt;/del&gt;

### D1T1

这个做法真神仙！

从后往前考虑每个操作，如果某个位置and了0或者or了1，那么前面的操作就无关紧要了，或者说这一位已经被确定下来了. 于是可以把每个二进制位上的$n$个操作从后往前看成一个01串，然后插到一棵trie里面，考虑在trie里面从上往下走，如果这一步是and，那么整个左子树里的位置都被确定下来了，否则整个右子树里的位置都被确定下来了. 而你走到NULL或者一个叶子，就意味着所有的位置都确定下来了，于是本质不同的方案只有$\mathcal O(nm)$个，把这些方案都找出来，然后把他们按照钦定哪些位置为1分类，存到hash表里面，询问的时候就可以直接在hash表里面查. 

如何hash位置集合？给每个位置分配一个$[0,2^{64})$的整数作为权值，位置集合的hash就是所有位置的权值异或起来，可以证明这样冲突的概率很小.

### D1T2

首先是把序列倍长，很容易&lt;del&gt;（据说这其实是难点）&lt;/del&gt;推出要最小化$i+\max _{i\le j\le i+n-1}\{T _j-j\}$，这个可以用单调栈很容易地dp出来，接着可以发现对答案有贡献的$T _j-j$一定是最右边的一个，它左边第一个大于它的，以此类推……然后这就非常楼房重建了. &lt;del&gt;我考场上头铁想用线段树维护结果没写出来. 楼房重建可以分块啊！贼好写啊！sbwhj！&lt;/del&gt;理论上每个块的大小为$\sqrt{n\log n}$的时候跑得最快，但是似乎把块只开$\sqrt n$跑得要快很多，看来以后各种分块还是要看数据调整块的大小. 还有一些小优化：如果有一块最大值比右边的最大值小，那就可以直接跳过而不需要在块内二分；最后有很多块可以不在块内二分就跳过，因为$i &gt; n$的时候对答案没有贡献.

### D1T3

kernelization真的太妙了，贴个[链接](https://www.zhihu.com/question/272303098/answer/367368615).

## 4-17

可能是正好太困了，发挥极差.

以后一定要记住题目难度与顺序无关. 一场比赛T4一样可能很可做，T1该弃还是要弃，没有必要慌，像今年GDKOID2，像今天的T4，似乎今年HNOID1T1也是一天里面最难的.

对拍有的时候也是不靠谱的，像T1我就有错没有拍出来，所以肉眼检查、自己出数据也是很重要的，特别是给自己程序加了个优化之类的时候，一定要想清楚，我T1炸了也有一部分原因是这个.

### T1

成功读错题，不知道为什么产生了一种错觉，代价加起来不会超过$P$. 这是一个典型的树上背包问题，让$f_{i,j}$表示以$i$为根的子树里代价恰好为$j$的最大收益，我以前一直只会把子树的$f$卷起来来转移，不过启发式合并一发还是可以水过去的. 事实上可以用$f _{i,j}$表示dfs序上只考虑$i$以前的点，代价恰好为$j$的时候的最大收益，那么选$i$就把背包转移到dfs序上下一个点，否则就跳过整棵子树，也就是dfs序上的整段.

### T2

想复杂了. 旋转的时候中序遍历不变，子树权值和只有两个点会被改变，每次询问就是中序遍历上一段区间的乘积.

### T3

一眼就能看出来是跟$g(n)=n^m$卷起来做杜教筛，关键是怎么求$m$次方的前缀和. 不知道为什么我以前听说的方法都是满页数学公式，各种多项式，反而不知道这么一个简单的方法：显然这是一个$m+1$次的多项式，把它在$0,1,\ldots,m+1$处的点值线性预处理出来，然后就可以插值了. 因为选出的点的特殊性，分母处的$\prod _{1\le i\le n,~i\neq k}(x _k-x _i)=k!(m+1-k)!$，预处理阶乘之后可以$\mathcal O(1)$求出来. 最后一点空间卡得很近，出题人想强迫你写多点求值，但是可以各种卡常卡空间+预处理$\mathcal n^{\frac{2}{3}}$的答案+预处理更大范围内的$m$次方前缀和压线A掉. 卡空间的方法大概有这么几个：筛$\mu(i)i^m$的时候不额外用一个数组来存是否是质数，而是直接使用存答案的数组，一开始全部置为-1，那某个位置不为0的时候显然就已经被筛掉了；存质数的数组只需要开到$\mathcal O(\frac{n}{\ln n})$.

### T4

简单计数题，把$(0,0)$也看成不合法的向量，容斥一发，计算不考虑不合法向量随便走的方案数时，可以发现两个坐标是独立的，于是分开来dp，再用前缀和优化一下转移.

## 4-18

还是很困……又挂一场. 希望只是困的问题吧……

T1我已经想到了做法，但是没有注意到可以离线，而在线的标准做法太难打，就打了个水法，结果就被卡掉了. 说到底还是我的基础不够扎实，没有想到可以离线来简化问题.T2的式子我推了太久，也导致了T1我没时间打正解，如果基础再扎实一点，再冷静一点，应该能推得更快，能注意到更简洁的做法，所以以后在考场上还是需要更平稳一点的心态，思考再细致一点，不要无脑往一个方向钻，当然太困了没办法集中精力也是原因之一，当时想边界情况的时候就死活想不清楚.

### T1

其实就是要求每个子串出现次数的平方和，如果$n=1$的话后缀自动机随便做，有多个的话其实就是要建一个广义后缀自动机然后依次加入每个字符串，但是带修改的时候，直接暴力维护每个节点代表的串的出现次数是会被卡的. 这道题可以离线把整个广义后缀自动机建好，再用树链剖分来维护parent树，如果强制在线的话就只能上LCT了. 据说有$\mathcal O(L\sqrt L)$的水法？

### T2

考场上把式子推了出来，但是比标算繁琐一些，而且不够时间写分治FFT了，就只好交了一发暴力的dp，结果看错了范围，最后还交错了程序……

感觉像这种题，要你算一个绕来绕去的奇奇怪怪的东西，很可能会有优美一些的意义，比方说这道题，每次操作的时候还要去掉这个数，把其他的数乘起来，就显得很难表示，我直接硬推也推出来了，但是就麻烦了很多. 事实上可以注意到，每一轮的伤害其实就是$\prod A _i$的减少量，所以只需要求最后$\prod A _i$的期望，推出来就是$\prod A _i-\frac{k!}{n^k}[z^k]e^{nz}\prod(A _i-z)$，非常地好算. 

我考场上推出来的做法是记$f(z)=\prod(A _i-z)\sum\frac{1}{A _i-z}$，然后计算$\sum \frac{[z^r]f(z)}{n^{r+1}}\sum _{i=0}^{k-1}i^{r\downarrow}$，这里$\sum _{i=0}^{k-1} i^{r\downarrow}=\sum _{i=0}^{k-1} \frac{(i+1)^{r+1\downarrow}-i^{r+1\downarrow}}{r+1}=\frac{k^{r+1\downarrow}}{r+1}$，这个求和的方法我考场上一时慌张居然没想到……我好菜啊……

&lt;del&gt;有没有dalao愿意看看我这个做法对不对啊. &lt;/del&gt;

### T3

肯定只有两端会往回走，中间都是一个方向上的，然后&lt;del&gt;应该&lt;/del&gt;可以dp出来. 细节好多不想写……

### T4

神仙题. &lt;del&gt;输出Infinity有20分. &lt;/del&gt;

## 4-19

开始的时候还是困，头昏脑涨地想了一会，然后开始头铁码T3，等码出来+卡常卡进去之后头非常疼，时间也不多了，结果其他题的暴力没有打好. 以后可能还是要调整一下策略，说不定需要先稳住暴力分再去码正解？

以后考前一定要尽量休息好. 

### T1

首先是一个最小割模型的套路，如果有若干个物品，第$i$个有$p _i$种决策方案，分别会得到一定的收益，决策之间有一些制约关系. 可以把$i$拆成$p _i-1$个点$a _{i,0},a _{i,1},\ldots,a _{i,p _i-2}$，相邻两个点连边，源点向$a _{i,0}$连边，$a _{i,p _i-2}$向汇点连边，割掉一条边就代表一种决策. 决策之间的制约关系，像某个点的决策编号比另一个点靠前，某个点的决策编号至少比另一个点靠前$k$位之类的，就可以通过在某些点之间连边来体现. 以假定选取获得了所有正的收益，边权即为这么决策得不到的收益，然后算最小割即可. 回去要好好看一下网络流的各种模型. 

这道题里面，对每个$x _i$，可以认为它有3种决策：在最大子段前，在最大子段里，在最大子段后. 对于给定的每条边$(u,v)$，可以看作$u$的决策编号不能在$v$之后. 这样就能转化为最小割模型来做了. 

### T2

考场上我已经想到了用莫比乌斯反演转化为求$k|\gcd(u,v)$的路径条数，结果没好好想下去.

可以发现有平方因子的因数都是没有贡献的，而$10^6$以内的数最多有$c=7$个素因数，所以每个数最多有$2^c=128$个对答案有贡献的约数. 先考虑没有修改的情况，预处理出$S _d$表示权值被$d$整除的边的集合，对于每个非空且满足$\mu(d)\neq 0$的$S _d$，用一个并查集统计答案就可以了. 注意到每条边之多出现在$2^c$个满足$\mu(d)\neq 0$的$S _d$中，复杂度为$\mathcal O(2^cn\alpha(n))$. 

考虑在线，我的第一反应是按时间分治，可是这个东西好像不能很方便地加边，更不用说撤销. 注意到$q$非常小，因而受到修改操作影响的边也非常少，可以把$S _d$中受操作影响和不受影响的边分开来存，对于每个$d$，先只把不受影响的边加进去，然后枚举$q+1$时间点，对每个时间点，加入受影响且边权被$d$整除的边，统计答案再撤销，去计算下一个时间点. 因为要撤销所以并查集不能路径压缩了，复杂度为$\mathcal O((n+q^2)2^c\log n)$. 

### T3

数位dp的做法还是比较容易看出来的，正解非常神仙. 

### T4

先坑着. 
\]&lt;/span&gt;&lt;/p&gt;- https://seraphim.rocks/posts/2018-4jz/ - </description>
        </item>
    
    
    
    
  </channel>
</rss> 